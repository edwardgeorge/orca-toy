( Orca
	
	TODO
		- Catch ports that overflow out of grid
		- Get case from right-side port
		- Display short timer
		- Drag Selection
		- sharp notes
		- Change BPM
		- Insert mode
)

%+  { ADD } %-   { SUB }  %*  { MUL }  %/  { DIV }
%<  { LTH } %>   { GTH }  %=  { EQU }  %!  { NEQ }
%++ { ADD2 } %-- { SUB2 } %** { MUL2 } %// { DIV2 }
%<< { LTH2 } %>> { GTH2 } %== { EQU2 } %!! { NEQ2 }

%8** { #30 SFT2 }       %8// { #03 SFT2 }
%TOB  { SWP POP }       %TOS  { #00 SWP }
%INCR { SWP #01 + SWP } %DECR { SWP #01 - SWP }

%DEBUG  { .Console/byte DEO #0a .Console/char DEO }
%DEBUG2 { .Console/short DEO2 #0a .Console/char DEO }

%RELEASE-MOUSE { #00 .Mouse/state DEO }

%RTN  { JMP2r }
%MOD  { DUP2 / * - } 
%MOD8 { #07 AND }
%MIN1 { DUP #00 = + }
%LTSk { #80 + SWP #80 + > }

%TOGGLE { DUP LDZ #00 = SWP STZ }
%GET-ITERATORS { SWP2k POP SWP POP }

%LOCKED-TYPE   { #01 } %PORTEL-TYPE   { #02 }
%OPERATOR-TYPE { #03 } %PORTER-TYPE   { #04 }
%OUTPUT-TYPE   { #05 }

%DATA-CELLS { #b000 }
%DATA-LOCKS { #c000 }
%DATA-TYPES { #d000 }
%DATA-FILE { #e000 } ( file transfer )
%DATA-CLIP { #f000 } ( copy/paste )

%CHAR-NULL  { #00 } %CHAR-LINE  { #0a }
%CHAR-HASH  { #23 } %CHAR-BANG  { #2a }
%CHAR-DOT   { #2e } %CHAR-EQUAL { #3d }

%IS-CHAR-KEY { STHk #20 > STHr #7b < #0101 == }

%SET-STATE   { #01 .state/changed STZ ;draw-state JSR2 }
%RESET-STATE { #00 .state/changed STZ ;draw-state JSR2 }
%RESET-SELECTION { .selection/x1 LDZ .selection/x2 STZ .selection/y1 LDZ .selection/y2 STZ }

%GET-INDEX { #00 SWP #00 .grid/width LDZ ** ROT #00 SWP ++ } ( x y -- index )
%GET-CHAR  { #24 MOD #00 SWP ;b36clc ++ LDA } ( b36 -- char )
%GET-VALUE { #20 - #00 SWP ;values ++ LDA } ( char -- b36 )
%GET-NOTE  { GET-VALUE TOS ;uc-notes ++ LDA } ( char -- midi )

%GET-CELL  { GET-INDEX DATA-CELLS ++ LDA } ( x y -- char )
%SET-CELL  { ROT ROT GET-INDEX DATA-CELLS ++ STA } ( x y char -- )
%GET-TYPE  { GET-INDEX DATA-TYPES ++ LDA } ( x y -- type )
%SET-TYPE  { ROT ROT GET-INDEX DATA-TYPES ++ STA } ( x y type -- )
%GET-LOCK  { GET-INDEX DATA-LOCKS ++ LDA } ( x y -- type )
%SET-LOCK  { ROT ROT GET-INDEX DATA-LOCKS ++ STA } ( x y type -- )
%GET-PORT-LEFT  { DUP2 PORTEL-TYPE SET-TYPE GET-CELL GET-VALUE } ( x y -- char )
%GET-PORT-RIGHT { DUP2 PORTER-TYPE SET-TYPE DUP2 #01 SET-LOCK GET-CELL GET-VALUE } ( x y -- char )
%GET-PORT-RIGHT-RAW { DUP2 PORTER-TYPE SET-TYPE DUP2 #01 SET-LOCK GET-CELL } ( x y -- char )
%SET-PORT-OUTPUT { STH DUP2 OUTPUT-TYPE SET-TYPE DUP2 #01 SET-LOCK STHr SET-CELL } ( x y char -- )

( devices )

|00 @System     &vector $2 &pad      $6 &r      $2 &g     $2 &b      $2 ]
|10 @Console    &vector $2 &pad      $6 &char   $1 &byte  $1 &short  $2 &string $2 ]
|20 @Screen     &vector $2 &width    $2 &height $2 &pad   $2 &x      $2 &y      $2 &addr  $2 &color  $1 ]
|30 @Audio0     &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr  $2 &volume $1 &pitch $1 ]
|40 @Audio1     &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr  $2 &volume $1 &pitch $1 ]
|50 @Audio2     &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr  $2 &volume $1 &pitch $1 ]
|60 @Audio3     &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr  $2 &volume $1 &pitch $1 ]
|80 @Controller &vector $2 &button   $1 &key    $1 ]
|90 @Mouse      &vector $2 &x        $2 &y      $2 &state $1 &chord  $1 ]
|a0 @File       &vector $2 &success  $2 &offset $2 &pad   $2 &name   $2 &length $2 &load $2 &save $2 ]
|b0 @DateTime   &year   $2 &month    $1 &day    $1 &hour  $1 &minute $1 &second $1 &dotw $1 &doty $2 &isdst $1 ]

( variables )

|0000

@state
	&timer $1
	&trap $1
	&blink $1
	&changed $1
@timer
	&beat $1 
	&alive $1 
	&speed $1
	&frame $2 
	&seed $2
@path 
	&length $1
	&name $20
@grid
	&x1 $2
	&y1 $2
	&x2 $2
	&y2 $2
	&width $1 
	&height $1
@toolbar
	&x1 $2
	&y1 $2
	&x2 $2
	&y2 $2
@selection 
	&x1 $1 &y1 $1 &x2 $1 &y2 $1
@cursor
	&x $2 &y $2 &last $1
@variables
	$36

|0100

	( theme ) 
	#0f35 .System/r DEO2 
	#0fc5 .System/g DEO2 
	#0f95 .System/b DEO2

	( synths )
	#dd .Audio0/volume DEO  #0118 .Audio0/adsr DEO2 #0100 .Audio0/length DEO2
	#ce .Audio1/volume DEO  #0334 .Audio1/adsr DEO2 #0100 .Audio1/length DEO2
	#ec .Audio2/volume DEO  #0414 .Audio2/adsr DEO2 #0100 .Audio2/length DEO2
	#ee .Audio3/volume DEO  #022c .Audio3/adsr DEO2 #0100 .Audio3/length DEO2

	;sin-pcm .Audio0/addr DEO2
	;tri-pcm .Audio1/addr DEO2
	;sin-pcm .Audio2/addr DEO2
	;tri-pcm .Audio3/addr DEO2

	( vectors ) 
	;on-button .Controller/vector DEO2
	;on-mouse .Mouse/vector DEO2
	;on-frame .Screen/vector DEO2

	( set grid size )
	.Screen/width DEI2 
		DUP2 8// SWP POP #07 - .grid/width STZ
		DUP2 #0002 // .grid/width LDZ #02 / #01 + TOS 8** -- #0004 ++ .grid/x1 STZ2
		#0002 // .grid/width LDZ #02 / TOS 8** ++ #0002 ++ .grid/x2 STZ2
	.Screen/height DEI2 
		DUP2 8// SWP POP #07 - .grid/height STZ
		DUP2 #0002 // .grid/height LDZ #02 / #01 + TOS 8** -- #0004 -- .grid/y1 STZ2
		#0002 // .grid/height LDZ #02 / TOS 8** ++ #0008 -- .grid/y2 STZ2

	( set toolbar size )
	.grid/x1 LDZ2 .toolbar/x1 STZ2
	.grid/y2 LDZ2 #0010 ++ .toolbar/y1 STZ2
	.grid/x2 LDZ2 .toolbar/x2 STZ2
	.toolbar/y1 LDZ2 #0008 ++ .toolbar/y2 STZ2

	( random seed )
	.DateTime/second DEI .DateTime/minute DEI DUP2
		.DateTime/hour DEI .DateTime/day DEI ++ ++
		#1317 **
		.timer/seed STZ2

	( blank variables )
	#00 #24
	&var
		OVR .variables + CHAR-DOT SWP STZ
		INCR
		LTHk ,&var JCN
	POP2

	;untitled-txt ;new-file JSR2

	( start )
	;clear JSR2
	;init JSR2
	#9a .timer/speed STZ
	#01 .timer/alive STZ

	;redraw JSR2

BRK

@on-frame ( -> )
	
	.state/trap LDZ ;on-frame-trap JCN2

	( paused ) .timer/alive LDZ #01 JCN [ BRK ]

	;draw-meter JSR2

	.timer/beat LDZ #01 + DUP .timer/beat STZ

	( skip ) #08 = #01 JCN [ BRK ]

	.timer/frame LDZ2 #0001 ++ .timer/frame STZ2

	;run JSR2

	#00 .timer/beat STZ

BRK

@on-frame-trap ( -> )
	
	.state/trap LDZ #00 ! #01 JCN [ RTN ]

	( incr ) .state/timer LDZ #01 + DUP .state/timer STZ 

	#08 ! ,&no-toggle JCN
		.state/blink TOGGLE
		#23 .state/blink LDZ #09 * + ;draw-filepath JSR2
		#00 .state/timer STZ 
	&no-toggle

BRK

@on-button ( -> )
	
	.Controller/key DEI #00 ! .state/trap LDZ #0101 == ;on-button-trap JCN2

	( ignore release when key/button is blank )
	.Controller/button DEI2 
		DUP2 #0000 !! #02 JCN [ POP2 BRK ]

	( ctrl modes )
	DUP2 #0103 !! ,&no-copy JCN
		;copy-block JSR2 
		;redraw JSR2 POP2 BRK &no-copy
	DUP2 #0116 !! ,&no-paste JCN
		;paste-block JSR2 RESET-SELECTION
		;redraw JSR2 POP2 BRK &no-paste
	DUP2 #0118 !! ,&no-cut JCN
		;copy-block JSR2 CHAR-DOT ;fill-block JSR2 RESET-SELECTION
		;redraw JSR2 POP2 BRK &no-cut
	DUP2 #010f !! ,&no-open JCN
		;load-file JSR2 ;redraw JSR2 
		;redraw JSR2 POP2 BRK &no-open
	DUP2 #0112 !! ,&no-name JCN
		.state/trap TOGGLE
		#00 .state/blink STZ 
		#23 ;draw-filepath JSR2 POP2 BRK &no-name
	DUP2 #0113 !! ,&no-save JCN
		;save-file JSR2 
		;redraw JSR2 POP2 BRK  &no-save
	DUP2 #010e !! ,&no-make JCN
		#20 ;draw-filepath JSR2 ;untitled-txt ;new-file JSR2 
		;redraw JSR2 POP2 BRK &no-make
	SWP POP

	( key )
	DUP #20 ! ,&no-space JCN
		.timer/alive TOGGLE
		;redraw JSR2 POP BRK &no-space
	DUP #08 ! ,&no-backspace JCN
		CHAR-DOT ;fill-block JSR2 POP BRK &no-backspace
	DUP IS-CHAR-KEY #00 = ,&no-key JCN
		.selection/x1 LDZ .selection/y1 LDZ .Controller/key DEI SET-CELL
		SET-STATE ;redraw JSR2 POP BRK &no-key
	POP
	
	( button )
	.Controller/button DEI [ DUP #04 AND #00 ! #02 * STH ] #f0 AND
		DUP #04 SFT #01 AND #01 NEQ ,&no-up JCN
			.selection/y1 STHkr + LDZ #00 = ,&no-up JCN
			.selection/y1 STHkr + LDZ #01 - .selection/y1 STHkr + STZ
			.selection/y2 STHkr + LDZ #01 - .selection/y2 STHkr + STZ 
			;clamp-selection JSR2 &no-up
		DUP #05 SFT #01 AND #01 NEQ ,&no-down JCN
			.selection/y1 STHkr + LDZ #01 + .selection/y1 STHkr + STZ
			.selection/y2 STHkr + LDZ #01 + .selection/y2 STHkr + STZ 
			;clamp-selection JSR2 &no-down
		DUP #06 SFT #01 AND #01 NEQ ,&no-left JCN
			.selection/x1 STHkr + LDZ #00 = ,&no-left JCN
			.selection/x1 STHkr + LDZ #01 - .selection/x1 STHkr + STZ
			.selection/x2 STHkr + LDZ #01 - .selection/x2 STHkr + STZ 
			;clamp-selection JSR2 &no-left
		DUP #07 SFT #01 AND #01 NEQ ,&no-right JCN
			.selection/x1 STHkr + LDZ #01 + .selection/x1 STHkr + STZ
			.selection/x2 STHkr + LDZ #01 + .selection/x2 STHkr + STZ 
			;clamp-selection JSR2 &no-right
	POP POPr

	( clear last cursor )
	.cursor/x LDZ2 .Screen/x DEO2
	.cursor/y LDZ2 .Screen/y DEO2
	;blank_icn .Screen/addr DEO2
	#30 .Screen/color DEO

	;redraw JSR2

BRK

@on-button-trap ( -> )

	( enter )
	.Controller/key DEI #0d ! ,&no-edit-enter JCN
		#00 .state/trap STZ
		#23 ;draw-filepath JSR2
		BRK
		&no-edit-enter
	( backspace )
	.Controller/key DEI #08 ! ,&no-edit-backspace JCN
		.path/length LDZ #00 = ,&edit-end JCN
		.path/length LDZ #01 - .path/length STZ
		#00 .path/name .path/length LDZ + STZ
		#23 ;draw-filepath JSR2
		BRK
		&no-edit-backspace
	( default )
	.path/length LDZ #1f = ,&edit-end JCN
		.Controller/key DEI .path/name .path/length LDZ + STZ
		.path/length LDZ #01 + .path/length STZ
	&edit-end
	#00 .path/name .path/length LDZ + STZ

BRK

@on-mouse (-> )
	
	( clear last cursor )
	.cursor/x LDZ2 .Screen/x DEO2
	.cursor/y LDZ2 .Screen/y DEO2
	;blank_icn .Screen/addr DEO2
	#30 .Screen/color DEO

	( draw new cursor )
	.Mouse/x DEI2 DUP2 .cursor/x STZ2 .Screen/x DEO2
	.Mouse/y DEI2 DUP2 .cursor/y STZ2 .Screen/y DEO2
	;cursor_icn .Screen/addr DEO2
	.Mouse/state DEI #00 ! #02 * [ #31 + .Screen/color DEO ]

	( route )
	.Mouse/y DEI2 8// TOB .toolbar/y1 LDZ2 8// TOB = 
		;on-mouse-toolbar JCN2
	.Mouse/x DEI2 .Mouse/y DEI2 .grid ;within-rect JSR2
		;on-mouse-grid JCN2

	RELEASE-MOUSE
	
BRK

@on-mouse-grid ( -> )
	
	.Mouse/state DEI DUP .cursor/last LDZ 
		DUP2 #0000 == ,&end JCN
		DUP2 #0100 !! ,&no-down JCN
			.Mouse/x DEI2 .grid/x1 LDZ2 -- 8// TOB 
				DUP .selection/x1 STZ .selection/x2 STZ
			.Mouse/y DEI2 .grid/y1 LDZ2 -- 8// TOB 
				DUP .selection/y1 STZ .selection/y2 STZ
				;clamp-selection JSR2
			;redraw JSR2
			,&end JMP
			&no-down
		( release )
		.Mouse/x DEI2 .grid/x1 LDZ2 -- 8// TOB .selection/x2 STZ
		.Mouse/y DEI2 .grid/y1 LDZ2 -- 8// TOB .selection/y2 STZ
		;clamp-selection JSR2
		;redraw JSR2
	&end
	POP2
	.cursor/last STZ

BRK

@on-mouse-toolbar ( -> )
	
	( skip ) .Mouse/state DEI #00 ! #01 JCN [ BRK ]

	( left-side )
	.Mouse/x DEI2 .grid/x1 LDZ2 -- 8// TOB 
	DUP #09 > OVR .grid/width LDZ SWP - #05 > #0101 !! ,&no-rename JCN
		.state/trap TOGGLE
		#00 .state/blink STZ 
		#23 ;draw-filepath JSR2
		&no-rename
	POP

	( right-side )
	.grid/x2 LDZ2 .Mouse/x DEI2 -- 8// TOB 
	DUP #00 ! ,&no-save JCN
		;save-file JSR2 &no-save
	DUP #02 ! ,&no-load JCN
		;load-file JSR2
		;redraw JSR2 &no-load
	DUP #03 ! ,&no-name JCN
		#20 ;draw-filepath JSR2
		;untitled-txt ;new-file JSR2
		;redraw JSR2 &no-name
	POP

	RELEASE-MOUSE

BRK

( operations )

@get-bang ( x y -- bang )

	DUP2 #01 + GET-CELL CHAR-BANG = ,&bang JCN
	DUP2 #01 - GET-CELL CHAR-BANG = ,&bang JCN
	DUP2 INCR  GET-CELL CHAR-BANG = ,&bang JCN
	DUP2 DECR  GET-CELL CHAR-BANG = ,&bang JCN
	POP2 #00 RTN
	&bang
		POP2 #01 

RTN

@get-cell-sprite ( x y -- addr )
	
	DUP2 GET-CELL
	( if character is dot )
	DUP CHAR-DOT NEQ ,&no-bar JCN
		( check if x,y is grid )
		POP
		DUP2 MOD8 #00 = SWP MOD8 #00 = #0101 NEQ2 ,&no-marker8 JCN 
			POP2 ;marker8_icn RTN &no-marker8
		DUP2 #01 AND #00 = SWP #01 AND #00 = #0101 NEQ2 ,&no-marker4 JCN 
			POP2 ;marker4_icn RTN &no-marker4
		DUP2 GET-TYPE #00 = ,&no-port JCN
			POP2 ;marker4_icn RTN &no-port
		POP2 ;font RTN
	&no-bar
	STH POP2 STHr
	#20 - #00 SWP 8** ;font ++

RTN

( operators )

@op-a ( x y char -- )

	POP ( TODO: detect capitalization )
	( get a ) DUP2 DECR GET-PORT-LEFT STH
	( get b ) DUP2 INCR GET-PORT-RIGHT STH
	( incr y ) #01 +
	( get result ) ADDr STHr 
	GET-CHAR SET-PORT-OUTPUT 

RTN

@op-b ( x y char -- )
	
	POP ( TODO: detect capitalization )
	( get a ) DUP2 DECR GET-PORT-LEFT STH
	( get b ) DUP2 INCR GET-PORT-RIGHT STH
	( incr y ) #01 +
	( get result ) SUBr STHr
	( bounce ) DUP #80 < #04 JCN [ #24 SWP - ]
	GET-CHAR SET-PORT-OUTPUT 

RTN

@op-c ( x y char -- )
	
	POP ( TODO: detect capitalization )
	( get rate ) DUP2 DECR GET-PORT-LEFT MIN1 STH
	( get mod ) DUP2 INCR GET-PORT-RIGHT MIN1 STH
	( incr y ) #01 +
	( get result ) SWPr .timer/frame LDZ2 [ ( TODO: ) TOB ] STHr / STHr MOD 
	GET-CHAR SET-PORT-OUTPUT

RTN

@op-d ( x y char -- )

	POP
	( get rate ) DUP2 DECR GET-PORT-LEFT MIN1 STH
	( get mod ) DUP2 INCR GET-PORT-RIGHT MIN1 STH
	( incr y ) #01 +
	( get result ) .timer/frame LDZ2 [ ( TODO: ) TOB ] MULr STHr MOD #00 =
	( bang if equal ) #fc * CHAR-DOT + 
	SET-PORT-OUTPUT
	
RTN

@op-e ( x y char -- )

	STH
	( hit edge ) OVR .grid/width LDZ #01 - = ;&collide JCN2
	( hit cell ) DUP2 INCR GET-CELL CHAR-DOT ! ,&collide JCN
	DUP2 #00 SET-TYPE
	DUP2 CHAR-DOT SET-CELL
	INCR DUP2 STHr SET-CELL
	#01 SET-LOCK
	RTN
	&collide CHAR-BANG SET-CELL POPr
	
RTN

@op-f ( x y char -- )

	POP
	( get a ) DUP2 DECR GET-PORT-LEFT STH
	( get b ) DUP2 INCR GET-PORT-RIGHT STH
	( incr y ) #01 +
	( get result ) EQUr STHr
	( bang if equal ) #fc * CHAR-DOT + 
	SET-PORT-OUTPUT
	
RTN

@op-g ( x y char -- )
	
	POP
	( get x ) DUP2 SWP #03 - SWP GET-PORT-LEFT STH
	( get y ) DUP2 SWP #02 - SWP GET-PORT-LEFT STH
	( get len ) DUP2 SWP #01 - SWP GET-PORT-LEFT MIN1
	#00 SWP
	&loop
		( x+i+1,y ) OVR STH OVR2 STHr ROT + #01 + SWP
		DUP2 GET-PORT-RIGHT-RAW STH
		( unstash x,y ) ROTr STHkr ROTr STHkr ROTr
		( x0+x1-1,y0+y1+1 ) ROT + STH + #01 - STHr #01 +
		STHr SET-PORT-OUTPUT
		INCR
		LTHk ;&loop JCN2
	POP2
	( clean ) POP2 POP2r

RTN

@op-h ( x y char -- )

	POP
	#01 + 
	( lock ) DUP2 #01 SET-LOCK
	( type ) PORTER-TYPE SET-TYPE 

RTN

@op-i ( x y char -- )

	POP ( TODO: detect capitalization )
	( get mod ) DUP2 INCR GET-PORT-RIGHT MIN1 STH
	( get rate ) DUP2 DECR GET-PORT-LEFT STH
	( incr y ) #01 +
	( get val ) DUP2 GET-CELL GET-VALUE STH
	( get result ) ADDr STH2r SWP MOD 
	GET-CHAR SET-PORT-OUTPUT
	
RTN

@op-j ( x y char -- )

	
	POP ( TODO: Wiring )
	( get value ) DUP2 #01 - GET-PORT-RIGHT-RAW STH
	( incr y ) #01 + 
	STHr SET-PORT-OUTPUT

RTN

@op-k ( x y char -- )

	POP
	( get len ) DUP2 DECR GET-PORT-LEFT MIN1
	#00 SWP 
	&loop
		( x+i+1,y ) OVR STH OVR2 STHr ROT + #01 + SWP
		( get variable ) DUP2 GET-PORT-RIGHT 
		DUP #00 = ,&skip JCN
			.variables + LDZ STH
			( incr y ) #01 + 
			DUP2 STHkr SET-PORT-OUTPUT
			STHr
		&skip
		POP POP2
		INCR
		LTHk ;&loop JCN2
	POP2
	POP2
	
RTN

@op-l ( x y char -- )

	POP ( TODO: detect capitalization )
	( get left ) DUP2 DECR GET-PORT-LEFT STH
	( get right ) DUP2 INCR GET-PORT-RIGHT STH
	( incr y ) #01 +
	( min ) STH2r LTHk #01 JCN SWP POP 
	GET-CHAR SET-PORT-OUTPUT
	
RTN

@op-m ( x y char -- )

	POP ( TODO: detect capitalization )
	( get left ) DUP2 DECR GET-PORT-LEFT STH
	( get right ) DUP2 INCR GET-PORT-RIGHT STH
	( incr y ) #01 +
	( get result ) MULr STHr 
	GET-CHAR SET-PORT-OUTPUT
	
RTN

@op-n ( x y char -- )
	
	STH
	( hit edge ) DUP #00 = ;&collide JCN2
	( hit cell ) DUP2 #01 - GET-CELL CHAR-DOT ! ,&collide JCN
	DUP2 #00 SET-TYPE
	DUP2 CHAR-DOT SET-CELL
	#01 - DUP2 STHr SET-CELL
	#01 SET-LOCK
	RTN
	&collide CHAR-BANG SET-CELL POPr
	
RTN

@op-o ( x y char -- )

	POP
	( get x ) DUP2 SWP #02 - SWP GET-PORT-LEFT STH
	( get y ) DUP2 SWP #01 - SWP GET-PORT-LEFT STH
	( get value ) DUP2 INCR STH2r ++ GET-PORT-RIGHT-RAW STH
	( incr y ) #01 +
	STHr SET-PORT-OUTPUT
	
RTN

@op-p ( x y char -- )

	POP
	( get key ) DUP2 SWP #02 - SWP GET-PORT-LEFT STH
	( get len ) DUP2 SWP #01 - SWP GET-PORT-LEFT MIN1 STH
	( get input ) DUP2 INCR GET-PORT-RIGHT-RAW STH
	#00 OVRr STHr
	&loop
		( x+i+1,y ) OVR STH OVR2 STHr ROT + #01 + SWP
		( lock ) DUP2 #01 SET-LOCK
		( type ) LOCKED-TYPE SET-TYPE
		INCR
		LTHk ,&loop JCN
	POP2
	( write )
	( x-offset ) ROTr ROTr STH2r MOD
	( x,y ) SWP #01 + STH + STHr
	STHr SET-PORT-OUTPUT
	
RTN

@op-q ( x y char -- )

	POP
	( get x ) DUP2 SWP #03 - SWP GET-PORT-LEFT STH
	( get y ) DUP2 SWP #02 - SWP GET-PORT-LEFT STH
	( get len ) DUP2 SWP #01 - SWP GET-PORT-LEFT MIN1
	#00 SWP
	&loop
		( x+i+1,y ) OVR STH OVR2 STHr ROT + #01 + SWP
		( x+x0,y+y0 ) STHkr + SWP OVRr STHr + SWP
		GET-PORT-RIGHT-RAW STH
		( x-i-len ) DUP2 SWP - STH 
		( x,y ) OVR2 SWP STHr - #01 + SWP #01 +
		STHr SET-PORT-OUTPUT
		INCR
		LTHk ;&loop JCN2
	POP2
	( clean ) POP2 POP2r
	
RTN

@op-r ( x y char -- )

	POP ( TODO: detect capitalization )
	( get min ) DUP2 DECR GET-PORT-LEFT STH
	( get max ) DUP2 INCR GET-PORT-RIGHT MIN1 STH
	( unstash min,max ) STH2r 
	( real max ) LTHk #01 JCN SWP
	( no equal ) NEQk #04 JCN [ #01 - SWP ] 
	( stash min,max ) STH2
	( incr y ) #01 +
	( get key ) .timer/seed LDZ2 .timer/frame LDZ2 ** SWP + 
	( key % max + min ) STH2kr SWP - MOD POPr STHr +
	GET-CHAR SET-PORT-OUTPUT
	
RTN

@op-s ( x y char -- )
	
	STH
	( hit edge ) DUP .grid/height LDZ #01 - = ;&collide JCN2
	( hit cell ) DUP2 #01 + GET-CELL CHAR-DOT ! ,&collide JCN
	DUP2 #00 SET-TYPE
	DUP2 CHAR-DOT SET-CELL
	#01 + DUP2 STHr SET-CELL
	#01 SET-LOCK
	RTN
	&collide CHAR-BANG SET-CELL POPr
	
RTN

@op-t ( x y char -- )

	POP
	( get key ) DUP2 SWP #02 - SWP GET-PORT-LEFT STH
	( get len ) DUP2 SWP #01 - SWP GET-PORT-LEFT MIN1 STH
	#00 STHkr
	&loop
		( x+i+1,y ) OVR STH OVR2 STHr ROT + #01 + SWP
		( lock ) DUP2 #01 SET-LOCK 
		( type ) LOCKED-TYPE SET-TYPE
		INCR
		LTHk ,&loop JCN
	POP2
	( read )
	( x-offset ) DUP2 INCR STH2r MOD ROT + SWP 
	( x,y ) GET-PORT-RIGHT-RAW STH #01 +
	STHr SET-PORT-OUTPUT

RTN

@op-u ( x y char -- )

	POP
	( get step ) DUP2 DECR GET-PORT-LEFT STH
	( get max ) DUP2 INCR GET-PORT-RIGHT MIN1 STH
	( incr y ) #01 +
	( frame + max - 1 ) .timer/frame LDZ2 TOB STHkr + #01 -
	( * step ) OVRr STHr *
	( % max ) STHkr MOD
	( + step ) SWPr STHr +
	( bucket >= max ) STHr < #01 !
	( bang if equal ) #fc * CHAR-DOT + 
	SET-PORT-OUTPUT
	
RTN

@op-v ( x y char -- )

	POP
	( get write ) DUP2 DECR GET-PORT-LEFT STH
	( get read ) DUP2 INCR GET-PORT-RIGHT-RAW STH
	OVRr STHr ,&write JCN
	( incr y ) #01 +
	( load ) STHr GET-VALUE .variables + LDZ SET-PORT-OUTPUT
	POPr
	RTN
	&write
	( save ) STH2r SWP .variables + STZ POP2

RTN

@op-w ( x y char -- )

	STH
	( hit edge ) OVR #00 = ;&collide JCN2
	( hit cell ) DUP2 DECR GET-CELL CHAR-DOT ! ,&collide JCN
	DUP2 #00 SET-TYPE
	DUP2 CHAR-DOT SET-CELL
	DECR DUP2 STHr SET-CELL
	#01 SET-LOCK
	RTN
	&collide CHAR-BANG SET-CELL POPr
	
RTN

@op-x ( x y char -- )

	POP
	( get value ) DUP2 INCR GET-PORT-RIGHT-RAW STH 
	( get x ) DUP2 SWP #02 - SWP GET-PORT-LEFT STH
	( get y ) DUP2 SWP #01 - SWP GET-PORT-LEFT STH
	( incr y ) STH2r #01 + ++ STHr
	SET-PORT-OUTPUT
	
RTN

@op-y ( x y char -- )

	POP ( TODO: Wiring )
	( get value ) DUP2 DECR GET-PORT-RIGHT-RAW STH
	( incr y ) INCR
	STHr SET-PORT-OUTPUT
	
RTN

@op-z ( x y char -- )

	POP ( TODO: detect capitalization )
	( get rate ) DUP2 DECR GET-PORT-LEFT MIN1 STH
	( get target ) DUP2 INCR GET-PORT-RIGHT STH
	( incr y ) #01 +
	( get val ) DUP2 GET-CELL GET-VALUE STH
	EQUkr STHr ,&end JCN 
	LTHkr STHr #00 ! ,&no-below JCN 
		( incr ) STHr OVRr STH SWPr ADDr
		( clamp ) GTHkr STHr #01 JCN SWPr
		,&end JMP
		&no-below
	GTHkr STHr #00 ! ,&no-above JCN 
		( decr ) STHr OVRr STH SWPr SUBr
		( clamp ) STH2kr LTSk #01 JCN SWPr
		&no-above
	&end
	STHr GET-CHAR SET-PORT-OUTPUT POP2r
	
RTN

@op-bang ( x y char -- )

	POP
	CHAR-DOT SET-CELL

RTN

@op-comment ( x y char -- )
	
	POP
	STH
	#01 + .grid/width LDZ
	&loop
		OVR STHkr 
		( lock )  DUP2 #01 SET-LOCK 
		( close ) DUP2 GET-CELL CHAR-HASH = ,&end JCN
		( type )  LOCKED-TYPE SET-TYPE
		INCR
		LTHk ,&loop JCN
	POP2 POPr
	RTN
	&end
	POP2 POP2 POPr

RTN

@op-play ( x y char -- )
	
	POP
	( get channel ) DUP2 [ SWP #01 + SWP ] GET-PORT-RIGHT STH 
	( get octave ) DUP2 [ SWP #02 + SWP ] GET-PORT-RIGHT [ #0c * ] STH 
	( get note ) DUP2 [ SWP #03 + SWP ] GET-PORT-RIGHT-RAW GET-NOTE STH ADDr
	( req bang ) ;get-bang JSR2 ,&is-bang JCN POP2r RTN &is-bang
	STHr .Audio0/pitch STHr #10 * + DEO

RTN

@run-char ( x y char -- )
	
	( skip dot )
	DUP CHAR-DOT NEQ ,&not-dot JCN
		POP POP2 RTN &not-dot

	( skip locked )
	ROT ROT DUP2 GET-LOCK #00 = ,&not-locked JCN
		POP POP2 RTN &not-locked
	ROT

	( lowercase )
	DUP #60 < ,&no-lc JCN
	DUP #7b > ,&no-lc JCN
		STH DUP2 ;get-bang JSR2 ,&run JCN 
		POPr POP2 RTN
		&no-lc

	( uppercase )
	DUP #40 < ,&no-uc JCN
	DUP #5a > ,&no-uc JCN
		STH DUP2 OPERATOR-TYPE SET-TYPE &run STHr 
		DUP GET-VALUE #0a - #02 * TOS ;operations ++ LDA2 JMP2
		&no-uc

	( special )
	DUP CHAR-BANG = ;op-bang JCN2
	DUP CHAR-HASH = ;op-comment JCN2
	DUP CHAR-EQUAL = ;op-play JCN2

	( unknown )
	POP2 POP

RTN

@clear ( -- )

	#00 .grid/height LDZ
	&ver
		#00 .grid/width LDZ
		&hor
			GET-ITERATORS CHAR-DOT SET-CELL
			INCR
			LTHk ,&hor JCN
		POP2
		INCR
		LTHk ,&ver JCN
	POP2

RTN

@init ( -- )
	
	#00 .grid/height LDZ
	&ver
		#00 .grid/width LDZ
		&hor
			GET-ITERATORS
			( reset lock ) DUP2 #00 SET-LOCK
			( reset type ) #00 SET-TYPE
			INCR
			LTHk ,&hor JCN
		POP2
		INCR
		LTHk ,&ver JCN
	POP2

RTN

@run ( -- )
	
	;init JSR2
	#00 .grid/height LDZ
	&ver
		#00 .grid/width LDZ
		&hor
			GET-ITERATORS
			DUP2 GET-CELL ;run-char JSR2
			INCR
			LTHk ,&hor JCN
		POP2
		INCR
		LTHk ,&ver JCN
	POP2
	;redraw JSR2

RTN

@redraw ( -- )
	
	#00 .grid/height LDZ
	&ver
		( pos-y ) OVR #00 SWP 8** [ .grid/y1 LDZ2 ++ ] .Screen/y DEO2
		#00 .grid/width LDZ
		&hor
			( pos-x ) OVR #00 SWP 8** [ .grid/x1 LDZ2 ++ ] .Screen/x DEO2
			GET-ITERATORS
			( sprite ) DUP2 ;get-cell-sprite JSR2 .Screen/addr DEO2
			( draw ) ,get-cell-type JSR TOS ;cell-styles ++ LDA .Screen/color DEO
			INCR
			LTHk ,&hor JCN
		POP2
		INCR
		LTHk ,&ver JCN
	POP2
	,draw-toolbar JSR

RTN

@get-cell-type ( x y -- type )
	
	OVR .selection/x1 LDZ < ,&end JCN
	OVR .selection/x2 LDZ > ,&end JCN
	DUP .selection/y1 LDZ < ,&end JCN
	DUP .selection/y2 LDZ > ,&end JCN
		POP2 #06 RTN 
	&end
	GET-TYPE

RTN

@draw-toolbar ( -- )
	
	.toolbar/y1 LDZ2 .Screen/y DEO2

	( Positionx )
	.grid/x1 LDZ2 STH2k .Screen/x DEO2
	.selection/x1 LDZ
		DUP #04 SFT GET-CHAR #20 - #00 SWP 8** ;font ++ .Screen/addr DEO2
	#21 .Screen/color DEO
	STH2kr #0008 ++ .Screen/x DEO2
		#0f AND GET-CHAR #20 - #00 SWP 8** ;font ++ .Screen/addr DEO2
	#21 .Screen/color DEO

	( Positiony )
	STH2kr #0010 ++ .Screen/x DEO2
	.selection/y1 LDZ
		DUP #04 SFT GET-CHAR #20 - #00 SWP 8** ;font ++ .Screen/addr DEO2
	#21 .Screen/color DEO
	STH2kr #0018 ++ .Screen/x DEO2
		#0f AND GET-CHAR #20 - #00 SWP 8** ;font ++ .Screen/addr DEO2
	#21 .Screen/color DEO
	STH2kr #0020 ++ .Screen/x DEO2
	;position_icn .Screen/addr DEO2
	#22 .Screen/color DEO

	( Frame )
	STH2kr #0030 ++ .Screen/x DEO2
	.timer/frame LDZ2 TOB
		DUP #04 SFT GET-CHAR #20 - #00 SWP 8** ;font ++ .Screen/addr DEO2
	#21 .Screen/color DEO
	STH2kr #0038 ++ .Screen/x DEO2
		#0f AND GET-CHAR #20 - #00 SWP 8** ;font ++ .Screen/addr DEO2
	#21 .Screen/color DEO
	STH2r #0040 ++ .Screen/x DEO2
	;beat_icn .Screen/addr DEO2
	#23 .timer/frame LDZ2 TOB MOD8 #00 = - .Screen/color DEO

	( File )
	.grid/x2 LDZ2 STH2k #0018 -- .Screen/x DEO2
	;load-icn .Screen/addr DEO2
	#21 .Screen/color DEO
	STH2r #0020 -- .Screen/x DEO2
	;make-icn .Screen/addr DEO2
	#21 .Screen/color DEO

	( filepath )
	#23 ;draw-filepath JSR2

RTN

@draw-meter ( -- )
	
	.toolbar/y1 LDZ2 #0001 -- .Screen/y DEO2

	( merge channels )
	.Audio0/output DEI DUP #0f AND STH #04 SFT STH
	.Audio1/output DEI DUP #0f AND STH #04 SFT STH
		ROTr ADDr ROTr ROTr ADDr SWPr
	.Audio2/output DEI DUP #0f AND STH #04 SFT STH
		ROTr ADDr ROTr ROTr ADDr SWPr
	.Audio3/output DEI DUP #0f AND STH #04 SFT STH
		ROTr ADDr ROTr ROTr ADDr SWPr

	( draw )
	#08 #00
	&loop
		.toolbar/x2 LDZ2 #0028 -- .Screen/x DEO2
		OVR OVRr STHr #04 / < .Screen/color DEO
		.toolbar/x2 LDZ2 #0026 -- .Screen/x DEO2
		OVR STHkr #04 / < .Screen/color DEO
		.Screen/y DEI2 #0001 ++ .Screen/y DEO2
		( incr ) DECR
		GTHk ,&loop JCN
	POP2

	POP2r

RTN

@draw-state ( -- )
	
	.toolbar/x2 LDZ2 #0008 -- .Screen/x DEO2
	.toolbar/y1 LDZ2 .Screen/y DEO2
	;save-icn .Screen/addr DEO2
	#21 .state/changed LDZ + .Screen/color DEO

RTN

@draw-filepath ( color -- )
	
	STH
	.toolbar/y1 LDZ2 .Screen/y DEO2
	#0068 .Screen/x DEO2
	;path/name
	&loop
		DUP2 LDA DUP #00 ! #20 * - TOS #0008 ** ;font ++ .Screen/addr DEO2 
		STHkr .Screen/color DEO
		.Screen/x DEI2 #0008 ++ .Screen/x DEO2
		#0001 ++
		LDAk #00 ! ,&loop JCN
	POP2
	POPr
	( clear last ) 
	#20 .Screen/color DEO

RTN

( file )

@new-file ( default* -- )

	;clear JSR2
	STH2
	#00 #0d
	&loop
		OVR DUP TOS STH2kr ++ LDA
		SWP .path/name + STZ
		INCR
		LTHk ,&loop JCN
	.path/length STZ POP 
	POP2r
	RESET-STATE

RTN

@load-file ( -- )

	;path/name .File/name DEO2 
	#1000 .File/length DEO2 
	DATA-FILE .File/load DEO2 
	( setup )
	( TODO: Stop at #00 instead of fixed length )
	#0000 #1000
	&loop
		( get char ) OVR2 DATA-FILE ++ LDA
		DUP CHAR-NULL = ,&end JCN
		DUP CHAR-LINE = ,&linebreak JCN
			( write  ) STH ,&x LDR ,&y LDR STHr SET-CELL
			( incr x ) ,&x LDR #01 + ,&x STR
			,&continue JMP
		&linebreak
			( undo x ) #00 ,&x STR
			( incr y ) ,&y LDR #01 + ,&y STR
			POP
		&continue
		( incr ) SWP2 #0001 ++ SWP2
		LTH2k ,&loop JCN
	&end
	POP2 POP2 POP
	#00 ,&x STR
	#00 ,&y STR
	RESET-STATE
	RTN
	&x $1
	&y $1

RTN

@save-file ( -- )
	
	( stash length ) #0000 STH2
	( setup )
	#00 .grid/height LDZ
	&ver
		#00 .grid/width LDZ
		&hor
			( write char ) GET-ITERATORS GET-CELL [ STH2kr DATA-FILE ++ ] STA
			( incr index ) #0001 STH2 ADD2r
			INCR
			LTHk ,&hor JCN
		POP2
		( write linebreak ) CHAR-LINE [ STH2kr DATA-FILE ++ ] STA
		( incr index ) #0001 STH2 ADD2r
		INCR
		LTHk ,&ver JCN
	POP2
	;path/name .File/name DEO2 
	STH2r .File/length DEO2 
	DATA-FILE .File/save DEO2 
	RESET-STATE

RTN

( clip )

@copy-block ( -- )
	
	( stash length ) #0000 STH2
	.selection/y1 LDZ .selection/y2 LDZ #01 +
	&ver
		.selection/x1 LDZ .selection/x2 LDZ #01 +
		&hor
			( write char ) GET-ITERATORS GET-CELL [ STH2kr DATA-CLIP ++ ] STA
			( incr index ) #0001 STH2 ADD2r
			INCR
			LTHk ,&hor JCN
		POP2
		( write linebreak ) CHAR-LINE [ STH2kr DATA-CLIP ++ ] STA
		( incr index ) #0001 STH2 ADD2r
		INCR
		LTHk ,&ver JCN
	POP2
	( close ) #00 [ STH2r DATA-CLIP ++ ] STA

RTN

@paste-block ( -- )
	
	#0000 #1000
	&loop
		( get char ) OVR2 DATA-CLIP ++ LDA
		DUP CHAR-NULL = ,&end JCN
		DUP CHAR-LINE = ,&linebreak JCN
			( write  ) STH ,&x LDR [ .selection/x1 LDZ + ] ,&y LDR [ .selection/y1 LDZ + ] STHr SET-CELL
			( incr x ) ,&x LDR #01 + ,&x STR
			,&continue JMP
		&linebreak
			( undo x ) #00 ,&x STR
			( incr y ) ,&y LDR #01 + ,&y STR
			POP
		&continue
		( incr ) SWP2 #0001 ++ SWP2
		LTH2k ,&loop JCN
	&end
	POP2 POP2 POP
	#00 ,&x STR
	#00 ,&y STR
	RTN
	&x $1
	&y $1

RTN

@fill-block ( char -- )
	
	STH
	.selection/y1 LDZ .selection/y2 LDZ #01 +
	&ver
		.selection/x1 LDZ .selection/x2 LDZ #01 +
		&hor
			( write char ) GET-ITERATORS STHkr SET-CELL
			INCR
			LTHk ,&hor JCN
		POP2
		INCR
		LTHk ,&ver JCN
	POP2
	POPr

RTN

@clamp-selection ( -- )
	
	.selection/x2 LDZ .grid/width LDZ #01 - STHk < ,&ok-x JCN
		STHkr .selection/x2 STZ &ok-x POPr
	.selection/y2 LDZ .grid/height LDZ #01 - STHk < ,&ok-y JCN
		STHkr .selection/y2 STZ &ok-y POPr
	.selection/x2 LDZ .selection/x1 LDZ STHk > ,&ok-flipx JCN
		STHkr .selection/x2 STZ &ok-flipx POPr
	.selection/y2 LDZ .selection/y1 LDZ STHk > ,&ok-flipy JCN
		STHkr .selection/y2 STZ &ok-flipy POPr

RTN

@within-rect ( x* y* rect -- flag )
	
	STH
	( y < rect.y1 ) DUP2 STHkr #02 + LDZ2 << ,&skip JCN
	( y > rect.y2 ) DUP2 STHkr #06 + LDZ2 >> ,&skip JCN
	SWP2
	( x < rect.x1 ) DUP2 STHkr LDZ2 << ,&skip JCN
	( x > rect.x2 ) DUP2 STHkr #04 + LDZ2 >> ,&skip JCN
	POP2 POP2 POPr
	#01 
RTN
	&skip
	POP2 POP2 POPr
	#00

RTN

@uc-notes
	09 0b 00 02 04 05 07 09
	0b 0c 0e 10 11 13 15 17
	18 1a 1c 1d 1f 21 23 24
	26 28

@lc-notes
	0a 0c 01 03 05 06 08 0a
	0c 0d 0f 11 12 14 16 18
	19 1b 1d 1e 20 22 24 25
	27 29

@values ( char to b36 )
	00 00 00 00 00 00 00 00
	00 00 00 00 00 00 00 00
	00 01 02 03 04 05 06 07
	08 09 00 00 00 00 00 00
	00 0a 0b 0c 0d 0e 0f 10
	11 12 13 14 15 16 17 18
	19 1a 1b 1c 1d 1e 1f 20
	21 22 23 00 00 00 00 00
	00 0a 0b 0c 0d 0e 0f 10
	11 12 13 14 15 16 17 18
	19 1a 1b 1c 1d 1e 1f 20
	21 22 23 00 00 00 00 00

@b36clc ( b36 to char-lc )
	30 31 32 33 34 35 36 37
	38 39 61 62 63 64 65 66
	67 68 69 6a 6b 6c 6d 6e
	6f 70 71 72 73 74 75 76
	77 78 79 7a

@cell-styles
	23 ( 0 normal )
	23 ( 1 locked )
	21 ( 2 port-unlocked )
	24 ( 3 operator )
	22 ( 4 port-locked )
	28 ( 5 port-output )
	29 ( 6 selected )
	
@operations
	:op-a :op-b :op-c :op-d :op-e :op-f :op-g :op-h
	:op-i :op-j :op-k :op-l :op-m :op-n :op-o :op-p
	:op-q :op-r :op-s :op-t :op-u :op-v :op-w :op-x
	:op-y :op-z

@untitled-txt  "untitled.orca $1

@cursor_icn     80c0 e0f0 f8e0 1000
@blank_icn      0000 0000 0000 0000
@position_icn   0066 4200 0042 6600
@beat_icn       0000 1038 7c38 1000
@marker8_icn    0000 2400 0024 0000
@marker4_icn    0000 0000 0000 1000

@save-icn      1054 28c6 2854 1000 
@make-icn      fe82 8282 848a f400 
@load-icn      feaa d6aa d4aa f400 

@eye_icns
	0038 4492 2810 0000 ( open )
	0000 0082 4438 0000 ( closed )

@font ( specter8-frag font )
	0000 0000 0000 0000 0008 0808 0800 0800
	0014 1400 0000 0000 0024 7e24 247e 2400
	0008 1e28 1c0a 3c08 0000 2204 0810 2200
	0030 4832 4c44 3a00 0008 1000 0000 0000
	0004 0808 0808 0400 0020 1010 1010 2000
	005a 2442 4224 5a00 0000 0808 3e08 0800
	0000 0000 0000 0810 0000 0000 3e00 0000
	0000 0000 0000 0800 0000 0204 0810 2000
&numbers
	0000 3c42 4242 3c00
	0000 3010 1010 1000
	0000 7c02 3c40 7e00
	0000 7c02 7c02 7c00
	0000 1222 427e 0200
	0000 7e40 3c02 7e00
	0000 3e40 7c42 3c00
	0000 7e02 0408 1000
	0000 7e42 3c42 7e00
	0000 7e42 3e02 0200
	( -- )
	0000 0010 0000 1000 
	0000 1000 0010 1020
	0000 0810 2010 0800 
	0000 003e 003e 0000
	0000 1008 0408 1000 
	003c 420c 1000 1000
	003c 4232 4a42 3c00 
&uc
	0000 3c42 7e42 4200
	0000 7c42 7c42 7c00
	0000 3e40 4040 3e00
	0000 7c42 4242 7c00
	0000 7e40 7e40 7e00
	0000 7e40 7040 4000
	0000 3e40 5c42 3e00
	0000 4242 7e42 4200
	0000 1010 1010 1000
	0000 7e02 0242 3c00
	0000 4648 7048 4600
	0000 4040 4040 7e00
	0000 6e52 5252 5200
	0000 6252 4a46 4200
	0000 3c42 4242 3c00
	0000 7e42 7c40 4000
	0000 3c42 4a44 3a00
	0000 7e42 7c42 4200
	0000 3e40 7e02 7c00
	0000 7e10 1010 1000
	0000 4242 4242 3c00
	0000 4242 4224 1800
	0000 5252 5252 6e00
	0000 4224 1824 4200
	0000 4224 1010 1000
	0000 7e02 3c40 7e00
	( ? )
	000c 0808 0808 0c00
	0040 2010 0804 0200 
	0030 1010 1010 3000
	0008 1400 0000 0000 
	0000 0000 0000 7e00
	0008 0400 0000 0000 
&lc
	0000 7c02 3e42 7a00
	0000 4040 7c42 7c00
	0000 003e 4040 3e00
	0000 0202 3e42 3e00
	0000 3c42 7c40 3e00
	0000 3c42 7040 4000
	0000 3e42 3e02 7c00
	0000 4040 7c42 4200
	0000 1000 1010 1000
	0000 7e04 0444 3800
	0000 4244 7844 4200
	0000 4040 4040 3e00
	0000 6c52 5252 5200
	0000 5c62 4242 4200
	0000 1c22 4244 3800
	0000 7c42 7c40 4000
	0000 3e42 3e02 0200
	0000 5c62 4040 4000
	0000 3e40 3c02 7c00
	0000 7e10 1010 0800
	0000 4242 4246 3a00
	0000 4242 2424 1800
	0000 4242 5252 6c00
	0000 4242 3c42 4200
	0000 4242 3e02 7c00
	0000 7e04 1820 7e00 

	000c 0810 1008 0c00
	0008 0808 0808 0800 
	0030 1008 0810 3000
	0000 0032 4c00 0000 
	3c42 99a1 a199 423c

@tri-pcm
	8082 8486 888a 8c8e 9092 9496 989a 9c9e
	a0a2 a4a6 a8aa acae b0b2 b4b6 b8ba bcbe
	c0c2 c4c6 c8ca ccce d0d2 d4d6 d8da dcde
	e0e2 e4e6 e8ea ecee f0f2 f4f6 f8fa fcfe
	fffd fbf9 f7f5 f3f1 efed ebe9 e7e5 e3e1
	dfdd dbd9 d7d5 d3d1 cfcd cbc9 c7c5 c3c1
	bfbd bbb9 b7b5 b3b1 afad aba9 a7a5 a3a1
	9f9d 9b99 9795 9391 8f8d 8b89 8785 8381
	7f7d 7b79 7775 7371 6f6d 6b69 6765 6361
	5f5d 5b59 5755 5351 4f4d 4b49 4745 4341
	3f3d 3b39 3735 3331 2f2d 2b29 2725 2321
	1f1d 1b19 1715 1311 0f0d 0b09 0705 0301
	0103 0507 090b 0d0f 1113 1517 191b 1d1f
	2123 2527 292b 2d2f 3133 3537 393b 3d3f
	4143 4547 494b 4d4f 5153 5557 595b 5d5f
	6163 6567 696b 6d6f 7173 7577 797b 7d7f

@sin-pcm
	8083 8689 8c8f 9295 989b 9ea1 a4a7 aaad
	b0b3 b6b9 bbbe c1c3 c6c9 cbce d0d2 d5d7
	d9db dee0 e2e4 e6e7 e9eb ecee f0f1 f2f4
	f5f6 f7f8 f9fa fbfb fcfd fdfe fefe fefe
	fffe fefe fefe fdfd fcfb fbfa f9f8 f7f6
	f5f4 f2f1 f0ee eceb e9e7 e6e4 e2e0 dedb
	d9d7 d5d2 d0ce cbc9 c6c3 c1be bbb9 b6b3
	b0ad aaa7 a4a1 9e9b 9895 928f 8c89 8683
	807d 7a77 7471 6e6b 6865 625f 5c59 5653
	504d 4a47 4542 3f3d 3a37 3532 302e 2b29
	2725 2220 1e1c 1a19 1715 1412 100f 0e0c
	0b0a 0908 0706 0505 0403 0302 0202 0202
	0102 0202 0202 0303 0405 0506 0708 090a
	0b0c 0e0f 1012 1415 1719 1a1c 1e20 2225
	2729 2b2e 3032 3537 3a3d 3f42 4547 4a4d
	5053 5659 5c5f 6265 686b 6e71 7477 7a7d