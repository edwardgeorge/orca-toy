( Orca
	
	space - toggle play/paste
	backspace/delete - erase
	escape - deselect
	arrow - move
	shift+arrow - scale selection
	ctrl+, - speed down
	ctrl+. - speed up
	ctrl+arrow - drag selection
	ctrl+n - new
	ctrl+s - save
	ctrl+r - rename
	ctrl+o - open
	ctrl+c - copy
	ctrl+v - paste
	ctrl+x - cut

	TODO
		- Catch ports that overflow out of grid
		- Insert mode
		- Display on-screen guide
		- Leap move with alt modifier
		- Hide cursor when moving with arrows )

%+  { ADD } %-   { SUB }  %*  { MUL }  %/  { DIV }
%<  { LTH } %>   { GTH }  %=  { EQU }  %!  { NEQ }
%++ { ADD2 } %-- { SUB2 } %** { MUL2 } %// { DIV2 }
%<< { LTH2 } %>> { GTH2 } %== { EQU2 } %!! { NEQ2 }

%8** { #30 SFT2 }       %8// { #03 SFT2 }
%TOB  { SWP POP }       %TOS  { #00 SWP }
%INCR { SWP #01 + SWP } %DECR { SWP #01 - SWP }

%DEBUG  { ;print-hex JSR2 #0a .Console/write DEO }
%DEBUG2 { SWP ;print-hex JSR2 ;print-hex JSR2 #0a .Console/write DEO }

%RTN  { JMP2r }
%MOD  { DUP2 / * - } 
%MOD2 { OVR2 OVR2 // ** -- } 
%MOD8 { #07 AND }
%MIN1 { DUP #00 = + }
%LTSk { #80 + SWP #80 + > }

%TOGGLE { DUP LDZ #00 = SWP STZ }
%GET-ITERATORS { SWP2k POP SWP POP }

%LOCKED-TYPE   { #01 } %PORTEL-TYPE   { #02 }
%OPERATOR-TYPE { #03 } %PORTER-TYPE   { #04 }
%OUTPUT-TYPE   { #05 } %IO-TYPE       { #07 }

%DATA-CELLS { #b000 }
%DATA-LOCKS { #c000 }
%DATA-TYPES { #d000 }
%DATA-FILE { #e000 } ( file transfer )
%DATA-CLIP { #f000 } ( copy/paste )

%CHAR-NULL  { #00 } %CHAR-LINE  { #0a }
%CHAR-HASH  { #23 } %CHAR-BANG  { #2a }
%CHAR-DOT   { #2e } %CHAR-SLASH { #2f }  
%CHAR-COLON { #3a } %CHAR-EQUAL { #3d }

%IS-CHAR-KEY { STHk #20 > STHr #7b < #0101 == }
%CIUC { STHk #40 > STHr #5b < #0101 == } ( char -- flag )

%GET-CASE { GET-CELL CIUC STH } ( x y -- uc )
%SET-CASE { DUP #60 > STHr #20 * * - } ( char uc -- char )

%SET-STATE   { #01 .state/changed STZ ;draw-state JSR2 }
%RESET-STATE { #00 .state/changed STZ ;draw-state JSR2 }
%RESET-SELECTION { .selection/x1 LDZ .selection/x2 STZ .selection/y1 LDZ .selection/y2 STZ }
%RESET-INSERT { #00 .selection/insert STZ }

%GET-INDEX { #00 SWP #00 .grid/width LDZ ** ROT #00 SWP ++ } ( x y -- index )
%GET-CHAR  { #24 MOD #00 SWP ;b36clc ++ LDA } ( b36 -- char )
%GET-VALUE { #20 - #00 SWP ;values ++ LDA } ( char -- b36 )
%GET-NOTE  { DUP GET-VALUE SWP CIUC #24 * + TOS ;lc-notes ++ LDA } ( char -- midi )
%GET-CHAR-ADDR { #20 - TOS #0010 ** ;page437 ++ }

%GET-CELL  { GET-INDEX DATA-CELLS ++ LDA } ( x y -- char )
%SET-CELL  { ROT ROT GET-INDEX DATA-CELLS ++ STA } ( x y char -- )
%GET-TYPE  { GET-INDEX DATA-TYPES ++ LDA } ( x y -- type )
%SET-TYPE  { ROT ROT GET-INDEX DATA-TYPES ++ STA } ( x y type -- )
%GET-LOCK  { GET-INDEX DATA-LOCKS ++ LDA } ( x y -- type )
%SET-LOCK  { ROT ROT GET-INDEX DATA-LOCKS ++ STA } ( x y type -- )
%GET-PORT-LEFT  { DUP2 PORTEL-TYPE SET-TYPE GET-CELL GET-VALUE } ( x y -- char )
%GET-PORT-RIGHT { DUP2 PORTER-TYPE SET-TYPE DUP2 #01 SET-LOCK GET-CELL GET-VALUE } ( x y -- char )
%GET-PORT-RIGHT-RAW { DUP2 PORTER-TYPE SET-TYPE DUP2 #01 SET-LOCK GET-CELL } ( x y -- char )
%SET-PORT-OUTPUT { STH DUP2 OUTPUT-TYPE SET-TYPE DUP2 #01 SET-LOCK STHr SET-CELL } ( x y char -- )

( devices )

|00 @System     &vector $2 &pad      $6 &r      $2 &g     $2 &b      $2 
|10 @Console    &vector $2 &read     $1 &pad    $5 &write $1 
|20 @Screen     &vector $2 &width    $2 &height $2 &pad   $2 &x      $2 &y      $2 &addr  $2 &color  $1 
|30 @Audio0     &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr  $2 &volume $1 &pitch $1 
|40 @Audio1     &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr  $2 &volume $1 &pitch $1 
|50 @Audio2     &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr  $2 &volume $1 &pitch $1 
|60 @Audio3     &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr  $2 &volume $1 &pitch $1 
|70 @Midi       &vector $2 &rchan    $1 &rnote  $1 &rvelo $1 &pad    $3 &wchan  $1 &wnote $1 &wvelo  $1
|80 @Controller &vector $2 &button   $1 &key    $1 
|90 @Mouse      &vector $2 &x        $2 &y      $2 &state $1 &chord  $1 
|a0 @File       &vector $2 &success  $2 &offset $2 &pad   $2 &name   $2 &length $2 &load $2 &save $2 
|b0 @DateTime   &year   $2 &month    $1 &day    $1 &hour  $1 &minute $1 &second $1 &dotw $1 &doty $2 &isdst $1 

( variables )

|0000

@state
	&timer $1
	&trap $1
	&blink $1
	&changed $1
@timer
	&beat $1 
	&alive $1 
	&speed $1
	&frame $2 
	&seed $2
@path 
	&length $1
	&name $20
@grid
	&x1 $2
	&y1 $2
	&x2 $2
	&y2 $2
	&width $1 
	&height $1
@toolbar
	&x1 $2
	&y1 $2
	&x2 $2
	&y2 $2
@selection 
	&x1 $1 &y1 $1 
	&x2 $1 &y2 $1 
	&insert $1
@cursor
	&x $2 &y $2 &last $1
@variables
	$36

|0100

	( theme ) 
	#0f35 .System/r DEO2 
	#0fc5 .System/g DEO2 
	#0f95 .System/b DEO2

	( synths )
	#dd .Audio0/volume DEO  #0118 .Audio0/adsr DEO2 #0100 .Audio0/length DEO2
	#ce .Audio1/volume DEO  #0334 .Audio1/adsr DEO2 #0100 .Audio1/length DEO2
	#ec .Audio2/volume DEO  #0414 .Audio2/adsr DEO2 #0100 .Audio2/length DEO2
	#dd .Audio3/volume DEO  #022c .Audio3/adsr DEO2 #0100 .Audio3/length DEO2

	;sin-pcm .Audio0/addr DEO2
	;tri-pcm .Audio1/addr DEO2
	;sin-pcm .Audio2/addr DEO2
	;tri-pcm .Audio3/addr DEO2

	( vectors ) 
	;on-button .Controller/vector DEO2
	;on-mouse .Mouse/vector DEO2
	;on-frame .Screen/vector DEO2

	( set grid size )
	.Screen/width DEI2 
		DUP2 8// SWP POP #03 - .grid/width STZ
		DUP2 #0002 // .grid/width LDZ #02 / #01 + TOS 8** -- #0004 ++ .grid/x1 STZ2
		#0002 // .grid/width LDZ #02 / TOS 8** ++ #0002 ++ .grid/x2 STZ2
	.Screen/height DEI2 
		DUP2 #0010 // SWP POP #03 - .grid/height STZ
		DUP2 #0002 // .grid/height LDZ #02 / #01 + TOS #0010 ** -- #0004 -- .grid/y1 STZ2
		#0002 // .grid/height LDZ #02 / TOS #0010 ** ++ #0008 -- .grid/y2 STZ2

	( adjust for small sizes )
	.Screen/width DEI2 #0100 >> ,&hor-skip JCN
		#0000 .grid/x1 STZ2
		.Screen/width DEI2 DUP2 .grid/x2 STZ2 8// TOB .grid/width STZ
		&hor-skip
	.Screen/height DEI2 #0080 >> ,&ver-skip JCN
		#0000 .grid/y1 STZ2
		.Screen/height DEI2 DUP2 .grid/y2 STZ2 8// TOB .grid/height STZ
		&ver-skip

	( set toolbar size )
	.grid/x1 LDZ2 .toolbar/x1 STZ2
	.grid/y2 LDZ2 #0010 ++ .toolbar/y1 STZ2
	.grid/x2 LDZ2 .toolbar/x2 STZ2
	.toolbar/y1 LDZ2 #0008 ++ .toolbar/y2 STZ2

	( random seed )
	.DateTime/second DEI .DateTime/minute DEI DUP2
		.DateTime/hour DEI .DateTime/day DEI ++ ++
		#1317 **
		.timer/seed STZ2

	( blank variables )
	#00 #24
	&var
		OVR .variables + CHAR-DOT SWP STZ
		INCR
		LTHk ,&var JCN
	POP2

	;untitled-txt ;new-file JSR2

	( start )
	;clear JSR2
	;init JSR2
	#08 .timer/speed STZ
	#01 .timer/alive STZ

	;redraw JSR2

BRK

@on-frame ( -> )
	
	.state/trap LDZ ;on-frame-trap JCN2

	( paused ) .timer/alive LDZ #01 JCN [ BRK ]

	;draw-meter JSR2

	.timer/beat LDZ #01 + DUP .timer/beat STZ

	( skip ) .timer/speed LDZ = #01 JCN [ BRK ]

	.timer/frame LDZ2 #0001 ++ .timer/frame STZ2

	;run JSR2

	#00 .timer/beat STZ

BRK

@on-frame-trap ( -> )
	
	.state/trap LDZ #00 ! #01 JCN [ RTN ]

	( incr ) .state/timer LDZ #01 + DUP .state/timer STZ 

	#08 ! ,&no-toggle JCN
		.state/blink TOGGLE
		#23 .state/blink LDZ #09 * + ;draw-filepath JSR2
		#00 .state/timer STZ 
		&no-toggle

BRK

@on-button ( -> )
	
	.Controller/key DEI #00 ! .state/trap LDZ #0101 == ;on-button-trap JCN2

	( arrows )
	.Controller/button DEI DUP #f0 AND ;&arrows JCN2 POP
	.Controller/button DEI DUP #0f AND #01 = ;&control JCN2 POP

	( default )
	.Controller/key DEI
	DUP #20 ! ,&no-space JCN
		.timer/alive TOGGLE
		.selection/insert LDZ #00 = ,&no-space-insert JCN
			.timer/alive TOGGLE
			#01 #00 #00 ;edit-selection JSR2 
			&no-space-insert
		;redraw JSR2 POP BRK 
		&no-space
	DUP #08 ! OVR #7f ! #0101 == ,&no-backspace JCN
		CHAR-DOT ;fill-selection JSR2 
		.selection/insert LDZ #00 = ,&no-backspace-insert JCN
			#ff #00 #00 ;edit-selection JSR2 
			&no-backspace-insert
		SET-STATE 
		;redraw JSR2 POP BRK 
		&no-backspace
	DUP #1b ! ,&no-escape JCN
		RESET-SELECTION 
		RESET-INSERT
		;redraw JSR2 POP BRK 
		&no-escape
	DUP IS-CHAR-KEY #00 = ,&no-key JCN
		.selection/x1 LDZ .selection/y1 LDZ .Controller/key DEI SET-CELL
		.selection/insert LDZ #00 = ,&no-key-insert JCN
			#01 #00 #00 ;edit-selection JSR2 
			&no-key-insert
		SET-STATE 
		;redraw JSR2 POP BRK 
		&no-key
	POP BRK

	&control ( button -- )
		POP 
		.Controller/key DEI
		DUP #61 ! ,&no-expand JCN
			#00 .selection/x1 STZ
			#00 .selection/y1 STZ
			.grid/width LDZ .selection/x2 STZ
			.grid/height LDZ .selection/y2 STZ
			;redraw JSR2 POP BRK 
			&no-expand
		DUP #63 ! ,&no-copy JCN
			;copy-selection JSR2 
			;redraw JSR2 POP BRK 
			&no-copy
		DUP #76 ! ,&no-paste JCN
			;paste-selection JSR2 RESET-SELECTION
			;redraw JSR2 POP BRK 
			&no-paste
		DUP #78 ! ,&no-cut JCN
			;copy-selection JSR2 CHAR-DOT ;fill-selection JSR2 RESET-SELECTION
			;redraw JSR2 POP BRK 
			&no-cut
		DUP #6f ! ,&no-open JCN
			;load-file JSR2
			;redraw JSR2 POP BRK 
			&no-open
		DUP #72 ! ,&no-name JCN
			.state/trap TOGGLE
			#00 .state/blink STZ 
			#23 ;draw-filepath JSR2 POP BRK 
			&no-name
		DUP #73 ! ,&no-save JCN
			;save-file JSR2 
			;redraw JSR2 POP BRK  
			&no-save
		DUP #6e ! ,&no-make JCN
			#20 ;draw-filepath JSR2 ;untitled-txt ;new-file JSR2 
			;redraw JSR2 POP BRK 
			&no-make
		DUP #2c ! ,&no-slow JCN
			( clamp ) .timer/speed LDZ #03 < ,&no-slow JCN
			.timer/speed LDZ #01 - .timer/speed STZ
			#00 .timer/beat STZ
			;redraw JSR2 POP BRK
			&no-slow
		DUP #2e ! ,&no-fast JCN
			( clamp ) .timer/speed LDZ #15 > ,&no-fast JCN
			.timer/speed LDZ #01 + .timer/speed STZ
			#00 .timer/beat STZ
			;redraw JSR2 POP BRK
			&no-fast
		DUP #69 ! ,&no-insert JCN
			.selection/insert TOGGLE
			;redraw JSR2 POP BRK
			&no-insert
		POP 
	BRK

	&arrows ( button -> )
		DUP #f0 AND #10 ! ,&no-up JCN    [ #00ff ROT ,&move JMP ] &no-up
		DUP #f0 AND #20 ! ,&no-down JCN  [ #0001 ROT ,&move JMP ] &no-down
		DUP #f0 AND #40 ! ,&no-left JCN  [ #ff00 ROT ,&move JMP ] &no-left
		DUP #f0 AND #80 ! ,&no-right JCN [ #0100 ROT ,&move JMP ] &no-right
		POP BRK
		&move 
		;edit-selection JSR2 
		;redraw JSR2 
	BRK

BRK

@on-button-trap ( -> )

	( enter )
	.Controller/key DEI #0d ! ,&no-edit-enter JCN
		#00 .state/trap STZ
		#23 ;draw-filepath JSR2
		BRK
		&no-edit-enter
	( backspace )
	.Controller/key DEI #08 ! ,&no-edit-backspace JCN
		.path/length LDZ #00 = ,&edit-end JCN
		#20 ;draw-filepath JSR2
		.path/length LDZ #01 - .path/length STZ
		#00 .path/name .path/length LDZ + STZ
		#23 ;draw-filepath JSR2
		BRK
		&no-edit-backspace
	( default )
	.path/length LDZ #1f = ,&edit-end JCN
		.Controller/key DEI .path/name .path/length LDZ + STZ
		.path/length LDZ #01 + .path/length STZ
		&edit-end
	#00 .path/name .path/length LDZ + STZ

BRK

@on-mouse ( -> )
	
	( clear last cursor )
	.cursor/x LDZ2 .Screen/x DEO2
	.cursor/y LDZ2 .Screen/y DEO2
	#30 .Screen/color DEO

	( draw new cursor )
	.Mouse/x DEI2 DUP2 .cursor/x STZ2 .Screen/x DEO2
	.Mouse/y DEI2 DUP2 .cursor/y STZ2 .Screen/y DEO2
	;cursor-icn .Screen/addr DEO2
	.Mouse/state DEI #00 ! #02 * [ #31 + .Screen/color DEO ]

	( route )
	.Mouse/y DEI2 .toolbar/y1 LDZ2 -- #0010 // #0000 == 
		;on-mouse-toolbar JCN2
	.Mouse/x DEI2 .Mouse/y DEI2 .grid ;within-rect JSR2
		;on-mouse-grid JCN2

	( release-record ) #00 DUP .Mouse/state DEO .cursor/last STZ
	
BRK

@on-mouse-grid ( -> )
	
	.Mouse/state DEI DUP .cursor/last LDZ 
		DUP2 #0000 == ,&end JCN
		DUP2 #0100 !! ,&no-down JCN
			.Mouse/x DEI2 .grid/x1 LDZ2 -- 8// TOB 
				DUP .selection/x1 STZ .selection/x2 STZ
			.Mouse/y DEI2 .grid/y1 LDZ2 -- #0010 // TOB 
				DUP .selection/y1 STZ .selection/y2 STZ
			;clamp-selection JSR2 ;redraw JSR2
			,&end JMP 
			&no-down
		( release )
		.Mouse/x DEI2 .grid/x1 LDZ2 -- 8// TOB .selection/x2 STZ
		.Mouse/y DEI2 .grid/y1 LDZ2 -- #0010 // TOB .selection/y2 STZ
		;clamp-selection JSR2 ;redraw JSR2
	&end
	POP2
	.cursor/last STZ

BRK

@on-mouse-toolbar ( -> )
	
	( skip ) .Mouse/state DEI #00 ! #01 JCN [ BRK ]

	( left-side )
	.Mouse/x DEI2 .grid/x1 LDZ2 -- 8// TOB 

	DUP #04 ! ,&no-insert JCN
		.selection/insert TOGGLE
		;redraw JSR2 
		&no-insert
	DUP #08 ! ,&no-pause JCN
		.timer/alive TOGGLE
		;redraw JSR2 
		&no-pause 
	DUP #0e > OVR .grid/width LDZ SWP - #05 > #0101 !! ,&no-rename JCN
		.state/trap TOGGLE
		#00 .state/blink STZ 
		#23 ;draw-filepath JSR2 
		&no-rename
	POP

	( right-side )
	.grid/x2 LDZ2 .Mouse/x DEI2 -- 8// TOB 
	DUP #00 ! ,&no-save JCN
		;save-file JSR2 
		&no-save
	DUP #02 ! ,&no-load JCN
		;load-file JSR2
		;redraw JSR2 
		&no-load
	DUP #03 ! ,&no-name JCN
		#20 ;draw-filepath JSR2
		;untitled-txt ;new-file JSR2
		;redraw JSR2 
		&no-name
	POP

	( release ) #00 .Mouse/state DEO

BRK

( operations )

@get-bang ( x y -- bang )

	DUP2 #01 + GET-CELL CHAR-BANG = ,&bang JCN
	DUP2 #01 - GET-CELL CHAR-BANG = ,&bang JCN
	DUP2 INCR  GET-CELL CHAR-BANG = ,&bang JCN
	DUP2 DECR  GET-CELL CHAR-BANG = ,&bang JCN
	POP2 #00 RTN
	&bang
		POP2 #01 

RTN

@get-cell-sprite ( x y -- addr* )
	
	DUP2 GET-CELL
	( if character is dot )
	DUP CHAR-DOT NEQ ,&no-bar JCN
		( check if x,y is grid )
		POP
		DUP2 #01 AND #00 = SWP #03 AND #00 = #0101 NEQ2 ,&no-marker4 JCN 
			POP2 ;page437/marker RTN 
			&no-marker4
		DUP2 GET-TYPE #00 = ,&no-port JCN
			POP2 ;page437/marker RTN 
			&no-port
		POP2 ;page437 RTN
	&no-bar
	STH POP2 STHr
	GET-CHAR-ADDR

RTN

( operators )

@op-a ( x y char -- )

	POP
	( get case ) DUP2 INCR GET-CASE
	( get a ) DUP2 DECR GET-PORT-LEFT STH
	( get b ) DUP2 INCR GET-PORT-RIGHT STH
	( incr y ) #01 +
	( get result ) ADDr STHr 
	GET-CHAR SET-CASE SET-PORT-OUTPUT 

RTN

@op-b ( x y char -- )
	
	POP
	( get case ) DUP2 INCR GET-CASE
	( get a ) DUP2 DECR GET-PORT-LEFT STH
	( get b ) DUP2 INCR GET-PORT-RIGHT STH
	( incr y ) #01 +
	( get result ) SUBr STHr
	( bounce ) DUP #80 < #04 JCN [ #24 SWP - ]
	GET-CHAR SET-CASE SET-PORT-OUTPUT 

RTN

@op-c ( x y char -- )
	
	POP
	( get case ) DUP2 INCR GET-CASE
	( get rate ) DUP2 DECR GET-PORT-LEFT MIN1 STH
	( get mod ) DUP2 INCR GET-PORT-RIGHT MIN1 STH
	( incr y ) #01 +
	( get result ) SWPr .timer/frame LDZ2 STHr TOS // STHr TOS MOD2 TOB
	GET-CHAR SET-CASE SET-PORT-OUTPUT

RTN

@op-d ( x y char -- )

	POP
	( get rate ) DUP2 DECR GET-PORT-LEFT MIN1 STH
	( get mod ) DUP2 INCR GET-PORT-RIGHT MIN1 STH
	( incr y ) #01 +
	( get result ) .timer/frame LDZ2 MULr STHr TOS MOD2 #0000 ==
	( bang if equal ) #fc * CHAR-DOT + 
	SET-PORT-OUTPUT
	
RTN

@op-e ( x y char -- )

	STH
	( hit edge ) OVR .grid/width LDZ #01 - = ;&collide JCN2
	( hit cell ) DUP2 INCR GET-CELL CHAR-DOT ! ,&collide JCN
	DUP2 #00 SET-TYPE
	DUP2 CHAR-DOT SET-CELL
	INCR DUP2 STHr SET-CELL
	#01 SET-LOCK
	RTN
	&collide CHAR-BANG SET-CELL POPr
	
RTN

@op-f ( x y char -- )

	POP
	( get a ) DUP2 DECR GET-PORT-LEFT STH
	( get b ) DUP2 INCR GET-PORT-RIGHT STH
	( incr y ) #01 +
	( get result ) EQUr STHr
	( bang if equal ) #fc * CHAR-DOT + 
	SET-PORT-OUTPUT
	
RTN

@op-g ( x y char -- )
	
	POP
	( get x ) DUP2 SWP #03 - SWP GET-PORT-LEFT STH
	( get y ) DUP2 SWP #02 - SWP GET-PORT-LEFT STH
	( get len ) DUP2 SWP #01 - SWP GET-PORT-LEFT MIN1
	#00 SWP
	&loop
		( x+i+1,y ) OVR STH OVR2 STHr ROT + #01 + SWP
		DUP2 GET-PORT-RIGHT-RAW STH
		( unstash x,y ) ROTr STHkr ROTr STHkr ROTr
		( x0+x1-1,y0+y1+1 ) ROT + STH + #01 - STHr #01 +
		STHr SET-PORT-OUTPUT
		INCR
		LTHk ;&loop JCN2
	POP2
	( clean ) POP2 POP2r

RTN

@op-h ( x y char -- )

	POP
	#01 + 
	( lock ) DUP2 #01 SET-LOCK
	( type ) PORTER-TYPE SET-TYPE 

RTN

@op-i ( x y char -- )

	POP
	( get case ) DUP2 INCR GET-CASE
	( get mod ) DUP2 INCR GET-PORT-RIGHT MIN1 STH
	( get rate ) DUP2 DECR GET-PORT-LEFT STH
	( incr y ) #01 +
	( get val ) DUP2 GET-CELL GET-VALUE STH
	( get result ) ADDr STH2r SWP MOD 
	GET-CHAR SET-CASE SET-PORT-OUTPUT
	
RTN

@op-j ( x y char -- )

	
	POP ( TODO: Wiring )
	( get value ) DUP2 #01 - GET-PORT-RIGHT-RAW STH
	( incr y ) #01 + 
	STHr SET-PORT-OUTPUT

RTN

@op-k ( x y char -- )

	POP
	( get len ) DUP2 DECR GET-PORT-LEFT MIN1
	#00 SWP 
	&loop
		( x+i+1,y ) OVR STH OVR2 STHr ROT + #01 + SWP
		( get variable ) DUP2 GET-PORT-RIGHT 
		DUP #00 = ,&skip JCN
			.variables + LDZ STH
			( incr y ) #01 + 
			DUP2 STHkr SET-PORT-OUTPUT
			STHr
			&skip
		POP POP2
		INCR
		LTHk ;&loop JCN2
	POP2
	POP2
	
RTN

@op-l ( x y char -- )

	POP
	( get case ) DUP2 INCR GET-CASE
	( get left ) DUP2 DECR GET-PORT-LEFT STH
	( get right ) DUP2 INCR GET-PORT-RIGHT STH
	( incr y ) #01 +
	( min ) STH2r LTHk #01 JCN SWP POP 
	GET-CHAR SET-CASE SET-PORT-OUTPUT
	
RTN

@op-m ( x y char -- )

	POP
	( get case ) DUP2 INCR GET-CASE
	( get left ) DUP2 DECR GET-PORT-LEFT STH
	( get right ) DUP2 INCR GET-PORT-RIGHT STH
	( incr y ) #01 +
	( get result ) MULr STHr 
	GET-CHAR SET-CASE SET-PORT-OUTPUT
	
RTN

@op-n ( x y char -- )
	
	STH
	( hit edge ) DUP #00 = ;&collide JCN2
	( hit cell ) DUP2 #01 - GET-CELL CHAR-DOT ! ,&collide JCN
	DUP2 #00 SET-TYPE
	DUP2 CHAR-DOT SET-CELL
	#01 - DUP2 STHr SET-CELL
	#01 SET-LOCK
	RTN
	&collide CHAR-BANG SET-CELL POPr
	
RTN

@op-o ( x y char -- )

	POP
	( get x ) DUP2 SWP #02 - SWP GET-PORT-LEFT STH
	( get y ) DUP2 SWP #01 - SWP GET-PORT-LEFT STH
	( get value ) DUP2 INCR STH2r ++ GET-PORT-RIGHT-RAW STH
	( incr y ) #01 +
	STHr SET-PORT-OUTPUT
	
RTN

@op-p ( x y char -- )

	POP
	( get key ) DUP2 SWP #02 - SWP GET-PORT-LEFT STH
	( get len ) DUP2 SWP #01 - SWP GET-PORT-LEFT MIN1 STH
	( get input ) DUP2 INCR GET-PORT-RIGHT-RAW STH
	#00 OVRr STHr
	&loop
		( x+i+1,y ) OVR STH OVR2 STHr ROT + SWP #01 +
		( lock ) DUP2 #01 SET-LOCK
		( type ) LOCKED-TYPE SET-TYPE
		INCR
		LTHk ,&loop JCN
	POP2
	( write )
	( x-offset ) ROTr ROTr STH2r MOD
	( x,y ) SWP #01 + STH + STHr
	STHr SET-PORT-OUTPUT
	
RTN

@op-q ( x y char -- )

	POP
	( get x ) DUP2 SWP #03 - SWP GET-PORT-LEFT STH
	( get y ) DUP2 SWP #02 - SWP GET-PORT-LEFT STH
	( get len ) DUP2 SWP #01 - SWP GET-PORT-LEFT MIN1
	#00 SWP
	&loop
		( x+i+1,y ) OVR STH OVR2 STHr ROT + #01 + SWP
		( x+x0,y+y0 ) STHkr + SWP OVRr STHr + SWP
		GET-PORT-RIGHT-RAW STH
		( x-i-len ) DUP2 SWP - STH 
		( x,y ) OVR2 SWP STHr - #01 + SWP #01 +
		STHr SET-PORT-OUTPUT
		INCR
		LTHk ;&loop JCN2
	POP2
	( clean ) POP2 POP2r
	
RTN

@op-r ( x y char -- )

	POP 
	( get case ) DUP2 INCR GET-CASE
	( get min ) DUP2 DECR GET-PORT-LEFT STH
	( get max ) DUP2 INCR GET-PORT-RIGHT MIN1 STH
	( unstash min,max ) STH2r 
	( real max ) LTHk #01 JCN SWP
	( no equal ) NEQk #04 JCN [ #01 - SWP ] 
	( stash min,max ) STH2
	( incr y ) #01 +
	( get key ) .timer/seed LDZ2 .timer/frame LDZ2 ** SWP + 
	( key % max + min ) STH2kr SWP - MOD POPr STHr +
	GET-CHAR SET-CASE SET-PORT-OUTPUT
	
RTN

@op-s ( x y char -- )
	
	STH
	( hit edge ) DUP .grid/height LDZ #01 - = ;&collide JCN2
	( hit cell ) DUP2 #01 + GET-CELL CHAR-DOT ! ,&collide JCN
	DUP2 #00 SET-TYPE
	DUP2 CHAR-DOT SET-CELL
	#01 + DUP2 STHr SET-CELL
	#01 SET-LOCK
	RTN
	&collide CHAR-BANG SET-CELL POPr
	
RTN

@op-t ( x y char -- )

	POP
	( get key ) DUP2 SWP #02 - SWP GET-PORT-LEFT STH
	( get len ) DUP2 SWP #01 - SWP GET-PORT-LEFT MIN1 STH
	#00 STHkr
	&loop
		( x+i+1,y ) OVR STH OVR2 STHr ROT + #01 + SWP
		( lock ) DUP2 #01 SET-LOCK 
		( type ) LOCKED-TYPE SET-TYPE
		INCR
		LTHk ,&loop JCN
	POP2
	( read )
	( x-offset ) DUP2 INCR STH2r MOD ROT + SWP 
	( x,y ) GET-PORT-RIGHT-RAW STH #01 +
	STHr SET-PORT-OUTPUT

RTN

@op-u ( x y char -- )

	POP
	( get step ) DUP2 DECR GET-PORT-LEFT STH
	( get max ) DUP2 INCR GET-PORT-RIGHT MIN1 STH
	( incr y ) #01 +
	( frame + max - 1 ) .timer/frame LDZ2 STHkr TOS ++ #0001 --
	( * step ) OVRr STHr TOS **
	( % max ) STHkr TOS MOD2
	( + step ) SWPr STHr TOS ++
	( bucket >= max ) STHr TOS << #01 !
	( bang if equal ) #fc * CHAR-DOT + 
	SET-PORT-OUTPUT
	
RTN

@op-v ( x y char -- )

	POP
	( get write ) DUP2 DECR GET-PORT-LEFT STH
	( get read ) DUP2 INCR GET-PORT-RIGHT-RAW STH
	OVRr STHr ,&write JCN
	( incr y ) #01 +
	( load ) STHr GET-VALUE .variables + LDZ SET-PORT-OUTPUT
	POPr
	RTN
	&write
	( save ) STH2r SWP .variables + STZ POP2

RTN

@op-w ( x y char -- )

	STH
	( hit edge ) OVR #00 = ;&collide JCN2
	( hit cell ) DUP2 DECR GET-CELL CHAR-DOT ! ,&collide JCN
	DUP2 #00 SET-TYPE
	DUP2 CHAR-DOT SET-CELL
	DECR DUP2 STHr SET-CELL
	#01 SET-LOCK
	RTN
	&collide CHAR-BANG SET-CELL POPr
	
RTN

@op-x ( x y char -- )

	POP
	( get value ) DUP2 INCR GET-PORT-RIGHT-RAW STH 
	( get x ) DUP2 SWP #02 - SWP GET-PORT-LEFT STH
	( get y ) DUP2 SWP #01 - SWP GET-PORT-LEFT STH
	( incr y ) STH2r #01 + ++ STHr
	SET-PORT-OUTPUT
	
RTN

@op-y ( x y char -- )

	POP ( TODO: Wiring )
	( get value ) DUP2 DECR GET-PORT-RIGHT-RAW STH
	( incr y ) INCR
	STHr SET-PORT-OUTPUT
	
RTN

@op-z ( x y char -- )

	POP
	( get case ) DUP2 INCR GET-CASE
	( get rate ) DUP2 DECR GET-PORT-LEFT MIN1 STH
	( get target ) DUP2 INCR GET-PORT-RIGHT STH
	( incr y ) #01 +
	( get val ) DUP2 GET-CELL GET-VALUE STH
	EQUkr STHr ,&end JCN 
	LTHkr STHr #00 ! ,&no-below JCN 
		( incr ) STHr OVRr STH SWPr ADDr
		( clamp ) GTHkr STHr #01 JCN SWPr
		,&end JMP
		&no-below
	GTHkr STHr #00 ! ,&no-above JCN 
		( decr ) STHr OVRr STH SWPr SUBr
		( clamp ) STH2kr LTSk #01 JCN SWPr
		&no-above
	&end
	STHr GET-CHAR SET-CASE SET-PORT-OUTPUT POP2r
	
RTN

@op-bang ( x y char -- )

	POP
	CHAR-DOT SET-CELL

RTN

@op-comment ( x y char -- )
	
	POP
	STH
	#01 + .grid/width LDZ
	&loop
		OVR STHkr 
		( lock )  DUP2 #01 SET-LOCK 
		( close ) DUP2 GET-CELL CHAR-HASH = ,&end JCN
		( type )  LOCKED-TYPE SET-TYPE
		INCR
		LTHk ,&loop JCN
	POP2 POPr
	RTN
	&end
	POP2 POP2 POPr

RTN

@op-synth ( x y char -- )
	
	POP
	( get channel ) DUP2 [ SWP #01 + SWP ] GET-PORT-RIGHT STH 
	( get octave ) DUP2 [ SWP #02 + SWP ] GET-PORT-RIGHT [ #0c * ] STH 
	( get note ) DUP2 [ SWP #03 + SWP ] GET-PORT-RIGHT-RAW 
		( req note ) DUP CHAR-DOT ! ,&is-active JCN [ POP POP2 POP2r RTN ] &is-active GET-NOTE STH ADDr
	( req bang ) DUP2 ;get-bang JSR2 ,&is-bang [ JCN POP2 POP2r RTN ] &is-bang
	STHr .Audio0/pitch STHr #10 * + DEO
	IO-TYPE SET-TYPE

RTN

@op-midi ( x y char -- )

	POP
	( get channel ) DUP2 [ SWP #01 + SWP ] GET-PORT-RIGHT STH
	( get octave ) DUP2 [ SWP #02 + SWP ] GET-PORT-RIGHT [ #0c * ] STH 
	( get note ) DUP2 [ SWP #03 + SWP ] GET-PORT-RIGHT-RAW 
		( req note ) DUP CHAR-DOT ! ,&is-active JCN [ POP POP2 POP2r RTN ] &is-active GET-NOTE STH 
	( req bang ) DUP2 ;get-bang JSR2 ,&is-bang JCN [ POP2 POP2r POPr RTN ] &is-bang
	IO-TYPE SET-TYPE
	ADDr
	( note on ) OVRr STHr .Console/write DEO STHkr .Console/write DEO #7f .Console/write DEO
	( note off ) OVRr STHr .Console/write DEO STHkr .Console/write DEO #00 .Console/write DEO
	POP2r

RTN

@op-byte ( x y char -- )

	POP
	( get octave ) DUP2 [ SWP #01 + SWP ] GET-PORT-RIGHT [ #0c * ] STH 
	( get note ) DUP2 [ SWP #02 + SWP ] GET-PORT-RIGHT-RAW 
		( req note ) DUP CHAR-DOT ! ,&is-active JCN [ POP POP2 POPr RTN ] &is-active GET-NOTE STH
	( req bang ) DUP2 ;get-bang JSR2 ,&is-bang JCN POP2 POP2r RTN &is-bang
	IO-TYPE SET-TYPE
	ADDr STHr .Console/write DEO

RTN

@run-char ( x y char -- )
	
	( skip dot )
	DUP CHAR-DOT NEQ ,&not-dot JCN
		POP POP2 RTN 
		&not-dot

	( skip locked )
	ROT ROT DUP2 GET-LOCK #00 = ,&not-locked JCN
		POP POP2 RTN 
		&not-locked
	ROT

	( lowercase )
	DUP #60 < ,&no-lc JCN
	DUP #7b > ,&no-lc JCN
		STH DUP2 ;get-bang JSR2 ,&run JCN 
		POPr POP2 RTN
		&no-lc

	( uppercase )
	DUP #40 < ,&no-uc JCN
	DUP #5a > ,&no-uc JCN
		STH DUP2 OPERATOR-TYPE SET-TYPE &run STHr 
		DUP GET-VALUE #0a - #02 * TOS ;operations ++ LDA2 JMP2
		&no-uc

	( special )
	DUP CHAR-BANG = ;op-bang JCN2
	DUP CHAR-HASH = ;op-comment JCN2
	DUP CHAR-EQUAL = ;op-synth JCN2
	DUP CHAR-COLON = ;op-midi JCN2
	DUP CHAR-SLASH = ;op-byte JCN2

	( unknown )
	POP2 POP

RTN

@clear ( -- )

	#00 .grid/height LDZ
	&ver
		#00 .grid/width LDZ
		&hor
			GET-ITERATORS CHAR-DOT SET-CELL
			INCR
			LTHk ,&hor JCN
		POP2
		INCR
		LTHk ,&ver JCN
	POP2

RTN

@init ( -- )
	
	#00 .grid/height LDZ
	&ver
		#00 .grid/width LDZ
		&hor
			GET-ITERATORS
			( reset lock ) DUP2 #00 SET-LOCK
			( reset type ) #00 SET-TYPE
			INCR
			LTHk ,&hor JCN
		POP2
		INCR
		LTHk ,&ver JCN
	POP2

RTN

@run ( -- )
	
	;init JSR2
	#00 .grid/height LDZ
	&ver
		#00 .grid/width LDZ
		&hor
			GET-ITERATORS
			DUP2 GET-CELL ;run-char JSR2
			INCR
			LTHk ,&hor JCN
		POP2
		INCR
		LTHk ,&ver JCN
	POP2
	;redraw JSR2

RTN

@draw-byte ( byte color -- )
	
	STH
	DUP #04 SFT GET-CHAR GET-CHAR-ADDR STHkr ,draw-char JSR
	.Screen/x DEI2 #0008 ++ .Screen/x DEO2
	#0f AND GET-CHAR GET-CHAR-ADDR STHr ,draw-char JSR
	.Screen/x DEI2 #0008 ++ .Screen/x DEO2

RTN

@draw-char ( addr* color -- )
	
	STH .Screen/addr DEO2
	STHkr .Screen/color DEO
	.Screen/addr DEI2 #0008 ++ .Screen/addr DEO2
	.Screen/y DEI2 STH2k #0008 ++ .Screen/y DEO2
	ROTr STHr .Screen/color DEO
	STH2r .Screen/y DEO2

RTN

@redraw ( -- )
	
	#00 .grid/height LDZ
	&ver
		( pos-y ) OVR #00 SWP #0010 ** [ .grid/y1 LDZ2 ++ ] .Screen/y DEO2
		#00 .grid/width LDZ
		&hor
			( pos-x ) OVR #00 SWP 8** [ .grid/x1 LDZ2 ++ ] .Screen/x DEO2
			GET-ITERATORS
			( sprite ) DUP2 ;get-cell-sprite JSR2
			( color ) SWP2 ,get-cell-type JSR TOS ;cell-styles ++ LDA
			;draw-char JSR2
			INCR
			LTHk ,&hor JCN
		POP2
		INCR
		LTHk ,&ver JCN
	POP2
	,draw-toolbar JSR

RTN

@get-cell-type ( x y -- type )
	
	OVR .selection/x1 LDZ < ,&end JCN
	OVR .selection/x2 LDZ > ,&end JCN
	DUP .selection/y1 LDZ < ,&end JCN
	DUP .selection/y2 LDZ > ,&end JCN
		POP2 #06 RTN 
	&end
	GET-TYPE

RTN

@draw-toolbar ( -- )
		
	( skip on samll screens )
	.toolbar/y1 LDZ2 .Screen/height DEI2 << #01 JCN [ RTN ]

	.toolbar/y1 LDZ2 .Screen/y DEO2

	( Positions )
	.grid/x1 LDZ2 .Screen/x DEO2
	.selection/x1 LDZ #21 ;draw-byte JSR2
	.selection/y1 LDZ #21 ;draw-byte JSR2

	;selection-icns .selection/insert LDZ TOS #0008 ** ++ .Screen/addr DEO2
	#22 .selection/x1 LDZ .selection/y1 LDZ .selection/x2 LDZ .selection/y2 LDZ == + .Screen/color DEO
	.grid/x1 LDZ2 #0030 ++ .Screen/x DEO2

	( Frame )
	.timer/frame #01 + LDZ #21 ;draw-byte JSR2
	;beat-icn .Screen/addr DEO2
	#23 .timer/frame #01 + LDZ MOD8 #00 = - .Screen/color DEO
	.grid/x1 LDZ2 #0050 ++ .Screen/x DEO2

	( Speed )
	.timer/speed LDZ #21 ;draw-byte JSR2

	( File )
	.grid/x2 LDZ2 STH2k #0018 -- .Screen/x DEO2
	;load-icn .Screen/addr DEO2
	#21 .Screen/color DEO
	STH2r #0020 -- .Screen/x DEO2
	;make-icn .Screen/addr DEO2
	#21 .Screen/color DEO

	( filepath )
	#23 ;draw-filepath JSR2

RTN

@draw-meter ( -- )
	
	.toolbar/y1 LDZ2 #0001 -- .Screen/y DEO2

	( merge channels )
	.Audio0/output DEI DUP #0f AND STH #04 SFT STH
	.Audio1/output DEI DUP #0f AND STH #04 SFT STH
		ROTr ADDr ROTr ROTr ADDr SWPr
	.Audio2/output DEI DUP #0f AND STH #04 SFT STH
		ROTr ADDr ROTr ROTr ADDr SWPr
	.Audio3/output DEI DUP #0f AND STH #04 SFT STH
		ROTr ADDr ROTr ROTr ADDr SWPr

	( draw )
	#08 #00
	&loop
		.toolbar/x2 LDZ2 #0028 -- .Screen/x DEO2
		OVR OVRr STHr #04 / < .Screen/color DEO
		.toolbar/x2 LDZ2 #0026 -- .Screen/x DEO2
		OVR STHkr #04 / < .Screen/color DEO
		.Screen/y DEI2 #0001 ++ .Screen/y DEO2
		( incr ) DECR
		GTHk ,&loop JCN
	POP2

	POP2r

RTN

@draw-state ( -- )
	
	.toolbar/x2 LDZ2 #0008 -- .Screen/x DEO2
	.toolbar/y1 LDZ2 .Screen/y DEO2
	;save-icn .Screen/addr DEO2
	#21 .state/changed LDZ + .Screen/color DEO

RTN

@draw-filepath ( color -- )
	
	STH
	.toolbar/y1 LDZ2 .Screen/y DEO2
	.toolbar/x1 LDZ2 #0070 ++ .Screen/x DEO2
	;path/name
	&loop
		DUP2 LDA GET-CHAR-ADDR STHkr ;draw-char JSR2
		.Screen/x DEI2 #0008 ++ .Screen/x DEO2
		#0001 ++
		LDAk #00 ! ,&loop JCN
	POP2
	POPr
	( clear last ) 
	#20 .Screen/color DEO

RTN

( file )

@new-file ( default* -- )

	;clear JSR2
	STH2
	#00 #0d
	&loop
		OVR DUP TOS STH2kr ++ LDA
		SWP .path/name + STZ
		INCR
		LTHk ,&loop JCN
	( end ) #00 SWP .path/name + STZ 
	.path/length STZ 
	POP2r
	RESET-STATE

RTN

@load-file ( -- )

	;path/name .File/name DEO2 
	#1000 .File/length DEO2 
	DATA-FILE .File/load DEO2 
	( setup )
	( TODO: Stop at #00 instead of fixed length )
	#0000 #1000
	&loop
		( get char ) OVR2 DATA-FILE ++ LDA
		DUP CHAR-NULL = ,&end JCN
		DUP CHAR-LINE = ,&linebreak JCN
			( write  ) STH ,&x LDR ,&y LDR STHr SET-CELL
			( incr x ) ,&x LDR #01 + ,&x STR
			,&continue JMP
		&linebreak
			( undo x ) #00 ,&x STR
			( incr y ) ,&y LDR #01 + ,&y STR
			POP
		&continue
		( incr ) SWP2 #0001 ++ SWP2
		LTH2k ,&loop JCN
	&end
	POP2 POP2 POP
	#00 ,&x STR
	#00 ,&y STR
	RESET-STATE
	RTN
	&x $1
	&y $1

RTN

@save-file ( -- )
	
	( stash length ) #0000 STH2
	( setup )
	#00 .grid/height LDZ
	&ver
		#00 .grid/width LDZ
		&hor
			( write char ) GET-ITERATORS GET-CELL [ STH2kr DATA-FILE ++ ] STA
			( incr index ) #0001 STH2 ADD2r
			INCR
			LTHk ,&hor JCN
		POP2
		( write linebreak ) CHAR-LINE [ STH2kr DATA-FILE ++ ] STA
		( incr index ) #0001 STH2 ADD2r
		INCR
		LTHk ,&ver JCN
	POP2
	;path/name .File/name DEO2 
	STH2r .File/length DEO2 
	DATA-FILE .File/save DEO2 
	RESET-STATE

RTN

( clip )

@copy-selection ( -- )
	
	( stash length ) #0000 STH2
	.selection/y1 LDZ .selection/y2 LDZ #01 +
	&ver
		.selection/x1 LDZ .selection/x2 LDZ #01 +
		&hor
			( write char ) GET-ITERATORS GET-CELL [ STH2kr DATA-CLIP ++ ] STA
			( incr index ) #0001 STH2 ADD2r
			INCR
			LTHk ,&hor JCN
		POP2
		( write linebreak ) CHAR-LINE [ STH2kr DATA-CLIP ++ ] STA
		( incr index ) #0001 STH2 ADD2r
		INCR
		LTHk ,&ver JCN
	POP2
	( close ) #00 [ STH2r DATA-CLIP ++ ] STA

RTN

@paste-selection ( -- )
	
	#0000 #1000
	&loop
		( get char ) OVR2 DATA-CLIP ++ LDA
		DUP CHAR-NULL = ,&end JCN
		DUP CHAR-LINE = ,&linebreak JCN
			( write  ) STH ,&x LDR [ .selection/x1 LDZ + ] ,&y LDR [ .selection/y1 LDZ + ] STHr SET-CELL
			( incr x ) ,&x LDR #01 + ,&x STR
			,&continue JMP
		&linebreak
			( undo x ) #00 ,&x STR
			( incr y ) ,&y LDR #01 + ,&y STR
			POP
		&continue
		( incr ) SWP2 #0001 ++ SWP2
		LTH2k ,&loop JCN
	&end
	POP2 POP2 POP
	#00 ,&x STR
	#00 ,&y STR
	RTN
	&x $1
	&y $1

RTN

@fill-selection ( char -- )
	
	STH
	.selection/y1 LDZ .selection/y2 LDZ #01 +
	&ver
		.selection/x1 LDZ .selection/x2 LDZ #01 +
		&hor
			( write char ) GET-ITERATORS STHkr SET-CELL
			INCR
			LTHk ,&hor JCN
		POP2
		INCR
		LTHk ,&ver JCN
	POP2
	POPr

RTN

@cut-selection ( -- )

	;copy-selection JSR2 
	CHAR-DOT ;fill-selection JSR2

RTN

@edit-selection ( x y mod -- )
	
	( set modifiers )
	DUP 
		#01 AND #00 ! ;&drag STA
		#04 AND #00 ! #02 * ;&scale STA
	STH2

	;&drag LDA #00 = ,&no-drag-start JCN 
		;cut-selection JSR2 &no-drag-start

	( y )
	STHkr #00 = ,&no-ver JCN
		( clamp ) STHkr #ff = .selection/y1 [ ,&scale LDR + ] LDZ #00 = #0101 == ,&no-ver JCN
		.selection/y1 [ ,&scale LDR + ] LDZ STHkr + 
			.selection/y1 [ ,&scale LDR + ] STZ
		,&scale LDR ,&no-ver JCN
			.selection/y2 LDZ STHkr + .selection/y2 STZ 
		&no-ver POPr

	( x )
	STHkr #00 = ,&no-hor JCN
		( clamp ) STHkr #ff = .selection/x1 [ ,&scale LDR + ] LDZ #00 = #0101 == ,&no-hor JCN
		.selection/x1 [ ,&scale LDR + ] LDZ STHkr + 
			.selection/x1 [ ,&scale LDR + ] STZ
		,&scale LDR ,&no-hor JCN
			.selection/x2 LDZ STHkr + .selection/x2 STZ 
		&no-hor POPr

	;clamp-selection JSR2 

	,&drag LDR #00 = ,&no-drag-end JCN 
		;paste-selection JSR2 &no-drag-end

	RTN

	&drag $1
	&scale $1

RTN

@clamp-selection ( -- )
	
	.selection/x1 LDZ .grid/width LDZ #01 - STHk < ,&ok-limitx1 JCN
		STHkr .selection/x1 STZ &ok-limitx1 POPr
	.selection/y1 LDZ .grid/height LDZ #01 - STHk < ,&ok-limity1 JCN
		STHkr .selection/y1 STZ &ok-limity1 POPr
	.selection/x2 LDZ .grid/width LDZ #01 - STHk < ,&ok-limitx2 JCN
		STHkr .selection/x2 STZ &ok-limitx2 POPr
	.selection/y2 LDZ .grid/height LDZ #01 - STHk < ,&ok-limity2 JCN
		STHkr .selection/y2 STZ &ok-limity2 POPr
	.selection/x2 LDZ .selection/x1 LDZ STHk > ,&ok-flipx JCN
		STHkr .selection/x2 STZ &ok-flipx POPr
	.selection/y2 LDZ .selection/y1 LDZ STHk > ,&ok-flipy JCN
		STHkr .selection/y2 STZ &ok-flipy POPr

RTN

@within-rect ( x* y* rect -- flag )
	
	STH
	( y < rect.y1 ) DUP2 STHkr #02 + LDZ2 << ,&skip JCN
	( y > rect.y2 ) DUP2 STHkr #06 + LDZ2 >> ,&skip JCN
	SWP2
	( x < rect.x1 ) DUP2 STHkr LDZ2 << ,&skip JCN
	( x > rect.x2 ) DUP2 STHkr #04 + LDZ2 >> ,&skip JCN
	POP2 POP2 POPr
	#01 
RTN
	&skip
	POP2 POP2 POPr
	#00

RTN

@print-hex ( value -- )
	
	STHk #04 SFT ,&parse JSR .Console/write DEO
	STHr #0f AND ,&parse JSR .Console/write DEO
	RTN
	&parse ( value -- char )
		DUP #09 GTH ,&above JCN #30 ADD RTN &above #09 SUB #60 ADD RTN

RTN

@operations
	:op-a :op-b :op-c :op-d :op-e :op-f :op-g :op-h
	:op-i :op-j :op-k :op-l :op-m :op-n :op-o :op-p
	:op-q :op-r :op-s :op-t :op-u :op-v :op-w :op-x
	:op-y :op-z

@untitled-txt  "untitled.orca $1

@lc-notes
	00 00 00 00 00 00 00 00 
	00 00 
	0a 0c 01 03 05 06 08 0a
	0c 0d 0f 11 12 14 16 18
	19 1b 1d 1e 20 22 24 25
	27 29

@uc-notes
	00 00 00 00 00 00 00 00 
	00 00 
	09 0b 00 02 04 05 07 09
	0b 0c 0e 10 11 13 15 17
	18 1a 1c 1d 1f 21 23 24
	26 28

@values ( char to b36 )
	00 00 00 00 00 00 00 00
	00 00 00 00 00 00 00 00
	00 01 02 03 04 05 06 07
	08 09 00 00 00 00 00 00
	00 0a 0b 0c 0d 0e 0f 10
	11 12 13 14 15 16 17 18
	19 1a 1b 1c 1d 1e 1f 20
	21 22 23 00 00 00 00 00
	00 0a 0b 0c 0d 0e 0f 10
	11 12 13 14 15 16 17 18
	19 1a 1b 1c 1d 1e 1f 20
	21 22 23 00 00 00 00 00

@b36clc ( b36 to char-lc )
	30 31 32 33 34 35 36 37
	38 39 61 62 63 64 65 66
	67 68 69 6a 6b 6c 6d 6e
	6f 70 71 72 73 74 75 76
	77 78 79 7a

@cell-styles
	23 ( 0 normal )
	23 ( 1 locked )
	21 ( 2 port-unlocked )
	24 ( 3 operator )
	22 ( 4 port-locked )
	28 ( 5 port-output )
	29 ( 6 selected )
	2c ( 7 io )

@selection-icns   
	0066 4200 0042 6600
	0088 ccee cc88 0000

@cursor-icn     80c0 e0f0 f8e0 1000
@beat-icn       0000 1038 7c38 1000

@save-icn      1054 28c6 2854 1000 
@make-icn      fe82 8282 848a f400 
@load-icn      feaa d6aa d4aa f400 

@tri-pcm
	8082 8486 888a 8c8e 9092 9496 989a 9c9e
	a0a2 a4a6 a8aa acae b0b2 b4b6 b8ba bcbe
	c0c2 c4c6 c8ca ccce d0d2 d4d6 d8da dcde
	e0e2 e4e6 e8ea ecee f0f2 f4f6 f8fa fcfe
	fffd fbf9 f7f5 f3f1 efed ebe9 e7e5 e3e1
	dfdd dbd9 d7d5 d3d1 cfcd cbc9 c7c5 c3c1
	bfbd bbb9 b7b5 b3b1 afad aba9 a7a5 a3a1
	9f9d 9b99 9795 9391 8f8d 8b89 8785 8381
	7f7d 7b79 7775 7371 6f6d 6b69 6765 6361
	5f5d 5b59 5755 5351 4f4d 4b49 4745 4341
	3f3d 3b39 3735 3331 2f2d 2b29 2725 2321
	1f1d 1b19 1715 1311 0f0d 0b09 0705 0301
	0103 0507 090b 0d0f 1113 1517 191b 1d1f
	2123 2527 292b 2d2f 3133 3537 393b 3d3f
	4143 4547 494b 4d4f 5153 5557 595b 5d5f
	6163 6567 696b 6d6f 7173 7577 797b 7d7f

@sin-pcm
	8083 8689 8c8f 9295 989b 9ea1 a4a7 aaad
	b0b3 b6b9 bbbe c1c3 c6c9 cbce d0d2 d5d7
	d9db dee0 e2e4 e6e7 e9eb ecee f0f1 f2f4
	f5f6 f7f8 f9fa fbfb fcfd fdfe fefe fefe
	fffe fefe fefe fdfd fcfb fbfa f9f8 f7f6
	f5f4 f2f1 f0ee eceb e9e7 e6e4 e2e0 dedb
	d9d7 d5d2 d0ce cbc9 c6c3 c1be bbb9 b6b3
	b0ad aaa7 a4a1 9e9b 9895 928f 8c89 8683
	807d 7a77 7471 6e6b 6865 625f 5c59 5653
	504d 4a47 4542 3f3d 3a37 3532 302e 2b29
	2725 2220 1e1c 1a19 1715 1412 100f 0e0c
	0b0a 0908 0706 0505 0403 0302 0202 0202
	0102 0202 0202 0303 0405 0506 0708 090a
	0b0c 0e0f 1012 1415 1719 1a1c 1e20 2225
	2729 2b2e 3032 3537 3a3d 3f42 4547 4a4d
	5053 5659 5c5f 6265 686b 6e71 7477 7a7d

@page437
	0000 0000 0000 0000 0000 0000 0000 0000
	0000 183c 3c3c 1818 1800 1818 0000 0000
	0066 6666 2400 0000 0000 0000 0000 0000
	0000 006c 6cfe 6c6c 6cfe 6c6c 0000 0000
	1818 7cc6 c2c0 7c06 0686 c67c 1818 0000 
	0000 0000 c2c6 0c18 3060 c686 0000 0000
	0000 386c 6c38 76dc cccc cc76 0000 0000
	0030 3030 6000 0000 0000 0000 0000 0000 
	0000 0c18 3030 3030 3030 180c 0000 0000
	0000 3018 0c0c 0c0c 0c0c 1830 0000 0000
	0000 0000 0066 3cff 3c66 0000 0000 0000
	0000 0000 0018 187e 1818 0000 0000 0000
	0000 0000 0000 0000 0018 1818 3000 0000 
	0000 0000 0000 00fe 0000 0000 0000 0000 
&marker
	0000 0000 0000 0000 0000 1818 0000 0000 
	0000 0000 0206 0c18 3060 c080 0000 0000
	0000 386c c6c6 d6d6 c6c6 6c38 0000 0000
	0000 1838 7818 1818 1818 187e 0000 0000
	0000 7cc6 060c 1830 60c0 c6fe 0000 0000
	0000 7cc6 0606 3c06 0606 c67c 0000 0000
	0000 0c1c 3c6c ccfe 0c0c 0c1e 0000 0000
	0000 fec0 c0c0 fc06 0606 c67c 0000 0000
	0000 3860 c0c0 fcc6 c6c6 c67c 0000 0000
	0000 fec6 0606 0c18 3030 3030 0000 0000
	0000 7cc6 c6c6 7cc6 c6c6 c67c 0000 0000
	0000 7cc6 c6c6 7e06 0606 0c78 0000 0000
	0000 0000 1818 0000 0018 1800 0000 0000
	0000 0000 1818 0000 0018 1830 0000 0000
	0000 0006 0c18 3060 3018 0c06 0000 0000
	0000 0000 007e 0000 7e00 0000 0000 0000
	0000 0060 3018 0c06 0c18 3060 0000 0000
	0000 7cc6 c60c 1818 1800 1818 0000 0000
	0000 007c c6c6 dede dedc c07c 0000 0000
	0000 1038 6cc6 c6fe c6c6 c6c6 0000 0000
	0000 fc66 6666 7c66 6666 66fc 0000 0000
	0000 3c66 c2c0 c0c0 c0c2 663c 0000 0000
	0000 f86c 6666 6666 6666 6cf8 0000 0000
	0000 fe66 6268 7868 6062 66fe 0000 0000
	0000 fe66 6268 7868 6060 60f0 0000 0000
	0000 3c66 c2c0 c0de c6c6 663a 0000 0000
	0000 c6c6 c6c6 fec6 c6c6 c6c6 0000 0000
	0000 3c18 1818 1818 1818 183c 0000 0000
	0000 1e0c 0c0c 0c0c cccc cc78 0000 0000
	0000 e666 666c 7878 6c66 66e6 0000 0000
	0000 f060 6060 6060 6062 66fe 0000 0000
	0000 c6ee fefe d6c6 c6c6 c6c6 0000 0000
	0000 c6e6 f6fe dece c6c6 c6c6 0000 0000
	0000 7cc6 c6c6 c6c6 c6c6 c67c 0000 0000
	0000 fc66 6666 7c60 6060 60f0 0000 0000
	0000 7cc6 c6c6 c6c6 c6d6 de7c 0c0e 0000
	0000 fc66 6666 7c6c 6666 66e6 0000 0000
	0000 7cc6 c660 380c 06c6 c67c 0000 0000
	0000 7e7e 5a18 1818 1818 183c 0000 0000
	0000 c6c6 c6c6 c6c6 c6c6 c67c 0000 0000
	0000 c6c6 c6c6 c6c6 c66c 3810 0000 0000
	0000 c6c6 c6c6 d6d6 d6fe ee6c 0000 0000
	0000 c6c6 6c7c 3838 7c6c c6c6 0000 0000
	0000 6666 6666 3c18 1818 183c 0000 0000
	0000 fec6 860c 1830 60c2 c6fe 0000 0000
	0000 3c30 3030 3030 3030 303c 0000 0000
	0000 0080 c0e0 7038 1c0e 0602 0000 0000
	0000 3c0c 0c0c 0c0c 0c0c 0c3c 0000 0000
	1038 6cc6 0000 0000 0000 0000 0000 0000
	0000 0000 0000 0000 0000 0000 00ff 0000
	3030 1800 0000 0000 0000 0000 0000 0000
	0000 0000 0078 0c7c cccc cc76 0000 0000
	0000 e060 6078 6c66 6666 667c 0000 0000
	0000 0000 007c c6c0 c0c0 c67c 0000 0000
	0000 1c0c 0c3c 6ccc cccc cc76 0000 0000
	0000 0000 007c c6fe c0c0 c67c 0000 0000
	0000 386c 6460 f060 6060 60f0 0000 0000
	0000 0000 0076 cccc cccc cc7c 0ccc 7800
	0000 e060 606c 7666 6666 66e6 0000 0000
	0000 1818 0038 1818 1818 183c 0000 0000
	0000 0606 000e 0606 0606 0606 6666 3c00
	0000 e060 6066 6c78 786c 66e6 0000 0000
	0000 3818 1818 1818 1818 183c 0000 0000
	0000 0000 00ec fed6 d6d6 d6c6 0000 0000
	0000 0000 00dc 6666 6666 6666 0000 0000
	0000 0000 007c c6c6 c6c6 c67c 0000 0000
	0000 0000 00dc 6666 6666 667c 6060 f000
	0000 0000 0076 cccc cccc cc7c 0c0c 1e00
	0000 0000 00dc 7666 6060 60f0 0000 0000
	0000 0000 007c c660 380c c67c 0000 0000
	0000 1030 30fc 3030 3030 361c 0000 0000
	0000 0000 00cc cccc cccc cc76 0000 0000
	0000 0000 0066 6666 6666 3c18 0000 0000
	0000 0000 00c6 c6d6 d6d6 fe6c 0000 0000
	0000 0000 00c6 6c38 3838 6cc6 0000 0000
	0000 0000 00c6 c6c6 c6c6 c67e 060c f800
	0000 0000 00fe cc18 3060 c6fe 0000 0000
	0000 0e18 1818 7018 1818 180e 0000 0000
	0000 1818 1818 0018 1818 1818 0000 0000
	0000 7018 1818 0e18 1818 1870 0000 0000
