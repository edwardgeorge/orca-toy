( Orca
	
	TODO
		- lowcase/upcase bang
		- Synthax highlight
			- Type data
		- Comments
		- Scale selection
		- Rename file
		- Load/Save
		- Copy/Paste

	☒ A - B
	☐ C - H
	☐ I - N
	☐ O - T
	☐ U - Z
)

%+  { ADD } %-   { SUB }  %*  { MUL }  %/   { DIV }
%<  { LTH } %>   { GTH }  %=  { EQU }  %!   { NEQ }
%++ { ADD2 } %-- { SUB2 } %** { MUL2 } %// { DIV2 }
%<< { LTH2 } %>> { GTH2 } %== { EQU2 } %!! { NEQ2 }

%DEBUG  { .Console/byte DEO #0a .Console/char DEO }
%DEBUG2 { .Console/short DEO2 #0a .Console/char DEO }

%TOB { SWP POP }        %TOS { #00 SWP }
%INCR { SWP #01 + SWP } %DECR { SWP #01 - SWP }

%RTN { JMP2r }
%MOD { DUP2 / * - } %MOD8 { #07 AND }
%GET-ITERATORS { SWP2k POP SWP POP }
%TOGGLE { DUP LDZ #00 = SWP STZ }

%PORTEL-TYPE   { #02 }
%OPERATOR-TYPE { #03 }
%PORTER-TYPE   { #04 }
%OUTPUT-TYPE   { #05 }

%DATA-CELLS { #8000 }
%DATA-LOCKS { #9000 }
%DATA-TYPES { #a000 }

%CHAR-DOT { #2e }

%IS-CHAR-KEY { STHk #20 > STHr #7b < #0101 == }

%GET-INDEX { #00 SWP #00 .grid/width LDZ ** ROT #00 SWP ++ } ( x y -- index )
%GET-CHAR  { #24 MOD #00 SWP ;b36clc ++ LDA } ( b36 -- char )
%GET-VALUE { #20 - #00 SWP ;values ++ LDA } ( char -- b36 )

%GET-CELL  { GET-INDEX DATA-CELLS ++ LDA } ( x y -- char )
%SET-CELL  { ROT ROT GET-INDEX DATA-CELLS ++ STA } ( x y char -- )

%GET-TYPE  { GET-INDEX DATA-TYPES ++ LDA } ( x y -- type )
%SET-TYPE  { ROT ROT GET-INDEX DATA-TYPES ++ STA } ( x y type -- )

%GET-LOCK  { GET-INDEX DATA-LOCKS ++ LDA } ( x y -- type )
%SET-LOCK  { ROT ROT GET-INDEX DATA-LOCKS ++ STA } ( x y type -- )

%GET-PORT  { GET-CELL GET-VALUE } ( x y -- char )
%SET-PORT  { SET-CELL } ( x y char -- )

%GET-PORT-LEFT { DUP2 PORTEL-TYPE SET-TYPE GET-PORT } ( x y -- char )
%GET-PORT-RIGHT  { DUP2 PORTER-TYPE SET-TYPE DUP2 #01 SET-LOCK GET-PORT } ( x y -- char )

%SET-PORT-OUTPUT { STH DUP2 OUTPUT-TYPE SET-TYPE DUP2 #01 SET-LOCK STHr SET-PORT } ( x y char -- )

%RELEASE-MOUSE { #00 .Mouse/state DEO }

( devices )

|00 @System     [ &vector $2 &pad $6 &r $2 &g $2 &b $2 ]
|10 @Console    [ &vector $2 &pad $6 &char $1 &byte $1 &short $2 &string $2 ]
|20 @Screen     [ &vector $2 &width $2 &height $2 &pad $2 &x $2 &y $2 &addr $2 &color $1 ]
|80 @Controller [ &vector $2 &button $1 &key $1 ]
|90 @Mouse      [ &vector $2 &x $2 &y $2 &state $1 &chord $1 ]
|a0 @File       [ &vector $2 &success $2 &offset $2 &pad   $2 &name  $2 &length $2 &load $2 &save $2 ]

( variables )

@timer     [ &beat $1 &alive $1 &frame $1 &speed $1 ]
@grid      [ &width $1 &height $1 ]
@selection [ &x1 $1 &y1 $1 &x2 $1 &y2 $1 ]
@cursor    [ &x $2 &y $2 ]

@path 
	&length $1
	&name $20

|0100

	( theme ) 
	#0f34 .System/r DEO2 
	#0fc4 .System/g DEO2 
	#0f94 .System/b DEO2

	( vectors ) 
	;on-button .Controller/vector DEO2
	;on-mouse .Mouse/vector DEO2
	;on-frame .Screen/vector DEO2

	( find size )
	.Screen/width DEI2 #03 SFT2 SWP POP .grid/width STZ
	.Screen/height DEI2 #03 SFT2 SWP POP #02 - .grid/height STZ

	;untitled-txt ;new-file JSR2

	( start )
	;clear JSR2
	;init JSR2
	#9a .timer/speed STZ
	#01 .timer/alive STZ

	;redraw JSR2

BRK

@on-frame ( -> )

	( paused ) .timer/alive LDZ #01 JCN [ BRK ]

	.timer/beat LDZ #01 + DUP .timer/beat STZ

	( skip ) #08 EQU ,&tick JCN BRK &tick

	.timer/frame LDZ #01 + .timer/frame STZ

	;run JSR2

	#00 .timer/beat STZ

BRK

@on-button ( -> )
	
	( ignore release when key/button is blank )
	.Controller/button DEI2 #0000 !! #01 JCN [ BRK ]

	( key )
	.Controller/key DEI 
	DUP #20 ! ,&no-space JCN
		.timer/alive TOGGLE
		;redraw JSR2 POP BRK &no-space
	DUP #08 ! ,&no-backspace JCN
		.selection/x1 LDZ .selection/y1 LDZ CHAR-DOT SET-CELL ( put . char )
		;redraw JSR2 POP BRK &no-backspace
	DUP IS-CHAR-KEY #00 = ,&no-key JCN
		.selection/x1 LDZ .selection/y1 LDZ .Controller/key DEI SET-CELL
		;redraw JSR2 POP BRK &no-key
	POP

	( button )
	.Controller/button DEI #f0 AND
		DUP #04 SFT #01 AND #01 NEQ ,&no-up JCN
			.selection/y1 LDZ #00 EQU ,&no-up JCN
			.selection/y1 LDZ #01 - .selection/y1 STZ
			.selection/y2 LDZ #01 - .selection/y2 STZ &no-up
		DUP #05 SFT #01 AND #01 NEQ ,&no-down JCN
			.selection/y1 LDZ .grid/height LDZ #01 - EQU ,&no-down JCN
			.selection/y1 LDZ #01 + .selection/y1 STZ
			.selection/y2 LDZ #01 + .selection/y2 STZ &no-down
		DUP #06 SFT #01 AND #01 NEQ ,&no-left JCN
			.selection/x1 LDZ #00 EQU ,&no-left JCN
			.selection/x1 LDZ #01 - .selection/x1 STZ
			.selection/x2 LDZ #01 - .selection/x2 STZ &no-left
		DUP #07 SFT #01 AND #01 NEQ ,&no-right JCN
			.selection/x1 LDZ .grid/width LDZ #01 - EQU ,&no-right JCN
			.selection/x1 LDZ #01 + .selection/x1 STZ
			.selection/x2 LDZ #01 + .selection/x2 STZ &no-right
	POP

	;redraw JSR2

BRK

@on-mouse (-> )
	
	( clear last cursor )
	.cursor/x LDZ2 .Screen/x DEO2
	.cursor/y LDZ2 .Screen/y DEO2
	;blank_icn .Screen/addr DEO2
	#30 .Screen/color DEO

	( record cursor positions )
	.Mouse/x DEI2 .cursor/x STZ2
	.Mouse/y DEI2 .cursor/y STZ2

	( draw new cursor )
	.cursor/x LDZ2 .Screen/x DEO2
	.cursor/y LDZ2 .Screen/y DEO2
	;cursor_icn .Screen/addr DEO2
	#32 .Mouse/state DEI #01 EQU + .Screen/color DEO

	.Mouse/state DEI #00 EQU ,&no-touch JCN
		.Mouse/y DEI2 .Screen/height DEI2 #0008 -- -- #0008 << ,on-touch-bar JCN
		.Mouse/y DEI2 .Screen/height DEI2 #0010 -- -- #0008 << ,&no-touch JCN
		.Mouse/x DEI2 #03 SFT2 SWP POP .selection/x1 STZ
		.Mouse/y DEI2 #03 SFT2 SWP POP .selection/y1 STZ
		;redraw JSR2
		&no-touch
	
BRK

@on-touch-bar ( -> )
	
	.Screen/width DEI2 #03 SFT2 TOB .Mouse/x DEI2 #03 SFT2 TOB -
	DUP #01 ! ,&no-save JCN
		#aa DEBUG
		;save-file JSR2 &no-save
	DUP #03 ! ,&no-load JCN
		#bb DEBUG
		;load-file JSR2
		;redraw JSR22 &no-load
	DUP #04 ! ,&no-name JCN
		#cc DEBUG
		#20 ;draw-filepath JSR2
		;untitled-txt ;new-file JSR2
		;redraw JSR2 &no-name
	POP

	RELEASE-MOUSE

BRK

( operations )

@get-bang ( x y -- bang )

RTN

( old )

@is-selected ( x y -- flag )
	
	.selection/x1 LDZ .selection/y1 LDZ EQU2

RTN

@get-cell-type ( x y -- type )
	
	DUP2 ;is-selected JSR2 #01 ! ,&unselected JCN
		POP2 #06 RTN &unselected
	GET-TYPE

RTN

@get-cell-sprite ( x y -- addr )
	
	DUP2 GET-CELL
	( if character is dot )
	DUP CHAR-DOT NEQ ,&no-bar JCN
		( check if x,y is grid )
		POP
		DUP2 MOD8 #00 EQU SWP MOD8 #00 EQU #0101 NEQ2 ,&no-marker8 JCN 
			POP2 ;marker8_icn RTN &no-marker8
		DUP2 #01 AND #00 EQU SWP #01 AND #00 EQU #0101 NEQ2 ,&no-marker4 JCN 
			POP2 ;marker4_icn RTN &no-marker4
		DUP2 GET-TYPE #00 = ,&no-port JCN
			POP2 ;marker4_icn RTN &no-port
		POP2 ;font RTN
	&no-bar
	STH POP2 STHr
	#20 - #00 SWP #30 SFT2 ;font ++

RTN

( operators )

@op-a ( x y char -- )

	POP ( TODO: detect capitalization )
	( get left ) DUP2 DECR GET-PORT-LEFT STH
	( get right ) DUP2 INCR GET-PORT-RIGHT STH
	( incr y ) #01 +
	( get result ) ADDr STHr GET-CHAR
	SET-PORT-OUTPUT 

RTN

@op-b ( x y char -- )
	
	POP ( TODO: detect capitalization )
	( get left ) DUP2 DECR GET-PORT-LEFT STH
	( get right ) DUP2 INCR GET-PORT-RIGHT STH
	( incr y ) #01 +
	( get result ) SUBr STHr
	( loop-around ) DUP #80 < ,&no-bounds JCN #00 SWP - #24 SWP - &no-bounds GET-CHAR
	SET-PORT-OUTPUT 

RTN

@op-c ( x y char -- )
	
	POP
	#01 +
	#30 .timer/frame LDZ MOD8 + SET-CELL

RTN

@op-d ( x y char -- )

	POP POP2
	
RTN

@op-e ( x y char -- )

	POP POP2
	
RTN

@op-f ( x y char -- )

	POP POP2
	
RTN

@op-g ( x y char -- )

	POP POP2
	
RTN

@op-h ( x y char -- )

	POP POP2
	
RTN

@op-i ( x y char -- )

	POP POP2
	
RTN

@op-j ( x y char -- )

	POP POP2
	
RTN

@op-k ( x y char -- )

	POP POP2
	
RTN

@op-l ( x y char -- )

	POP POP2
	
RTN

@op-m ( x y char -- )

	POP POP2
	
RTN

@op-n ( x y char -- )
	
	STH
	( limit )
	DUP ,&not-edge JCN
		#2a SET-CELL POP STHr RTN
	&not-edge
	( collide )
	DUP2 #01 - GET-CELL CHAR-DOT EQU ,&not-collide JCN
		#2a SET-CELL POP STHr RTN
	&not-collide
	( move )
	DUP2 STHr
	DECR SET-CELL	
	CHAR-DOT SET-CELL
	
RTN

@op-o ( x y char -- )

	POP POP2
	
RTN

@op-p ( x y char -- )

	POP POP2
	
RTN

@op-q ( x y char -- )

	POP POP2
	
RTN

@op-r ( x y char -- )

	POP POP2
	
RTN

@op-s ( x y char -- )
	
	STH
	( clear ) DUP2 CHAR-DOT SET-CELL
	( move ) #01 + DUP2 #01 SET-LOCK
	STHr SET-CELL
	
RTN

@op-t ( x y char -- )

	POP POP2
	
RTN

@op-u ( x y char -- )

	POP POP2
	
RTN

@op-v ( x y char -- )

	POP POP2
	
RTN

@op-w ( x y char -- )

	STH
	( limit )
	OVR ,&not-edge JCN
		#2a SET-CELL POP STHr RTN
	&not-edge
	( collide )
	DUP2 DECR GET-CELL CHAR-DOT EQU ,&not-collide JCN
		#2a SET-CELL POP STHr RTN
	&not-collide
	( move )
	DUP2
	DECR STHr SET-CELL	
	CHAR-DOT SET-CELL
	
RTN

@op-x ( x y char -- )

	POP POP2
	
RTN

@op-y ( x y char -- )

	POP POP2
	
RTN

@op-z ( x y char -- )

	POP POP2
	
RTN

@op-bang ( x y char -- )

	POP
	CHAR-DOT SET-CELL

RTN

@run-char ( x y char -- )
	
	( skip dot )
	DUP CHAR-DOT NEQ ,&not-dot JCN
		POP POP2 RTN
	&not-dot

	( skip locked )
	ROT ROT DUP2 GET-LOCK #00 EQU ,&not-locked JCN
		POP POP2 RTN
	&not-locked
	ROT

	( is uppercase )
	DUP #40 < ,&no-uc JCN
	DUP #5a > ,&no-uc JCN
		STH DUP2 OPERATOR-TYPE SET-TYPE STHr 
	&no-uc

	( TODO: skip lowercase )
	( TODO: skip commented )

	( TODO: Make into a lookup table )
	( A ) DUP #41 EQU ;op-a JCN2 ( B ) DUP #42 EQU ;op-b JCN2
	( C ) DUP #43 EQU ;op-c JCN2 ( D ) DUP #44 EQU ;op-d JCN2
	( E ) DUP #45 EQU ;op-e JCN2 ( F ) DUP #46 EQU ;op-f JCN2
	( G ) DUP #47 EQU ;op-g JCN2 ( H ) DUP #48 EQU ;op-h JCN2
	( I ) DUP #49 EQU ;op-i JCN2 ( J ) DUP #4a EQU ;op-j JCN2
	( K ) DUP #4b EQU ;op-k JCN2 ( L ) DUP #4c EQU ;op-l JCN2
	( M ) DUP #4d EQU ;op-m JCN2 ( N ) DUP #4e EQU ;op-n JCN2
	( O ) DUP #4f EQU ;op-o JCN2 ( P ) DUP #50 EQU ;op-p JCN2
	( Q ) DUP #51 EQU ;op-q JCN2 ( R ) DUP #52 EQU ;op-r JCN2
	( S ) DUP #53 EQU ;op-s JCN2 ( T ) DUP #54 EQU ;op-t JCN2
	( U ) DUP #55 EQU ;op-u JCN2 ( V ) DUP #56 EQU ;op-v JCN2
	( W ) DUP #57 EQU ;op-w JCN2 ( X ) DUP #58 EQU ;op-x JCN2
	( Y ) DUP #59 EQU ;op-y JCN2 ( Z ) DUP #5a EQU ;op-z JCN2
	( * ) DUP #2a EQU ;op-bang JCN2
	POP POP2

RTN

@clear ( -- )

	#00 .grid/height LDZ
	&ver
		#00 .grid/width LDZ
		&hor
			GET-ITERATORS CHAR-DOT SET-CELL
			INCR
			LTHk ,&hor JCN
		POP2
		INCR
		LTHk ,&ver JCN
	POP2

RTN

@init ( -- )
	
	#00 .grid/height LDZ
	&ver
		#00 .grid/width LDZ
		&hor
			GET-ITERATORS
			( reset lock ) DUP2 #00 SET-LOCK
			( reset type ) #00 SET-TYPE
			INCR
			LTHk ,&hor JCN
		POP2
		INCR
		LTHk ,&ver JCN
	POP2

RTN

@run ( -- )
	
	;init JSR2
	#00 .grid/height LDZ
	&ver
		#00 .grid/width LDZ
		&hor
			GET-ITERATORS
			DUP2 GET-CELL ;run-char JSR2
			INCR
			LTHk ,&hor JCN
		POP2
		INCR
		LTHk ,&ver JCN
	POP2
	;redraw JSR2

RTN

@new-file ( default* -- )

	;clear JSR2
	STH2
	#00 #0c
	&loop
		OVR DUP TOS STH2kr ++ LDA
		SWP .path/name + STZ
		INCR
		LTHk ,&loop JCN
	.path/length STZ POP 
	POP2r

RTN

@load-file ( -- )

	( TODO: clear )
	;path/name .File/name DEO2 
	#2000 .File/length DEO2 
	( BANK .File/load DEO2 )

RTN

@save-file ( -- )

	;path/name .File/name DEO2 
	#2000 .File/length DEO2 
	( BANK .File/save DEO2 )

RTN

@draw-interface ( -- )
	
	.Screen/height DEI2 #0008 -- .Screen/y DEO2

	( Positionx )
	#0000 .Screen/x DEO2
	.selection/x1 LDZ
		DUP #04 SFT GET-CHAR #20 - #00 SWP #30 SFT2 ;font ++ .Screen/addr DEO2
	#22 .Screen/color DEO
	#0008 .Screen/x DEO2
		#0f AND GET-CHAR #20 - #00 SWP #30 SFT2 ;font ++ .Screen/addr DEO2
	#22 .Screen/color DEO

	( Positiony )
	#0010 .Screen/x DEO2
	.selection/y1 LDZ
		DUP #04 SFT GET-CHAR #20 - #00 SWP #30 SFT2 ;font ++ .Screen/addr DEO2
	#22 .Screen/color DEO
	#0018 .Screen/x DEO2
		#0f AND GET-CHAR #20 - #00 SWP #30 SFT2 ;font ++ .Screen/addr DEO2
	#22 .Screen/color DEO

	#0020 .Screen/x DEO2
	;position_icn .Screen/addr DEO2
	#23 .Screen/color DEO

	( Frame )
	#0030 .Screen/x DEO2
	.timer/frame LDZ
		DUP #04 SFT GET-CHAR #20 - #00 SWP #30 SFT2 ;font ++ .Screen/addr DEO2
	#22 .Screen/color DEO
	#0038 .Screen/x DEO2
		#0f AND GET-CHAR #20 - #00 SWP #30 SFT2 ;font ++ .Screen/addr DEO2
	#22 .Screen/color DEO

	#0040 .Screen/x DEO2
	;beat_icn .Screen/addr DEO2
	#21 .timer/frame LDZ MOD8 #00 EQU #02 * + .Screen/color DEO

	( Speed )
	#0050 .Screen/x DEO2
	.timer/speed LDZ
		DUP #04 SFT GET-CHAR #20 - #00 SWP #30 SFT2 ;font ++ .Screen/addr DEO2
	#22 .Screen/color DEO
	#0058 .Screen/x DEO2
		#0f AND GET-CHAR #20 - #00 SWP #30 SFT2 ;font ++ .Screen/addr DEO2
	#22 .Screen/color DEO

	( TODO: Signal VU )

	.Screen/width DEI2 .Screen/x DEO2

	( File )
	.Screen/x DEI2 #0008 -- .Screen/x DEO2
	;save-icn .Screen/addr DEO2
	#21 .Screen/color DEO
	.Screen/x DEI2 #0010 -- .Screen/x DEO2
	;load-icn .Screen/addr DEO2
	#21 .Screen/color DEO
	.Screen/x DEI2 #0008 -- .Screen/x DEO2
	;make-icn .Screen/addr DEO2
	#21 .Screen/color DEO

	( filepath )
	#23 ;draw-filepath JSR2

RTN

@redraw ( -- )
	
	#00 .grid/height LDZ
	&ver
		( pos-y ) OVR #00 SWP #30 SFT2 .Screen/y DEO2
		#00 .grid/width LDZ
		&hor
			( pos-x ) OVR #00 SWP #30 SFT2 .Screen/x DEO2
			GET-ITERATORS
			( sprite ) DUP2 ;get-cell-sprite JSR2 .Screen/addr DEO2
			( draw ) ;get-cell-type JSR2 TOS ;cell-styles ++ LDA .Screen/color DEO
			INCR
			LTHk ,&hor JCN
		POP2
		INCR
		LTHk ,&ver JCN
	POP2

	;draw-interface JSR2

RTN

@draw-filepath ( color -- )
	
	STH
	#0068 .Screen/x DEO2
	;path/name
	&loop
		DUP2 LDA DUP #00 ! #20 * - TOS #0008 ** ;font ++ .Screen/addr DEO2 
		STHkr .Screen/color DEO
		.Screen/x DEI2 #0008 ++ .Screen/x DEO2
		#0001 ++
		LDAk #00 ! ,&loop JCN
	POP2
	POPr
	( clear last ) 
	#20 .Screen/color DEO

RTN

@values ( char to b36 )
	00 00 00 00 00 00 00 00
	00 00 00 00 00 00 00 00
	00 01 02 03 04 05 06 07
	08 09 00 00 00 00 00 00
	00 0a 0b 0c 0d 0e 0f 10
	11 12 13 14 15 16 17 18
	19 1a 1b 1c 1d 1e 1f 20
	21 22 23 00 00 00 00 00
	00 0a 0b 0c 0d 0e 0f 10
	11 12 13 14 15 16 17 18
	19 1a 1b 1c 1d 1e 1f 20
	21 22 23 00 00 00 00 00

@b36clc ( b36 to char-lc )
	30 31 32 33 34 35 36 37
	38 39 61 62 63 64 65 66
	67 68 69 6a 6b 6c 6d 6e
	6f 70 71 72 73 74 75 76
	77 78 79 7a

@cell-styles
	21 ( 0 normal )
	23 ( 1 locked )
	21 ( 2 port-unlocked )
	24 ( 3 operator )
	22 ( 4 port-locked )
	28 ( 5 port-output )
	29 ( 6 selected )

@untitled-txt  "untitled.chr $1

@cursor_icn     80c0 e0f0 f8e0 1000
@blank_icn      0000 0000 0000 0000
@position_icn   0066 4200 0042 6600
@beat_icn       0000 1038 7c38 1000
@marker8_icn    0000 2400 0024 0000
@marker4_icn    0000 0000 0000 1000

@save-icn      1054 28c6 2854 1000 
@make-icn      fe82 8282 848a f400 
@load-icn      feaa d6aa d4aa f400 

@eye_icns
	0038 4492 2810 0000 ( open )
	0000 0082 4438 0000 ( closed )

@font ( specter8-frag font )
	0000 0000 0000 0000 0008 0808 0800 0800
	0014 1400 0000 0000 0024 7e24 247e 2400
	0008 1e28 1c0a 3c08 0000 2204 0810 2200
	0030 4832 4c44 3a00 0008 1000 0000 0000
	0004 0808 0808 0400 0020 1010 1010 2000
	005a 2442 4224 5a00 0000 0808 3e08 0800
	0000 0000 0000 0810 0000 0000 3e00 0000
	0000 0000 0000 0800 0000 0204 0810 2000
&numbers
	0000 3c42 4242 3c00
	0000 3010 1010 1000
	0000 7c02 3c40 7e00
	0000 7c02 7c02 7c00
	0000 1222 427e 0200
	0000 7e40 3c02 7e00
	0000 3e40 7c42 3c00
	0000 7e02 0408 1000
	0000 7e42 3c42 7e00
	0000 7e42 3e02 0200
	( -- )
	0000 0010 0000 1000 
	0000 1000 0010 1020
	0000 0810 2010 0800 
	0000 003e 003e 0000
	0000 1008 0408 1000 
	003c 420c 1000 1000
	003c 4232 4a42 3c00 
&uc
	0000 3c42 7e42 4200
	0000 7c42 7c42 7c00
	0000 3e40 4040 3e00
	0000 7c42 4242 7c00
	0000 7e40 7e40 7e00
	0000 7e40 7040 4000
	0000 3e40 5c42 3e00
	0000 4242 7e42 4200
	0000 1010 1010 1000
	0000 7e02 0242 3c00
	0000 4648 7048 4600
	0000 4040 4040 7e00
	0000 6e52 5252 5200
	0000 6252 4a46 4200
	0000 3c42 4242 3c00
	0000 7e42 7c40 4000
	0000 3c42 4a44 3a00
	0000 7e42 7c42 4200
	0000 3e40 7e02 7c00
	0000 7e10 1010 1000
	0000 4242 4242 3c00
	0000 4242 4224 1800
	0000 5252 5252 6e00
	0000 4224 1824 4200
	0000 4224 1010 1000
	0000 7e02 3c40 7e00
	( ? )
	000c 0808 0808 0c00
	0040 2010 0804 0200 
	0030 1010 1010 3000
	0008 1400 0000 0000 
	0000 0000 0000 7e00
	0008 0400 0000 0000 
&lc
	0000 7c02 3e42 7a00
	0000 4040 7c42 7c00
	0000 003e 4040 3e00
	0000 0202 3e42 3e00
	0000 3c42 7c40 3e00
	0000 3c42 7040 4000
	0000 3e42 3e02 7c00
	0000 4040 7c42 4200
	0000 1000 1010 1000
	0000 7e04 0444 3800
	0000 4244 7844 4200
	0000 4040 4040 3e00
	0000 6c52 5252 5200
	0000 5c62 4242 4200
	0000 1c22 4244 3800
	0000 7c42 7c40 4000
	0000 3e42 3e02 0200
	0000 5c62 4040 4000
	0000 3e40 3c02 7c00
	0000 7e10 1010 0800
	0000 4242 4246 3a00
	0000 4242 2424 1800
	0000 4242 5252 6c00
	0000 4242 3c42 4200
	0000 4242 3e02 7c00
	0000 7e04 1820 7e00 

	000c 0810 1008 0c00
	0008 0808 0808 0800 
	0030 1008 0810 3000
	0000 0032 4c00 0000 
	3c42 99a1 a199 423c
