( Orca )

~src/utils.tal

%DATA-CELLS { #b000 }
%DATA-LOCKS { #c000 }
%DATA-TYPES { #d000 }

%LOCKED-TYPE   { #01 } %PORTEL-TYPE   { #02 }
%OPERATOR-TYPE { #03 } %PORTER-TYPE   { #04 }
%OUTPUT-TYPE   { #05 } %IO-TYPE       { #07 }

%ABOVE { #00 .grid/width LDZ -- }
%BELOW { #00 .grid/width LDZ ++ }
%LENGTH { #00 .grid/height LDZ #00 .grid/width LDZ ** }

%IS-CHAR-KEY { STHk #20 > STHr #7b < AND }

%SET-STATE   { #01 .state/changed STZ ;draw-state JSR2 }
%RESET-STATE { #00 .state/changed STZ ;draw-state JSR2 }
%RESET-SELECTION { .selection/from LDZ2 ;set-selection-from JSR2 }
%RESET-INSERT { #00 .selection/insert STZ }

( helpers )

%GET-CHAR  { #24 MOD #00 SWP ;b36clc ++ LDA } ( b36 -- char )
%GET-VALUE { #20 - #00 SWP ;values ++ LDA } ( char -- b36 )
%GET-NOTE  { DUP GET-VALUE SWP IS-UC #24 * + TOS ;lc-notes ++ LDA } ( char -- midi )
%GET-CELL  { DATA-CELLS ++ LDA } ( cell* -- type )
%SET-CELL  { DATA-CELLS ++ STA } ( type cell* -- )
%GET-LOCK  { DATA-LOCKS ++ LDA } ( cell* -- type )
%SET-LOCK  { DATA-LOCKS ++ STA } ( type cell* -- )
%GET-TYPE  { DATA-TYPES ++ LDA } ( cell* -- type )
%SET-TYPE  { DATA-TYPES ++ STA } ( type cell* -- )

( devices )

|00 @System     &vector $2 &pad      $6 &r      $2 &g     $2 &b      $2
|10 @Console    &vector $2 &read     $1 &pad    $5 &write $1
|20 @Screen     &vector $2 &width $2 &height $2 &auto $1 &pad $1 &x $2 &y $2 &addr $2 &pixel $1 &sprite $1
|30 @Audio0     &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr  $2 &volume $1 &pitch $1
|40 @Audio1     &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr  $2 &volume $1 &pitch $1
|50 @Audio2     &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr  $2 &volume $1 &pitch $1
|60 @Audio3     &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr  $2 &volume $1 &pitch $1
|80 @Controller &vector $2 &button   $1 &key    $1
|90 @Mouse      &vector $2 &x        $2 &y      $2 &state $1 &chord  $1
|a0 @File       &vector $2 &success  $2 &stat   $2 &delete $1 &append $1 &name  $2 &length $2 &read $2 &write $2
|b0 @DateTime   &year   $2 &month    $1 &day    $1 &hour  $1 &minute $1 &second $1 &dotw $1 &doty $2 &isdst $1

( variables )

|0000

@dpad $1
	&last $1
@timer
	&beat $1 &speed $1 &playing $1 &frame $2
@state
	&timer $1 &changed $1
@guide $1
@filepath $40
@grid
	&x1 $2 &y1 $2
	&x2 $2 &y2 $2
	&size &width $1 &height $1
@selection
	&from &x1 $1 &y1 $1
	&to   &x2 $1 &y2 $1
	&insert $1
@cursor
	&x $2 &y $2
@toolbar
	&x1 $2 &y1 $2
	&x2 $2 &y2 $2
@head
	&x $1 &y $1 &addr $2
@variables $24

|0100

	( theme )
	#0f38 .System/r DEO2
	#0fc8 .System/g DEO2
	#0f98 .System/b DEO2

	( gobal yaddr )
	AUTO-YADDR

	( size )
	#02ca .Screen/width DEO2
	#01c0 .Screen/height DEO2

	( synths )
	#dd .Audio0/volume DEO  #0118 .Audio0/adsr DEO2 #0100 .Audio0/length DEO2
	#ce .Audio1/volume DEO  #0334 .Audio1/adsr DEO2 #0100 .Audio1/length DEO2
	#ec .Audio2/volume DEO  #1414 .Audio2/adsr DEO2 #0100 .Audio2/length DEO2
	#dd .Audio3/volume DEO  #222c .Audio3/adsr DEO2 #0100 .Audio3/length DEO2

	;sin-pcm .Audio0/addr DEO2
	;tri-pcm .Audio1/addr DEO2
	;saw-pcm .Audio2/addr DEO2
	;sqr-pcm .Audio3/addr DEO2

	( vectors )
	;untrap JSR2

	( set grid size )
	.Screen/width DEI2
		DUP2 8// NIP #03 - .grid/width STZ
		DUP2 2// .grid/width LDZ 2/ INC TOS 8** -- #0004 ++ .grid/x1 STZ2
		2// .grid/width LDZ 2/ TOS 8** ++ #0004 ++ .grid/x2 STZ2
	.Screen/height DEI2
		DUP2 10// NIP #03 - .grid/height STZ
		DUP2 2// .grid/height LDZ 2/ INC TOS 10** -- #0004 -- .grid/y1 STZ2
		2// .grid/height LDZ 2/ TOS 10** ++ #0008 -- .grid/y2 STZ2

	( set toolbar size )
	.grid/x1 LDZ2 .toolbar/x1 STZ2
	.grid/y2 LDZ2 #0010 ++ .toolbar/y1 STZ2
	.grid/x2 LDZ2 .toolbar/x2 STZ2
	.toolbar/y1 LDZ2 #0008 ++ .toolbar/y2 STZ2

	( init random )
	;prng-init JSR2
	( blank file )
	;new-file JSR2
	( theme support )
	;load-theme JSR2
	( default speed )
	#08 ;set-speed JSR2
	( select )
	#0000 ;set-selection-from JSR2
	( display guide )
	;toggle-guide JSR2
	( start )
	.timer/playing TOGGLE

BRK

@untrap ( -- )

	( vectors )
	;on-console .Console/vector DEO2
	;on-button .Controller/vector DEO2
	;on-mouse .Mouse/vector DEO2
	;on-frame .Screen/vector DEO2
	#01 ;draw-filepath JSR2
	RELEASE-MOUSE

RTN

@trap ( -- )

	( vectors )
	;on-button-trap .Controller/vector DEO2
	;on-mouse-trap .Mouse/vector DEO2
	;on-frame-trap .Screen/vector DEO2
	RELEASE-MOUSE

	( clear cursor )
	.cursor/x LDZ2 .Screen/x DEO2
	.cursor/y LDZ2 .Screen/y DEO2
	#40 .Screen/sprite DEO

RTN

@on-console ( -> )

	.Console/read DEI
	[ #11 ] !~ ,&no-u JCN #00ff #00 ;edit-selection JSR2 &no-u
	[ #12 ] !~ ,&no-d JCN #0001 #00 ;edit-selection JSR2 &no-d
	[ #13 ] !~ ,&no-l JCN #ff00 #00 ;edit-selection JSR2 &no-l
	[ #14 ] !~ ,&no-r JCN #0100 #00 ;edit-selection JSR2 &no-r
	DUP IS-CHAR-KEY #00 = ,&no-key JCN
		STHk .selection LDZ2 STHr ;set-cell JSR2
		&no-key
	POP

BRK

@on-frame-trap ( -> )

	.state/timer LDZ
	DUP 8MOD ,&no-blink JCN
		DUP 8/ 2MOD 8* INC ;draw-filepath JSR2
		&no-blink
	INC .state/timer STZ

BRK

@on-button-trap ( -> )

	#00 ;draw-filepath JSR2
	.Controller/key DEI STANDARD-LB ,capture-trap JSR
	#01 ;draw-filepath JSR2

BRK

@capture-trap ( button -- )

	DUP ,&no-null JCN POP RTN &no-null
	[ #08 ] !~ ,&no-pop JCN ;filepath ;spop JSR2 POP RTN &no-pop
	[ #0a ] !~ ,&no-load JCN ;load-file JSR2 &no-load
	[ #7f ] !~ ,&no-delete JCN ;filepath #0040 ;mclr JSR2 POP RTN &no-delete
	[ #20 ] >~ ,&no-special JCN ;untrap JSR2 POP RTN &no-special
	;filepath ;slen JSR2 NIP #3f = ,&no-push JCN
		DUP ;filepath ROT ;sput JSR2
		&no-push
	POP

RTN

@on-mouse-trap ( -> )

	( release trap on touch )
	.Mouse/state DEI #00 ! JMP BRK
	;untrap JSR2

BRK

@on-frame ( -> )

	( paused )
	.timer/playing LDZ JMP BRK
	( on beat )
	.timer LDZ2 ! ,&skip JCN
		;run JSR2
		.timer/frame LDZ2k INC2 ROT STZ2
		#00 .timer/beat STZ
		&skip
	( inc beat )
	.timer/beat LDZk INC SWP STZ

BRK

@on-button ( -> )

	( d-pad handler )
	.Controller/button DEI .dpad/last LDZ
	DUP2 #0200 == ;dpad-input/start JCN2
	DUP2 #0002 == ;dpad-input/end JCN2
	DUP #0f AND #02 = ;dpad-input/add JCN2
	POP ( pop last )
	.dpad/last STZ

	( modifier handlers )
	.Controller/button DEI #f0 AND ;on-button-arrow JCN2
	.Controller/button DEI #01 AND ;on-button-ctrl JCN2

	( default )
	.Controller/key DEI
	DUP #00 ! ,&no-null JCN
		POP BRK
		&no-null
	DUP #1b ! ,&no-escape JCN
		RESET-SELECTION
		RESET-INSERT
		POP BRK
		&no-escape
	DUP #20 ! ,&no-space JCN
		( insert mode )
		.selection/insert LDZ #00 = ,&no-space-insert JCN
			#01 #00 #00 ;edit-selection JSR2 POP BRK
			&no-space-insert
		;toggle-play JSR2
		POP BRK
		&no-space
	DUP #08 ! OVR #7f ! AND ,&no-backspace JCN
		( insert mode )
		.selection/insert LDZ #00 = ,&no-backspace-insert JCN
			#ff #00 #00 ;edit-selection JSR2
			&no-backspace-insert
		CHAR-DOT ;fill-selection JSR2
		POP BRK
		&no-backspace
	DUP IS-CHAR-KEY #00 = ,&no-key JCN
		.Controller/key DEI ;fill-selection JSR2
		( insert mode )
		.selection/insert LDZ #00 = ,&no-key-insert JCN
			#01 #00 #00 ;edit-selection JSR2
			&no-key-insert
		SET-STATE
		POP BRK
		&no-key
	POP

BRK

@on-button-ctrl ( -> )

	.Controller/key DEI
	( copy/paste/cut )
	[ LIT 'c ] !~ ,&no-copy JCN ;copy-snarf JSR2 &no-copy
	[ LIT 'v ] !~ ,&no-paste JCN ;paste-snarf JSR2 &no-paste
	[ LIT 'x ] !~ ,&no-cut JCN ;cut-snarf JSR2 &no-cut
	( new/rename/open/save )
	[ LIT 'n ] !~ ,&no-new JCN ;new-file JSR2 &no-new
	[ LIT 'r ] !~ ,&no-name JCN ;trap JSR2 &no-name
	[ LIT 'o ] !~ ,&no-open JCN ;load-file JSR2 &no-open
	[ LIT 's ] !~ ,&no-save JCN ;save-file JSR2 &no-save
	( select-all/insert )
	[ LIT 'a ] !~ ,&no-a JCN ;set-selection-all JSR2 &no-a
	[ LIT 'i ] !~ ,&no-i JCN ;toggle-insert JSR2 &no-i
	[ LIT 'h ] !~ ,&no-h JCN ;toggle-guide JSR2 &no-h
	( tempo )
	[ LIT ', ] !~ ,&no-slow JCN #ff ;mod-speed JSR2 &no-slow
	[ LIT '. ] !~ ,&no-fast JCN #01 ;mod-speed &no-fast
	POP

BRK

@on-button-arrow ( -> )

	( capture )
	.Controller/button DEI
	DUP #0f AND ,&mod STR
	#04 SFT #00 OVR #03 AND ;&vec ++ LDA ,&y STR
	#02 SFT #00 SWP #03 AND ;&vec ++ LDA ,&x STR
	[ LIT &x $1 ] [ LIT &y $1 ] [ LIT &mod $1 ] ;edit-selection JSR2

BRK
	&vec 00 ff 01

@on-mouse ( -> )

	( clear last cursor )
	.cursor/x LDZ2 .Screen/x DEO2
	.cursor/y LDZ2 .Screen/y DEO2
	#40 .Screen/sprite DEO
	( draw new cursor )
	.Mouse/x DEI2 DUP2 .cursor/x STZ2 .Screen/x DEO2
	.Mouse/y DEI2 DUP2 .cursor/y STZ2 .Screen/y DEO2
	;cursor-icn .Screen/addr DEO2
	#41 [ .Mouse/state DEI #00 ! 2* ] + .Screen/sprite DEO
	( route )
	.Mouse/y DEI2 .toolbar/y1 LDZ2 -- 10// #0000 ==
		;on-mouse-toolbar JCN2
	.Mouse/x DEI2 .Mouse/y DEI2 .grid ;within-rect JSR2
		;on-mouse-grid JCN2

BRK

@on-mouse-grid ( -> )

	.Mouse/state DEI [ LIT &last $1 ]
		DUP2 #0000 == ,&end JCN
		( on down )
		DUP2 #0100 !! ,&no-down JCN
			.Mouse/x DEI2 .grid/x1 LDZ2 -- 8// NIP
			.Mouse/y DEI2 .grid/y1 LDZ2 -- 10// NIP
				;set-selection-from JSR2
			,&end JMP
			&no-down
		( on release )
		.Mouse/x DEI2 .grid/x1 LDZ2 -- 8// NIP
		.Mouse/y DEI2 .grid/y1 LDZ2 -- 10// NIP
			;set-selection-to JSR2
	&end
	POP ,&last STR 

BRK

@on-mouse-toolbar ( -> )

	( skip ) .Mouse/state DEI BRK?

	( left-side )
	.Mouse/x DEI2 .grid/x1 LDZ2 -- 8// NIP
	[ #05 ] >~ ,&no-insert JCN ;toggle-insert JSR2 POP BRK &no-insert
	[ #09 ] >~ ,&no-pause JCN ;toggle-play JSR2 POP BRK &no-pause
	[ #0d ] >~ ,&no-speed JCN [ .Mouse/state DEI #01 = 2* #01 - ] ;mod-speed JSR2 RELEASE-MOUSE POP BRK &no-speed
	[ #0e ] >~ OVR .grid/width LDZ SWP - #06 > #0101 !! ,&no-rename JCN ;trap JSR2 &no-rename
	POP
	( right-side )
	.grid/x2 LDZ2 .Mouse/x DEI2 -- 8// NIP
	[ #00 ] !~ ,&no-save JCN ;save-file JSR2 &no-save
	[ #02 ] !~ ,&no-load JCN ;load-file JSR2 &no-load
	[ #03 ] !~ ,&no-name JCN ;new-file JSR2 &no-name
	[ #05 ] !~ ,&no-guide JCN ;toggle-guide JSR2 &no-guide
	POP
	RELEASE-MOUSE

BRK

( selection )

@set-selection-all ( -- )

	#0000 .grid/size LDZ2 ,set-selection-range JSR

RTN

@set-selection-from ( x y -- )

	DUP2 ,set-selection-range JSR

RTN

@set-selection-to ( x y -- )

	.selection/from LDZ2 SWP2

@set-selection-range ( from* to* -- )

	( from )
	SWP2 DUP2 .selection/from LDZ2 !! STH .selection/from STZ2
	( to )
	.selection/y1 LDZ MAX .grid/height LDZ DEC MIN STH
	.selection/x1 LDZ MAX .grid/width LDZ DEC MIN STHr
	DUP2 .selection/to LDZ2 !! STH .selection/to STZ2
	( TODO: skip redraw when unchanged )
	POP2r ( ADDr STHr #01 JCN RTN )
	( redraw )
	;draw-grid JSR2
	;draw-position JSR2
	( hide guide )
	.guide LDZ #00 = ,&no-guide JCN ;toggle-guide JSR2 &no-guide

RTN

@fill-selection ( char -- )

	STH
	.selection/y2 LDZ INC .selection/y1 LDZ
	&ver
		.selection/x2 LDZ INC .selection/x1 LDZ
		&hor
			( get ) GET-ITER ;get-index JSR2
			( set ) STHkr ROT ROT SET-CELL
			INC GTHk ,&hor JCN
		POP2
		INC GTHk ,&ver JCN
	POP2
	POPr
	SET-STATE
	;draw-grid JSR2

RTN

@edit-selection ( x y mod -- )

	( set modifiers )
	DUP
		#01 AND #00 ! ;&drag STA
		#04 AND #00 ! 2* ;&scale STA
	STH2
	;&drag LDA #00 = ,&no-drag-start JCN
		;cut-snarf JSR2
		&no-drag-start
	( y )
	STHkr #00 = ,&no-ver JCN
		( clamp ) STHkr #ff = .selection/y1 [ ,&scale LDR + ] LDZ #00 = AND ,&no-ver JCN
		.selection/y1 [ ,&scale LDR + ] LDZ STHkr +
			.selection/y1 [ ,&scale LDR + ] STZ
		,&scale LDR ,&no-ver JCN
			.selection/y2 LDZ STHkr + .selection/y2 STZ
		&no-ver POPr
	( x )
	STHkr #00 = ,&no-hor JCN
		( clamp ) STHkr #ff = .selection/x1 [ ,&scale LDR + ] LDZ #00 = AND ,&no-hor JCN
		.selection/x1 [ ,&scale LDR + ] LDZ STHkr +
			.selection/x1 [ ,&scale LDR + ] STZ
		,&scale LDR ,&no-hor JCN
			.selection/x2 LDZ STHkr + .selection/x2 STZ
		&no-hor POPr
	( clamp result )
	.selection/to LDZ2 ;set-selection-to JSR2
	( drag )
	,&drag LDR #00 = ,&no-drag-end JCN
		;paste-snarf JSR2
		&no-drag-end
	( hide guide )
	.guide LDZ #00 = ,&no-guide JCN #00 .guide STZ &no-guide

RTN
	&drag $1
	&scale $1

@mod-speed ( mod -- )

	.timer/speed LDZ +

@set-speed ( speed -- )

	#1f AND [ #04 MAX ] .timer/speed STZ
	#00 .timer/beat STZ
	;draw-speed JSR2

RTN

@toggle-insert ( -- )

	.selection/insert TOGGLE
	RELEASE-MOUSE
	;draw-position JSR2

RTN

@toggle-play ( -- )

	.timer/playing TOGGLE
	RELEASE-MOUSE
	;draw-timer JSR2

RTN

@toggle-guide ( -- )

	.guide TOGGLE
	;draw-grid JSR2
	.toolbar/y1 LDZ2 .Screen/y DEO2
	.grid/x2 LDZ2 #0030 -- .Screen/x DEO2
	;font/help [ #00 .guide LDZ 10** ] ++ #01 ;draw-sprite JSR2

RTN

( special )

@dpad-input ( -> )

	&start ( button* -> )
		POP
		#20 .dpad STZ
		;&save JMP2
	&end ( button* -> )
		POP
		.dpad LDZ #7f > ,&save JCN
		.dpad LDZ ;fill-selection JSR2
		SET-STATE
		RESET-SELECTION
		#00 .dpad STZ
		;draw-speed JSR2
		,&save JMP
	&add ( button* -> )
		#02 ! ,&save JCN
		DUP #04 SFT .dpad LDZ + #7f AND .dpad STZ
		,&save JMP
	&save ( -> )
		.dpad/last STZ
		;draw-dpad JSR2
	BRK

BRK

@run ( -- )

	( clear )
	DATA-LOCKS LENGTH STH2k ;mclr JSR2
	DATA-TYPES STH2r ;mclr JSR2
	;variables #0024 ;mclr JSR2
	( reset head ) LIT2r 0000
	.grid/height LDZ #00
	&ver
		DUP .head/y STZ
		.grid/width LDZ #00
		&hor
			DUP .head/x STZ
			STH2kr .head/addr STZ2
			STH2kr GET-CELL ,run-char JSR
			INC2r
			INC GTHk ,&hor JCN
		POP2
		INC GTHk ,&ver JCN
	POP2
	POP2r
	;draw-grid JSR2
	;draw-timer JSR2

RTN

@run-char ( x y char -- )

	( skip dot )
	DUP CHAR-DOT ! ,&no-dot JCN
		POP RTN
		&no-dot
	( skip numbers )
	DUP #30 < ,&no-num JCN
	DUP #39 > ,&no-num JCN
		POP RTN
		&no-num
	( skip locked )
	.head/addr LDZ2 GET-LOCK #00 = ,&no-locked JCN
		POP RTN
		&no-locked
	( lowercase )
	DUP #61 < ,&no-lc JCN
	DUP #7a > ,&no-lc JCN
		;get-bang JSR2 ,&run JCN
		POP RTN
		&no-lc
	( uppercase )
	DUP #41 < ,&no-uc JCN
	DUP #5a > ,&no-uc JCN
		&run
		.head/addr LDZ2 STH2k
		( set type ) OPERATOR-TYPE STH2r SET-TYPE
		( run ) ROT GET-VALUE #0a - 2* TOS ;op-table/func ++ LDA2 JMP2
		&no-uc
	( special )
	CHAR-BANG =~ ;op-bang/func JCN2
	CHAR-HASH =~ ;op-comment/func JCN2
	CHAR-SEMI =~ ;op-pitch/func JCN2
	CHAR-EQUAL =~ ;op-synth/func JCN2
	CHAR-COLON =~ ;op-midi/func JCN2
	CHAR-SLASH =~ ;op-byte/func JCN2
	POP
	( erase )
	CHAR-DOT .head/addr LDZ2 SET-CELL

RTN

( operations )

@set-cell ( x y c -- )

	ROT ROT ,get-index JSR SET-CELL

RTN

@get-index ( x y -- addr* )

	#00 SWP #00 .grid/width LDZ ** ROT #00 SWP ++

RTN

@get-bang ( -- bang )

	.head/addr LDZ2 DATA-CELLS ++ STH2
	STH2kr DEC2 LDA CHAR-BANG = ,&bang JCN
	STH2kr INC2 LDA CHAR-BANG = ,&bang JCN
	STH2kr ABOVE LDA CHAR-BANG = ,&bang JCN
	STH2kr BELOW LDA CHAR-BANG = ,&bang JCN
	POP2r #00 RTN
	&bang POP2r #01

RTN

@lerp ( rate target val -- val )

	DUP2 DIF STH
	( if rate > target )
	ROT DUP STHr < ,&skip JCN
		POP2 RTN
		&skip
	( target val rate )
	STH
	GTHk ,&no-below JCN
		NIP STHr SUB RTN
		&no-below
	NIP STHr ADD
	
RTN

@draw-dpad ( -- )

	.grid/x1 LDZ2 #0050 ++ .Screen/x DEO2
	.toolbar/y1 LDZ2 .Screen/y DEO2
	( number ) .dpad LDZ #04 ;draw-byte JSR2
	( space ) ;font #00 ;draw-sprite JSR2
	( icon ) .dpad LDZ #01 ;draw-char JSR2
	
RTN

@draw-position ( -- )

	.grid/x1 LDZ2 .Screen/x DEO2
	.toolbar/y1 LDZ2 .Screen/y DEO2
	( number )
	.selection/x1 LDZ #01 ;draw-byte JSR2
	.selection/y1 LDZ #01 ;draw-byte JSR2
	( icon )
	;font/selector .selection/insert LDZ TOS 10** ++
	#02 .selection/from LDZ2 .selection/to LDZ2 == +
		;draw-sprite JSR2

RTN

@draw-timer ( -- )

	.toolbar/y1 LDZ2 .Screen/y DEO2
	.grid/x1 LDZ2 #0030 ++ .Screen/x DEO2
	( value )
	.timer/frame INC LDZ #03 .timer/playing LDZ 2* - ;draw-byte JSR2
	( icon )
	;font/beat #03 .timer/frame INC LDZ #07 AND #00 = - ;draw-sprite JSR2

RTN

@draw-speed ( -- )

	.toolbar/y1 LDZ2 .Screen/y DEO2
	.grid/x1 LDZ2 #0050 ++ .Screen/x DEO2
	.timer/speed LDZ #01 ;draw-byte JSR2
	( t ) LIT 't #03 ;draw-char JSR2
	( h ) LIT 'h #03 ;draw-char JSR2

RTN

@draw-state ( -- )

	.toolbar/x2 LDZ2 #0008 -- .Screen/x DEO2
	.toolbar/y1 LDZ2 .Screen/y DEO2
	;font/save #01 .state/changed LDZ + ;draw-sprite JSR2

RTN

@draw-filepath ( color -- )

	STH
	.toolbar/y1 LDZ2 .Screen/y DEO2
	.toolbar/x1 LDZ2 #0078 ++ .Screen/x DEO2
	;filepath STHr ;draw-str JSR2

RTN

@redraw ( -- )

	;draw-grid JSR2

	( File )
	.grid/x2 LDZ2 #0020 -- .Screen/x DEO2
	.toolbar/y1 LDZ2 .Screen/y DEO2
	;font/load #01 ;draw-sprite JSR2
	;font/make #01 ;draw-sprite JSR2

RTN

@draw-grid ( -- )

	( reset head ) LIT2r 0000
	.grid/height LDZ #00
	&ver
		DUP .head/y STZ
		( x ) .grid/x1 LDZ2 .Screen/x DEO2
		( y ) DUP #00 SWP 10** [ .grid/y1 LDZ2 ++ ] .Screen/y DEO2
		.grid/width LDZ #00
		&hor
			DUP .head/x STZ
			STH2kr .head/addr STZ2
			,get-char JSR ,get-color JSR ;draw-char JSR2
			INC2r
			INC GTHk ,&hor JCN
		POP2
		INC GTHk ,&ver JCN
	POP2
	POP2r
	( draw guide overlay )
	.guide LDZ #00 = ,&no-guide JCN
		;draw-guide JSR2
		&no-guide

RTN

@get-color ( -- type )

	.head LDZ2 ;is-selected JSR2 ,&selected JCN
		.head/addr LDZ2 GET-TYPE TOS ;cell-styles ++ LDA RTN
	&selected
		#09

RTN

@get-char ( -- char )

	.head/addr LDZ2 GET-CELL
	DUP CHAR-DOT ! ,&no-bar JCN
		POP .head LDZ2
		DUP2 8MOD SWP 10MOD #0000 == ,&cross JCN
		DUP2 2MOD SWP 4MOD #0000 == ,&dot JCN
		DUP2 ,is-selected JSR ,&dot JCN
		.head/addr LDZ2 GET-TYPE ,&dot JCN
		POP2 #20
	&no-bar
	
RTN
	&cross POP2 LIT '+ RTN
	&dot POP2 LIT '. RTN

@is-selected ( x y -- bool )

	OVR .selection/x1 LDZ < ,&end JCN
	OVR .selection/x2 LDZ > ,&end JCN
	DUP .selection/y1 LDZ < ,&end JCN
	DUP .selection/y2 LDZ > ,&end JCN
		POP2 #01 RTN
	&end
	POP2 #00

RTN

@draw-guide ( -- )

	#0020 #0000
	&loop
		( x ) DUP2 #84 SFT2 .grid/x1 LDZ2 ++ #0020 ++ .Screen/x DEO2
		( y ) DUP2 #000f AND2 10** .grid/y1 LDZ2 ++ #0020 ++ .Screen/y DEO2
		DUP2 2** ;op-table/docs ++ LDA2
		( glyph ) LDAk #08 ;draw-char JSR2
		( space ) ;font #00 ;draw-sprite JSR2
		( text ) INC2 #01 ;draw-str JSR2
		INC2 GTH2k ,&loop JCN
	POP2 POP2

RTN

@draw-str ( str* color -- )

	STH
	&while
		LDAk STHkr ,draw-char JSR
		INC2 LDAk ,&while JCN
	POP2
	POPr

RTN

@draw-byte ( byte color -- )

	STH DUP
	#04 SFT GET-CHAR STHkr ,draw-char JSR
	#0f AND GET-CHAR STHr 

@draw-char ( char color -- )

	STH #20 - TOS 10** ;font ++ STHr 

@draw-sprite ( addr* color -- )
	
	STH .Screen/addr DEO2
	.Screen/y DEI2
	STHr .Screen/sprite DEOk DEO
	.Screen/y DEO2
	.Screen/x DEI2k #0008 ++ ROT DEO2

RTN

( file )

@new-file ( default* -- )

	#00 ;draw-filepath JSR2
	( clear variables )
	;variables #0024 ;mclr JSR2
	( clear cells/locks/types )
	DATA-CELLS LENGTH STH2k ;mclr JSR2
	DATA-LOCKS STH2kr ;mclr JSR2
	DATA-TYPES STH2r ;mclr JSR2
	( rename to untitled.txt )
	;filepath #0020 ;mclr JSR2
	;untitled-txt ;filepath #000d ;mcpy JSR2
	;draw-grid JSR2
	#01 ;draw-filepath JSR2
	RESET-STATE

RTN

@load-file ( -- )

	;filepath .File/name DEO2
	#0001 .File/length DEO2
	( x,y ) LIT2r 0000
	&stream
		;&b .File/read DEO2
		( write )
		;&b LDA IS-CHAR-KEY #00 = ,&invalid JCN
			OVRr STHr STHkr ;&b LDA ;set-cell JSR2
			&invalid
		( incr-x ) SWPr INCr SWPr
		( incr-y )
		;&b LDA #0a ! ,&no-lb JCN
			INCr NIPr LITr 00 SWPr
			&no-lb
		.File/success DEI2 #0000 !! ,&stream JCN
	POP2r
	;draw-grid JSR2
	RESET-STATE

RTN
	&b $1

@save-file ( -- )

	;filepath .File/name DEO2
	#0001 .File/length DEO2
	.grid/height LDZ #00
	&ver
		.grid/width LDZ #00
		&hor
			GET-ITER ;get-index JSR2 DATA-CELLS ++ .File/write DEO2
			INC GTHk ,&hor JCN
		POP2
		( linebreak ) ;&lb .File/write DEO2
		INC GTHk ,&ver JCN
	POP2
	RESET-STATE

RTN
	&lb 0a

( random )

@prng-init ( -- )

	( seed )
	#00 .DateTime/second DEI
	#00 .DateTime/minute DEI #60 SFT2 EOR2
	#00 .DateTime/hour   DEI #c0 SFT2 EOR2 ,prng/x STR2
	#00 .DateTime/hour   DEI #04 SFT2
	#00 .DateTime/day    DEI #10 SFT2 EOR2
	#00 .DateTime/month  DEI #60 SFT2 EOR2
		.DateTime/year  DEI2 #a0 SFT2 EOR2 ,prng/y STR2

RTN

@prng ( -- number* )

	LIT2 &x $2
	DUP2 #50 SFT2 EOR2
	DUP2 #03 SFT2 EOR2
	LIT2 &y $2 DUP2 ,&x STR2
	DUP2 #01 SFT2 EOR2 EOR2
	,&y STR2k POP

RTN

( theme )

@theme-txt ".theme $1

@load-theme ( -- )

	;theme-txt .File/name DEO2
	#0006 .File/length DEO2
	#fffa .File/read DEO2
	.File/success DEI2 #0006 !! ,&ignore JCN
		#fffa LDA2 .System/r DEO2
		#fffc LDA2 .System/g DEO2
		#fffe LDA2 .System/b DEO2
		&ignore
	;redraw JSR2

RTN

( snarf )

@snarf-txt ".snarf $1

@cut-snarf ( -- )

	,copy-snarf JSR
	CHAR-DOT ;fill-selection JSR2
	
RTN

@copy-snarf ( -- )

	;snarf-txt .File/name DEO2
	#0001 .File/length DEO2
	.selection/y2 LDZ INC .selection/y1 LDZ
	&ver
		.selection/x2 LDZ INC .selection/x1 LDZ
		&hor
			GET-ITER ;get-index JSR2 DATA-CELLS ++ .File/write DEO2
			INC GTHk ,&hor JCN
		POP2
		( linebreak ) ;&lb .File/write DEO2
		INC GTHk ,&ver JCN
	POP2
	;draw-grid JSR2

RTN
	&lb 0a

@paste-snarf ( -- )

	;snarf-txt .File/name DEO2
	#0001 .File/length DEO2
	( x,y ) LIT2r 0000
	&stream
		;&b .File/read DEO2
		( write )
		.selection/x1 LDZ OVRr STHr +
		.selection/y1 LDZ STHkr +
			;&b LDA ;set-cell JSR2
		( incr-x ) SWPr INCr SWPr
		( incr-y )
		;&b LDA #0a ! ,&no-lb JCN
			INCr NIPr LITr 00 SWPr
			&no-lb
		.File/success DEI2 #0000 !! ,&stream JCN
	POP2r
	;draw-grid JSR2

RTN
	&b $1

( string generics )

@slen ( str* -- len* )

	DUP2 ,scap JSR SWP2 --

RTN

@scap ( str* -- str-end* )

	LDAk #00 ! JMP RTN
	&while INC2 LDAk ,&while JCN

RTN

@sput ( str* char -- )

	ROT ROT ,scap JSR STA

RTN

@spop ( str* -- )

	LDAk ,&no-null JCN
		POP2 RTN &no-null
	#00 ROT ROT ,scap JSR #0001 -- STA

RTN

( memory generics )

@mclr ( addr* len* -- )

	OVR2 ++ SWP2
	&loop
		STH2k #00 STH2r STA
		INC2 GTH2k ,&loop JCN
	POP2 POP2

RTN

@mcpy ( src* dst* len* -- )

	SWP2 STH2
	OVR2 ++ SWP2
	&loop
		LDAk STH2kr STA INC2r
		INC2 GTH2k ,&loop JCN
	POP2 POP2
	POP2r

RTN

( generics )

@within-rect ( x* y* rect -- flag )

	STH
	( y < rect.y1 ) DUP2 STHkr #02 + LDZ2 << ,&skip JCN
	( y > rect.y2 ) DUP2 STHkr #06 + LDZ2 >> ,&skip JCN
	SWP2
	( x < rect.x1 ) DUP2 STHkr LDZ2 << ,&skip JCN
	( x > rect.x2 ) DUP2 STHkr #04 + LDZ2 >> ,&skip JCN
	POP2 POP2 POPr
	#01
RTN
	&skip
	POP2 POP2 POPr
	#00

RTN

@print-hex ( value* -- )
	
	SWP ,&byte JSR
	&byte ( byte -- )
		STHk #04 SFT ,&parse JSR #18 DEO
		STHr #0f AND ,&parse JSR #18 DEO
	RTN
	&parse ( byte -- char ) DUP #09 GTH ,&above JCN #30 + RTN
	&above #57 + RTN

RTN

~src/opcodes.tal
~src/assets.tal
