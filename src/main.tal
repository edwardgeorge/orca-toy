( Orca )

~src/utils.tal

%DATA-CELLS { #b000 }
%DATA-LOCKS { #c000 }
%DATA-TYPES { #d000 }

%LOCKED-TYPE   { #01 } %PORTEL-TYPE   { #02 }
%OPERATOR-TYPE { #03 } %PORTER-TYPE   { #04 }
%OUTPUT-TYPE   { #05 } %IO-TYPE       { #07 }

%ABOVE { #00 .grid/width LDZ -- }
%BELOW { #00 .grid/width LDZ ++ }

%IS-CHAR-KEY { STHk #20 > STHr #7b < AND }

%SET-STATE   { #01 .state/changed STZ ;draw-state JSR2 }
%RESET-STATE { #00 .state/changed STZ ;draw-state JSR2 }
%RESET-SELECTION { .selection/x1 LDZ2 ;set-selection-from JSR2 }
%RESET-INSERT { #00 .selection/insert STZ }

%GET-INDEX { #00 SWP #00 .grid/width LDZ ** ROT #00 SWP ++ } ( x y -- index )
%GET-CHAR  { #24 MOD #00 SWP ;b36clc ++ LDA } ( b36 -- char )
%GET-VALUE { #20 - #00 SWP ;values ++ LDA } ( char -- b36 )
%GET-NOTE  { DUP GET-VALUE SWP IS-UC #24 * + TOS ;lc-notes ++ LDA } ( char -- midi )

%GET-CELL  { GET-INDEX DATA-CELLS ++ LDA } ( x y -- char )
%SET-CELL  { ROT ROT GET-INDEX DATA-CELLS ++ STA } ( x y char -- )
%GET-TYPE  { GET-INDEX DATA-TYPES ++ LDA } ( x y -- type )
%SET-TYPE  { ROT ROT GET-INDEX DATA-TYPES ++ STA } ( x y type -- )
%GET-LOCK  { GET-INDEX DATA-LOCKS ++ LDA } ( x y -- type )
%SET-LOCK  { ROT ROT GET-INDEX DATA-LOCKS ++ STA } ( x y type -- )
%GET-PORT-LEFT  { DUP2 PORTEL-TYPE SET-TYPE GET-CELL GET-VALUE } ( x y -- char )
%GET-PORT-RIGHT { DUP2 PORTER-TYPE SET-TYPE DUP2 #01 SET-LOCK GET-CELL GET-VALUE } ( x y -- char )
%GET-PORT-RIGHT-RAW { DUP2 PORTER-TYPE SET-TYPE DUP2 #01 SET-LOCK GET-CELL } ( x y -- char )
%SET-PORT-OUTPUT { STH DUP2 OUTPUT-TYPE SET-TYPE DUP2 #01 SET-LOCK STHr SET-CELL } ( x y char -- )
%LOAD-CASE { GET-CELL IS-UC } ( x y -- uc )
%SAVE-CASE { DUP #60 > STHr 20* * - } ( char uc -- char )

( devices )

|00 @System     &vector $2 &pad      $6 &r      $2 &g     $2 &b      $2
|10 @Console    &vector $2 &read     $1 &pad    $5 &write $1
|20 @Screen     &vector $2 &width $2 &height $2 &auto $1 &pad $1 &x $2 &y $2 &addr $2 &pixel $1 &sprite $1
|30 @Audio0     &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr  $2 &volume $1 &pitch $1
|40 @Audio1     &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr  $2 &volume $1 &pitch $1
|50 @Audio2     &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr  $2 &volume $1 &pitch $1
|60 @Audio3     &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr  $2 &volume $1 &pitch $1
|80 @Controller &vector $2 &button   $1 &key    $1
|90 @Mouse      &vector $2 &x        $2 &y      $2 &state $1 &chord  $1
|a0 @File       &vector $2 &success  $2 &stat   $2 &delete $1 &append $1 &name  $2 &length $2 &read $2 &write $2
|b0 @DateTime   &year   $2 &month    $1 &day    $1 &hour  $1 &minute $1 &second $1 &dotw $1 &doty $2 &isdst $1

( variables )

|0000

@dpad $1
	&last $1
@timer
	&beat $1 &speed $1 &playing $1 &frame $2
@state
	&timer $1 &changed $1
@filepath $40
@selection
	&x1 $1 &y1 $1
	&x2 $1 &y2 $1
	&insert $1
@cursor
	&x $2 &y $2
	&last $1
@grid
	&x1 $2 &y1 $2
	&x2 $2 &y2 $2
	&width $1 &height $1
@toolbar
	&x1 $2 &y1 $2
	&x2 $2 &y2 $2
@head
	&x $1 &y $1 &addr $2
@variables $24

|0100

	( theme )
	#0f38 .System/r DEO2
	#0fc8 .System/g DEO2
	#0f98 .System/b DEO2

	( gobal yaddr )
	AUTO-YADDR

	( synths )
	#dd .Audio0/volume DEO  #0118 .Audio0/adsr DEO2 #0100 .Audio0/length DEO2
	#ce .Audio1/volume DEO  #0334 .Audio1/adsr DEO2 #0100 .Audio1/length DEO2
	#ec .Audio2/volume DEO  #1414 .Audio2/adsr DEO2 #0100 .Audio2/length DEO2
	#dd .Audio3/volume DEO  #222c .Audio3/adsr DEO2 #0100 .Audio3/length DEO2

	;sin-pcm .Audio0/addr DEO2
	;tri-pcm .Audio1/addr DEO2
	;saw-pcm .Audio2/addr DEO2
	;sqr-pcm .Audio3/addr DEO2

	( vectors )
	;untrap JSR2

	( set grid size )
	.Screen/width DEI2
		DUP2 8// NIP #03 - .grid/width STZ
		DUP2 2// .grid/width LDZ 2/ INC TOS 8** -- #0004 ++ .grid/x1 STZ2
		2// .grid/width LDZ 2/ TOS 8** ++ #0002 ++ .grid/x2 STZ2
	.Screen/height DEI2
		DUP2 10// NIP #03 - .grid/height STZ
		DUP2 2// .grid/height LDZ 2/ INC TOS 10** -- #0004 -- .grid/y1 STZ2
		2// .grid/height LDZ 2/ TOS 10** ++ #0008 -- .grid/y2 STZ2

	( set toolbar size )
	.grid/x1 LDZ2 .toolbar/x1 STZ2
	.grid/y2 LDZ2 #0010 ++ .toolbar/y1 STZ2
	.grid/x2 LDZ2 .toolbar/x2 STZ2
	.toolbar/y1 LDZ2 #0008 ++ .toolbar/y2 STZ2

	( init random )
	;prng-init JSR2
	( blank file )
	;new-file JSR2
	( theme support )
	;load-theme JSR2
	( default speed )
	#08 ;set-speed JSR2
	( start )
	.timer/playing TOGGLE

BRK

@untrap ( -- )

	( vectors )
	;on-console .Console/vector DEO2
	;on-button .Controller/vector DEO2
	;on-mouse .Mouse/vector DEO2
	;on-frame .Screen/vector DEO2
	RELEASE-MOUSE

RTN

@trap ( -- )

	( vectors )
	;on-button-trap .Controller/vector DEO2
	;on-mouse-trap .Mouse/vector DEO2
	;on-frame-trap .Screen/vector DEO2
	RELEASE-MOUSE

	( clear cursor )
	.cursor/x LDZ2 .Screen/x DEO2
	.cursor/y LDZ2 .Screen/y DEO2
	#40 .Screen/sprite DEO

RTN

@on-console ( -> )

	.Console/read DEI
	#11 !~ ,&no-u JCN #00ff #00 ;edit-selection JSR2 &no-u
	#12 !~ ,&no-d JCN #0001 #00 ;edit-selection JSR2 &no-d
	#13 !~ ,&no-l JCN #ff00 #00 ;edit-selection JSR2 &no-l
	#14 !~ ,&no-r JCN #0100 #00 ;edit-selection JSR2 &no-r
	DUP IS-CHAR-KEY #00 = ,&no-key JCN
		STHk .selection LDZ2 STHr SET-CELL
		&no-key
	POP

BRK

@on-frame-trap ( -> )

	.state/timer LDZ
	DUP 8MOD ,&no-blink JCN
		DUP 8/ 2MOD 8* INC ;draw-filepath JSR2
		&no-blink
	INC .state/timer STZ

BRK

@on-button-trap ( -> )

	#00 ;draw-filepath JSR2
	.Controller/key DEI STANDARD-LB ,capture-trap JSR
	#01 ;draw-filepath JSR2

BRK

@capture-trap ( button -- )

	DUP ,&no-null JCN POP RTN &no-null
	[ #08 ] !~ ,&no-pop JCN ;filepath ;spop JSR2 POP RTN &no-pop
	[ #0a ] !~ ,&no-load JCN ;load-file JSR2 &no-load
	[ #7f ] !~ ,&no-delete JCN ;filepath #0040 ;mclr JSR2 POP RTN &no-delete
	[ #20 ] >~ ,&no-special JCN ;untrap JSR2 POP RTN &no-special
	;filepath ;slen JSR2 NIP #3f = ,&no-push JCN
		DUP ;filepath ROT ;sput JSR2
		&no-push
	POP

RTN

@on-mouse-trap ( -> )

	( release trap on touch )
	.Mouse/state DEI BRK?

	;untrap JSR2

BRK

@on-frame ( -> )

	( paused )
	.timer/playing LDZ JMP BRK
	( inc beat )
	.timer/beat LDZk INC SWP STZ
	( on beat )
	.timer LDZ2 ! ,&skip JCN
		;run JSR2
		.timer/frame LDZ2k INC2 ROT STZ2
		#00 .timer/beat STZ
		&skip

BRK

@on-button ( -> )

	( d-pad handler )
	.Controller/button DEI .dpad/last LDZ
	DUP2 #0200 == ;dpad-input/start JCN2
	DUP2 #0002 == ;dpad-input/end JCN2
	DUP #0f AND #02 = ;dpad-input/add JCN2
	POP ( pop last )
	.dpad/last STZ

	( modifier handlers )
	.Controller/button DEI #f0 AND ;on-button-arrow JCN2
	.Controller/button DEI #01 AND ;on-button-ctrl JCN2

	( default )
	.Controller/key DEI
	DUP #00 ! ,&no-null JCN
		POP BRK
		&no-null
	DUP #20 ! ,&no-space JCN
		( insert mode )
		.selection/insert LDZ #00 = ,&no-space-insert JCN
			#01 #00 #00 ;edit-selection JSR2 POP BRK
			&no-space-insert
		;toggle-play JSR2
		POP BRK
		&no-space
	DUP #08 ! OVR #7f ! AND ,&no-backspace JCN
		( insert mode )
		.selection/insert LDZ #00 = ,&no-backspace-insert JCN
			#ff #00 #00 ;edit-selection JSR2
			&no-backspace-insert
		CHAR-DOT ;fill-selection JSR2
		;redraw JSR2
		POP BRK
		&no-backspace
	DUP #1b ! ,&no-escape JCN
		RESET-SELECTION
		RESET-INSERT
		POP BRK
		&no-escape
	DUP IS-CHAR-KEY #00 = ,&no-key JCN
		.Controller/key DEI ;fill-selection JSR2
		( insert mode )
		.selection/insert LDZ #00 = ,&no-key-insert JCN
			#01 #00 #00 ;edit-selection JSR2
			&no-key-insert
		SET-STATE
		;redraw JSR2
		POP BRK
		&no-key
	POP

BRK

@on-button-ctrl ( -> )

	.Controller/key DEI
	( copy/paste/cut )
	[ LIT 'c ] !~ ,&no-copy JCN ;copy-snarf JSR2 &no-copy
	[ LIT 'v ] !~ ,&no-paste JCN ;paste-snarf JSR2 &no-paste
	[ LIT 'x ] !~ ,&no-cut JCN ;cut-snarf JSR2 &no-cut
	( new/rename/open/save )
	[ LIT 'n ] !~ ,&no-new JCN ;new-file JSR2 &no-new
	[ LIT 'r ] !~ ,&no-name JCN ;trap JSR2 &no-name
	[ LIT 'o ] !~ ,&no-open JCN ;load-file JSR2 &no-open
	[ LIT 's ] !~ ,&no-save JCN ;save-file JSR2 &no-save
	( select-all/insert )
	[ LIT 'a ] !~ ,&no-expand JCN #0000 .grid/width LDZ2 ;set-selection JSR2 &no-expand
	[ LIT 'i ] !~ ,&no-insert JCN ;toggle-insert JSR2 &no-insert
	( tempo )
	[ LIT ', ] !~ ,&no-slow JCN .timer/speed LDZ #01 - ;set-speed JSR2 &no-slow
	[ LIT '. ] !~ ,&no-fast JCN .timer/speed LDZ INC ;set-speed &no-fast
	POP

BRK

@on-button-arrow ( -> )

	.Controller/button DEI
	DUP #f0 AND #10 ! ,&no-u JCN #00ff ROT ,&move JMP &no-u
	DUP #f0 AND #20 ! ,&no-d JCN #0001 ROT ,&move JMP &no-d
	DUP #f0 AND #40 ! ,&no-l JCN #ff00 ROT ,&move JMP &no-l
	DUP #f0 AND #80 ! ,&no-r JCN #0100 ROT ,&move JMP &no-r
	POP BRK
	&move
	;edit-selection JSR2
	;redraw JSR2

BRK

@on-mouse ( -> )

	( clear last cursor )
	.cursor/x LDZ2 .Screen/x DEO2
	.cursor/y LDZ2 .Screen/y DEO2
	#40 .Screen/sprite DEO

	( draw new cursor )
	.Mouse/x DEI2 DUP2 .cursor/x STZ2 .Screen/x DEO2
	.Mouse/y DEI2 DUP2 .cursor/y STZ2 .Screen/y DEO2
	;cursor-icn .Screen/addr DEO2
	#41 [ .Mouse/state DEI #00 ! 2* ] + .Screen/sprite DEO

	( route )
	.Mouse/y DEI2 .toolbar/y1 LDZ2 -- 10// #0000 ==
		;on-mouse-toolbar JCN2
	.Mouse/x DEI2 .Mouse/y DEI2 .grid ;within-rect JSR2
		;on-mouse-grid JCN2

	( release-record ) #0000 .Mouse/state DEO .cursor/last STZ

BRK

@on-mouse-grid ( -> )

	.Mouse/state DEI DUP .cursor/last LDZ
		DUP2 #0000 == ,&end JCN
		( on down )
		DUP2 #0100 !! ,&no-down JCN
			.Mouse/x DEI2 .grid/x1 LDZ2 -- 8// NIP
			.Mouse/y DEI2 .grid/y1 LDZ2 -- 10// NIP
				;set-selection-from JSR2
			,&end JMP
			&no-down
		( on release )
		.Mouse/x DEI2 .grid/x1 LDZ2 -- 8// NIP
		.Mouse/y DEI2 .grid/y1 LDZ2 -- 10// NIP
			;set-selection-to JSR2
	&end
	POP2
	.cursor/last STZ

BRK

@on-mouse-toolbar ( -> )

	( skip ) .Mouse/state DEI BRK?

	( left-side )
	.Mouse/x DEI2 .grid/x1 LDZ2 -- 8// NIP
	DUP #05 > ,&no-insert JCN ;toggle-insert JSR2 POP BRK &no-insert
	DUP #09 > ,&no-pause JCN ;toggle-play JSR2 POP BRK &no-pause
	DUP #0d > ,&no-speed JCN
		.timer/speed LDZ #01 +
			[ .Mouse/state DEI #01 ! #02 *   - ] ;set-speed JSR2
		RELEASE-MOUSE
		POP BRK
		&no-speed
	DUP #0f > OVR .grid/width LDZ SWP - #05 > #0101 !! ,&no-rename JCN
		;trap JSR2
		&no-rename
	POP

	( right-side )
	.grid/x2 LDZ2 .Mouse/x DEI2 -- 8// NIP
	[ #01 ] !~ ,&no-save JCN ;save-file JSR2 &no-save
	[ #02 ] !~ ,&no-load JCN ;load-file JSR2 &no-load
	[ #03 ] !~ ,&no-name JCN ;new-file JSR2 &no-name
	POP

	RELEASE-MOUSE

BRK

( general )

@set-selection-from ( x y -- )

	DUP2 ,set-selection JSR

RTN

@set-selection-to ( x y -- )

	.selection/x1 LDZ2 SWP2 ,set-selection JSR

RTN

@set-selection ( x y x2 y2 -- )

	( keep to over from )
	OVR2 OVR2 ROT MAX ROT ROT MAX SWP NIP2
	( changed ) LITr 00
	,clamp-position JSR
		DUP2 .selection/x2 LDZ2 !! JMP INCr
		.selection/x2 STZ2
	,clamp-position JSR
		DUP2 .selection/x1 LDZ2 !! JMP INCr
		.selection/x1 STZ2
	STHr #00 = ,&no-redraw JCN
		;redraw JSR2
		&no-redraw

RTN

@clamp-position ( x y -- x y )

	.grid/height LDZ #01 - MIN SWP .grid/width LDZ #01 - MIN SWP

RTN

@fill-selection ( char -- )

	STH
	.selection/y2 LDZ INC .selection/y1 LDZ
	&ver
		.selection/x2 LDZ INC .selection/x1 LDZ
		&hor
			( write char ) GET-ITER STHkr SET-CELL
			INC GTHk ,&hor JCN
		POP2
		INC GTHk ,&ver JCN
	POP2
	POPr
	SET-STATE

RTN

@edit-selection ( x y mod -- )

	( set modifiers )
	DUP
		#01 AND #00 ! ;&drag STA
		#04 AND #00 ! 2* ;&scale STA
	STH2
	;&drag LDA #00 = ,&no-drag-start JCN
		;copy-snarf JSR2
		CHAR-DOT ;fill-selection JSR2
		&no-drag-start
	( y )
	STHkr #00 = ,&no-ver JCN
		( clamp ) STHkr #ff = .selection/y1 [ ,&scale LDR + ] LDZ #00 = AND ,&no-ver JCN
		.selection/y1 [ ,&scale LDR + ] LDZ STHkr +
			.selection/y1 [ ,&scale LDR + ] STZ
		,&scale LDR ,&no-ver JCN
			.selection/y2 LDZ STHkr + .selection/y2 STZ
		&no-ver POPr
	( x )
	STHkr #00 = ,&no-hor JCN
		( clamp ) STHkr #ff = .selection/x1 [ ,&scale LDR + ] LDZ #00 = AND ,&no-hor JCN
		.selection/x1 [ ,&scale LDR + ] LDZ STHkr +
			.selection/x1 [ ,&scale LDR + ] STZ
		,&scale LDR ,&no-hor JCN
			.selection/x2 LDZ STHkr + .selection/x2 STZ
		&no-hor POPr
	( clamp result )
	.selection/x1 LDZ2 .selection/x2 LDZ2 ;set-selection JSR2
	( drag )
	,&drag LDR #00 = ,&no-drag-end JCN
		;paste-snarf JSR2
		&no-drag-end

RTN
	&drag $1
	&scale $1

@set-speed ( speed -- )

	( clamp )
	#1f AND [ #04 MAX ] .timer/speed STZ
	( reset timer )
	#00 .timer/beat STZ
	;redraw JSR2

RTN

@toggle-insert ( -- )

	.selection/insert TOGGLE
	RELEASE-MOUSE
	;redraw JSR2

RTN

@toggle-play ( -- )

	.timer/playing TOGGLE
	RELEASE-MOUSE
	;redraw JSR2

RTN

( special )

@dpad-input ( -> )

	&start ( button* -> )
		POP
		#20 .dpad STZ
		;&save JMP2
	&end ( button* -> )
		POP
		.dpad LDZ #7f > ,&save JCN
		.selection LDZ2 .dpad LDZ SET-CELL
		SET-STATE
		RESET-SELECTION
		#00 .dpad STZ
		,&save JMP
	&add ( button* -> )
		#02 ! ,&save JCN
		DUP #04 SFT .dpad LDZ + #7f AND .dpad STZ
		,&save JMP
	&save ( -> )
		.dpad/last STZ
		;redraw JSR2
	BRK

BRK

@run ( -- )

	( clear lock/types/variables )
	#00 .grid/height LDZ #00 .grid/width LDZ ** STH2
	DATA-LOCKS STH2kr ;mclr JSR2
	DATA-TYPES STH2r ;mclr JSR2
	;variables #0024 ;mclr JSR2
	( ref to head for quick access )
	#0000 .head/addr STZ2
	( do )
	.grid/height LDZ #00
	&ver
		DUP .head/y STZ
		.grid/width LDZ #00
		&hor
			DUP .head/x STZ
			( x,y ) .head LDZ2
			( character ) .head/addr LDZ2 DATA-CELLS ++ LDA
				,run-char JSR
			.head/addr LDZ2k INC2 ROT STZ2
			INC GTHk ,&hor JCN
		POP2
		INC GTHk ,&ver JCN
	POP2
	;redraw JSR2

RTN

@run-char ( x y char -- )

	( skip dot )
	DUP CHAR-DOT ! ,&not-dot JCN
		POP POP2 RTN
		&not-dot
	( skip locked )
	.head/addr LDZ2 DATA-LOCKS ++ LDA #00 = ,&not-locked JCN
		POP POP2 RTN
		&not-locked
	( skip numbers )
	DUP #30 < ,&no-num JCN
	DUP #39 > ,&no-num JCN
		POP POP2 RTN
		&no-num
	( lowercase )
	DUP #61 < ,&no-lc JCN
	DUP #7a > ,&no-lc JCN
		STH DUP2 ;get-bang JSR2 ,&run JCN
		POPr POP2 RTN
		&no-lc
	( uppercase )
	DUP #41 < ,&no-uc JCN
	DUP #5a > ,&no-uc JCN
		STH DUP2 OPERATOR-TYPE SET-TYPE &run STHr
		DUP GET-VALUE #0a - 2* TOS ;operations ++ LDA2 JMP2
		&no-uc
	( special )
	CHAR-BANG =~ ;op-bang JCN2
	CHAR-HASH =~ ;op-comment JCN2
	CHAR-SEMI =~ ;op-note JCN2
	CHAR-EQUAL =~ ;op-synth JCN2
	CHAR-COLON =~ ;op-midi JCN2
	CHAR-SLASH =~ ;op-byte JCN2
	( erase )
	POP CHAR-DOT SET-CELL

RTN

( operations )

@get-bang ( x y -- bang )

	DUP2 INC GET-CELL CHAR-BANG = ,&bang JCN
	DUP2 #01 - GET-CELL CHAR-BANG = ,&bang JCN
	DUP2 SWP INC SWP GET-CELL CHAR-BANG = ,&bang JCN
	DUP2 SWP #01 - SWP GET-CELL CHAR-BANG = ,&bang JCN
	POP2 #00 RTN
	&bang
		POP2 #01

RTN

@get-port-raw ( addr* -- value )

	( set type ) DUP2 PORTEL-TYPE ROT ROT DATA-TYPES ++ STA
	( get data ) DATA-CELLS ++ LDA

RTN

@set-port-output ( value addr* -- )

	( set lock ) DUP2 #01 ROT ROT DATA-LOCKS ++ STA
	( set type ) DUP2 OUTPUT-TYPE ROT ROT DATA-TYPES ++ STA
	( set data ) DATA-CELLS ++ STA

RTN

@set-port-raw ( value addr* -- )

	( set lock ) DUP2 #01 ROT ROT DATA-LOCKS ++ STA
	( set type ) DUP2 #00 ROT ROT DATA-TYPES ++ STA
	( set data ) DATA-CELLS ++ STA

RTN

@get-port-left-raw ( addr* -- value )

	( set type ) DUP2 PORTEL-TYPE ROT ROT DATA-TYPES ++ STA
	( get data ) DATA-CELLS ++ LDA

RTN

@get-port-left-value ( addr* -- value )

	( set type ) DUP2 PORTEL-TYPE ROT ROT DATA-TYPES ++ STA
	( get data ) DATA-CELLS ++ LDA GET-VALUE

RTN

@get-port-right-raw ( addr* -- value )

	( set lock ) DUP2 #01 ROT ROT DATA-LOCKS ++ STA
	( set type ) DUP2 PORTER-TYPE ROT ROT DATA-TYPES ++ STA
	( get data ) DATA-CELLS ++ LDA

RTN

@get-port-right-value ( addr* -- value )

	( set lock ) DUP2 #01 ROT ROT DATA-LOCKS ++ STA
	( set type ) DUP2 PORTER-TYPE ROT ROT DATA-TYPES ++ STA
	( get data ) DATA-CELLS ++ LDA GET-VALUE

RTN

( operators )

@operations
	:op-a :op-b :op-c :op-d :op-e :op-f :op-g :op-h
	:op-i :op-j :op-k :op-l :op-m :op-n :op-o :op-p
	:op-q :op-r :op-s :op-t :op-u :op-v :op-w :op-x
	:op-y :op-z

@op-a ( x y char -- )

	POP POP2
	.head/addr LDZ2 STH2k
	( a-val ) DEC2 ;get-port-left-value JSR2
	( b-raw ) STH2kr INC2 ;get-port-right-raw JSR2
		( get case ) DUP IS-UC ,&case STR
		( to value ) GET-VALUE
	( res ) +
	( set case ) GET-CHAR DUP #60 > [ LIT &case $1 ] AND 20* -
	( output ) STH2r BELOW ;set-port-output JSR2

RTN

@op-b ( x y char -- )

	POP POP2 
	.head/addr LDZ2 STH2k
	( get a ) DEC2 ;get-port-left-value JSR2
	( get b ) STH2kr INC2 ;get-port-right-raw JSR2
		( get case ) DUP IS-UC ,&case STR
		( to value ) GET-VALUE
	( res ) - DUP #80 < ,&bounce JCN #24 SWP - &bounce 
	( set case ) GET-CHAR DUP #60 > [ LIT &case $1 ] AND 20* -
	( output ) STH2r BELOW ;set-port-output JSR2

RTN

@op-c ( x y char -- )

	POP POP2 
	.head/addr LDZ2 STH2k
	( get rate ) DEC2 ;get-port-left-value JSR2 1MIN
	( get mod ) STH2kr INC2 ;get-port-right-raw JSR2
		( get case ) DUP IS-UC ,&case STR
		( to value ) GET-VALUE 1MIN
	( res ) TOS ROT TOS .timer/frame LDZ2 SWP2 // SWP2 MOD2 NIP
	( set case ) GET-CHAR DUP #60 > [ LIT &case $1 ] AND 20* -
	( output ) STH2r BELOW ;set-port-output JSR2

RTN

@op-d ( x y char -- )

	POP POP2 
	.head/addr LDZ2 STH2k
	( get rate ) DEC2 ;get-port-left-value JSR2 1MIN
	( get mod ) STH2kr INC2 ;get-port-right-value JSR2 1MIN
	( res ) * TOS .timer/frame LDZ2 SWP2 MOD2 #0000 ==
	( bang on equal ) #fc * CHAR-DOT +
	( output ) STH2r BELOW ;set-port-output JSR2

RTN

@op-e ( x y char -- )

	,&self STR POP 
	.head/addr LDZ2 STH2
	( wall ) INC .grid/width LDZ = ,&collide JCN
	( cell ) STH2kr INC2 DATA-CELLS ++ LDA CHAR-DOT ! ,&collide JCN
	( write new ) [ LIT &self $1 ] STH2kr INC2 ;set-port-raw JSR2
	( erase old ) CHAR-DOT STH2r ;set-port-raw JSR2
	RTN
	&collide
	( output ) CHAR-BANG STH2r ;set-port-output JSR2

RTN

@op-f ( x y char -- )

	POP POP2 
	.head/addr LDZ2 STH2k
	( get a ) DEC2 ;get-port-left-raw JSR2
	( get b ) STH2kr INC2 ;get-port-right-raw JSR2
	( bang on equal ) = [ #fc * CHAR-DOT +  ]
	( output ) STH2r BELOW ;set-port-output JSR2

RTN

@op-g ( x y char -- ) ( TODO )

	POP
	( get x ) DUP2 [ SWP #03 - SWP ] GET-PORT-LEFT STH
	( get y ) DUP2 [ SWP #02 - SWP ] GET-PORT-LEFT STH
	( get len ) DUP2 [ SWP #01 - SWP ] GET-PORT-LEFT 1MIN
	#00
	&loop
		( x+i+1,y ) STHk OVR2 STHr ROT + INC SWP
		DUP2 GET-PORT-RIGHT-RAW STH
		( unstash x,y ) ROTr STHkr ROTr STHkr ROTr
		( x0+x1-1,y0+y1+1 ) ROT + STH + #01 - STHr INC
		STHr SET-PORT-OUTPUT
		INC GTHk ;&loop JCN2
	POP2
	( clean ) POP2 POP2r

RTN

@op-h ( x y char -- )

	POP POP2
	( output ) .head/addr LDZ2 BELOW
	( set lock ) DUP2 #01 ROT ROT DATA-LOCKS ++ STA
	( set type ) OUTPUT-TYPE ROT ROT DATA-TYPES ++ STA

RTN

@op-i ( x y char -- )

	POP POP2
	.head/addr LDZ2 STH2k
	( step ) DEC2 ;get-port-left-value JSR2
	( mod ) STH2kr INC2 ;get-port-right-raw JSR2
		( get case ) DUP IS-UC ,&case STR
		( to value ) GET-VALUE 1MIN
	( res ) SWP STH2kr BELOW [ DATA-CELLS ++ LDA GET-VALUE ] + SWP MOD
	( set case ) GET-CHAR DUP #60 > [ LIT &case $1 ] AND 20* -
	( output ) STH2r BELOW ;set-port-output JSR2

RTN

@op-j ( x y char -- ) ( TODO: Wiring )

	POP POP2
	.head/addr LDZ2 STH2k
	( get above ) ABOVE ;get-port-raw JSR2
	( set below ) STH2r BELOW ;set-port-output JSR2

RTN

@op-k ( x y char -- )

	POP POP2
	.head/addr LDZ2 STH2k 
	DEC2 ;get-port-left-value JSR2 #00
	&loop
		DUP TOS STH2kr INC2 ++ STH2k ;get-port-right-raw JSR2 
		DUP CHAR-DOT = ,&skip JCN
			( load ) DUP GET-VALUE .variables + LDZ
			( save ) STH2kr BELOW ;set-port-output JSR2
			&skip
		POP
		POP2r
		INC GTHk ;&loop JCN2
	POP2
	POP2r

RTN

@op-l ( x y char -- )

	POP POP2 
	.head/addr LDZ2 STH2k
	( get a ) DEC2 ;get-port-left-value JSR2
	( get b ) STH2kr INC2 ;get-port-right-raw JSR2
		( get case ) DUP IS-UC ,&case STR
		( to value ) GET-VALUE
	( res ) LTHk JMP SWP POP
	( set case ) GET-CHAR DUP #60 > [ LIT &case $1 ] AND 20* -
	( output ) STH2r BELOW ;set-port-output JSR2

RTN

@op-m ( x y char -- )

	POP POP2 
	.head/addr LDZ2 STH2k
	( get a ) DEC2 ;get-port-left-value JSR2
	( get b ) STH2kr INC2 ;get-port-right-raw JSR2
		( get case ) DUP IS-UC ,&case STR
		( to value ) GET-VALUE
	( res ) *
	( set case ) GET-CHAR DUP #60 > [ LIT &case $1 ] AND 20* -
	( output ) STH2r BELOW ;set-port-output JSR2

RTN

@op-n ( x y char -- )

	,&self STR NIP 
	.head/addr LDZ2 STH2
	( wall ) DEC #ff = ,&collide JCN
	( cell ) STH2kr ABOVE DATA-CELLS ++ LDA CHAR-DOT ! ,&collide JCN
	( write new ) [ LIT &self $1 ] STH2kr ABOVE ;set-port-raw JSR2
	( erase old ) CHAR-DOT STH2r ;set-port-raw JSR2
	RTN
	&collide
	( output ) CHAR-BANG STH2r ;set-port-output JSR2

RTN

@op-o ( x y char -- )

	POP POP2
	.head/addr LDZ2 STH2k
	( x ) STH2kr #0002 -- ;get-port-left-value JSR2 INC TOS ++
	( y ) STH2kr #0001 -- ;get-port-left-value JSR2 TOS #00 .grid/width LDZ ** ++
	( val ) ;get-port-right-raw JSR2
	( output ) STH2r BELOW ;set-port-output JSR2

RTN

@op-p ( x y char -- ) ( TODO )

	POP POP2
	.head/addr LDZ2 STH2k
	( key ) #0002 -- ;get-port-left-value JSR2
	( len ) STH2kr #0001 -- ;get-port-left-value JSR2 1MIN
	#00
	&loop
		#00 OVR STH2kr BELOW ++ STH2
		( lock ) #01 STH2kr DATA-LOCKS ++ STA
		( type ) LOCKED-TYPE STH2r DATA-TYPES ++ STA
		INC GTHk ,&loop JCN
	POP
	( read ) STH2kr INC2 ;get-port-right-raw JSR2
	( output ) ROT ROT MOD TOS STH2r BELOW ++ ;set-port-output JSR2

RTN

@op-q ( x y char -- ) ( TODO )

	POP
	( get x ) DUP2 [ SWP #03 - SWP ] GET-PORT-LEFT STH
	( get y ) DUP2 [ SWP #02 - SWP ] GET-PORT-LEFT STH
	( get len ) DUP2 [ SWP #01 - SWP ] GET-PORT-LEFT 1MIN
	#00
	&loop
		( x+i+1,y ) STHk OVR2 STHr ROT + INC SWP
		( x+x0,y+y0 ) STHkr + SWP OVRr STHr + SWP
		GET-PORT-RIGHT-RAW STH
		( x-i-len ) DUP2  - STH
		( x,y ) OVR2 SWP STHr - INC SWP INC
		STHr SET-PORT-OUTPUT
		 INC
		GTHk ;&loop JCN2
	POP2
	( clean ) POP2 POP2r

RTN

@op-r ( x y char -- )

	POP POP2
	.head/addr LDZ2 STH2k
	( a-min ) DEC2 ;get-port-left-value JSR2
	( b-max ) STH2kr INC2 ;get-port-right-raw JSR2
		( get case ) DUP IS-UC ,&case STR
		( to value ) GET-VALUE 1MIN
	( mod ) OVR - ;prng JSR2 + SWP MOD +
	( set case ) GET-CHAR DUP #60 > [ LIT &case $1 ] AND 20* -
	( output ) STH2r BELOW ;set-port-output JSR2

RTN

@op-s ( x y char -- )

	,&self STR NIP 
	.head/addr LDZ2 STH2
	( wall ) INC .grid/height LDZ = ,&collide JCN
	( cell ) STH2kr BELOW DATA-CELLS ++ LDA CHAR-DOT ! ,&collide JCN
	( write new ) [ LIT &self $1 ] STH2kr BELOW ;set-port-raw JSR2
	( erase old ) CHAR-DOT STH2r ;set-port-raw JSR2
	RTN
	&collide
	( output ) CHAR-BANG STH2r ;set-port-output JSR2

RTN

@op-t ( x y char -- )

	POP POP2
	.head/addr LDZ2 STH2k
	( key ) #0002 -- ;get-port-left-value JSR2
	( len ) STH2kr #0001 -- ;get-port-left-value JSR2 1MIN
	#00
	&loop
		#00 OVR STH2kr INC2 ++ STH2
		( lock ) #01 STH2kr DATA-LOCKS ++ STA
		( type ) LOCKED-TYPE STH2r DATA-TYPES ++ STA
		INC GTHk ,&loop JCN
	POP
	( read ) MOD TOS STH2kr INC2 ++ ;get-port-right-raw JSR2
	STH2r BELOW ;set-port-output JSR2

RTN

@op-u ( x y char -- )

	POP POP2
	.head/addr LDZ2 STH2k
	( step ) DEC2 ;get-port-left-value JSR2
	( max ) STH2kr INC2 ;get-port-right-value JSR2 1MIN STH2
	( frame + max - 1 ) .timer/frame LDZ2 STHkr TOS ++ DEC2
	( * step ) OVRr STHr TOS **
	( % max ) STHkr TOS MOD2
	( + step ) SWPr STHr TOS ++
	( bucket >= max ) STHr TOS << #01 !
	( bang if equal ) #fc * CHAR-DOT +
	STH2r BELOW ;set-port-output JSR2

RTN

@op-v ( x y char -- )

	POP POP2
	.head/addr LDZ2 STH2k
	( key ) DEC2 ;get-port-left-raw JSR2 
	( val ) STH2kr INC2 ;get-port-right-raw JSR2
	DUP CHAR-DOT = ,&idle JCN
	OVR GET-VALUE ,&save JCN
	( load ) 
		NIP GET-VALUE .variables + LDZ STH2r BELOW ;set-port-output JSR2 RTN
	&save
		SWP GET-VALUE .variables + STZ POP2r RTN
	&idle
		POP2 POP2r

RTN

@op-w ( x y char -- )

	,&self STR POP 
	.head/addr LDZ2 STH2
	( wall ) DEC #ff = ,&collide JCN
	( cell ) STH2kr DEC2 DATA-CELLS ++ LDA CHAR-DOT ! ,&collide JCN
	( write new ) [ LIT &self $1 ] STH2kr DEC2 ;set-port-raw JSR2
	( erase old ) CHAR-DOT STH2r ;set-port-raw JSR2
	RTN
	&collide
	( output ) CHAR-BANG STH2r ;set-port-output JSR2

RTN

@op-x ( x y char -- )

	POP POP2
	.head/addr LDZ2 STH2k
	( x ) STH2kr #0002 -- ;get-port-left-value JSR2 TOS ++
	( y ) STH2kr #0001 -- ;get-port-left-value JSR2 INC TOS #00 .grid/width LDZ ** ++
	( val ) STH2r INC2 ;get-port-right-raw JSR2
	( output ) ROT ROT ;set-port-output JSR2

RTN

@op-y ( x y char -- ) ( TODO: Wiring )

	POP POP2
	.head/addr LDZ2 STH2k
	( get left ) DEC2 ;get-port-raw JSR2
	( set right ) STH2r INC2 ;set-port-output JSR2

RTN

@op-z ( x y char -- ) ( TODO )

	POP
	( get case ) DUP2 [ SWP INC SWP ] LOAD-CASE STH
	( get rate ) DUP2 [ SWP #01 - SWP ] GET-PORT-LEFT STH
	( get target ) DUP2 [ SWP INC SWP ] GET-PORT-RIGHT STH
	( incr y ) INC
	( get val ) DUP2 GET-CELL GET-VALUE STH
	EQUkr STHr ,&end JCN
	LTHkr STHr #00 ! ,&no-below JCN
		( val rate + ) STHr OVRr STH SWPr ADDr
		( clamp ) GTHkr STHr SWPr?
		,&end JMP
		&no-below
	GTHkr STHr #00 ! ,&no-above JCN
		( val rate - ) STHr OVRr STH SWPr SUBr
		( clamp ) LTHkr STHr SWPr?
		&no-above
	&end
	STHr GET-CHAR POP2r SAVE-CASE SET-PORT-OUTPUT

RTN

@op-bang ( x y char -- )

	POP
	CHAR-DOT SET-CELL

RTN

@op-comment ( x y char -- )

	POP
	STH
	.grid/width LDZ SWP INC
	&loop
		DUP STHkr
		( lock )  DUP2 #01 SET-LOCK
		( close ) DUP2 GET-CELL CHAR-HASH = ,&end JCN
		( type )  LOCKED-TYPE SET-TYPE
		INC GTHk ,&loop JCN
	POP2 POPr
	RTN
	&end
	POP2 POP2 POPr

RTN

@op-synth ( x y char -- )

	POP
	( get channel ) DUP2 [ SWP INC SWP ] GET-PORT-RIGHT STH
	( get octave ) DUP2 [ SWP #02 + SWP ] GET-PORT-RIGHT [ #0c * ] STH
	( get note ) DUP2 [ SWP #03 + SWP ] GET-PORT-RIGHT-RAW
		( req note ) DUP CHAR-DOT ! ,&is-active JCN [ POP POP2 POP2r RTN ] &is-active GET-NOTE STH ADDr
	( req bang ) DUP2 ;get-bang JSR2 ,&is-bang [ JCN POP2 POP2r RTN ] &is-bang
	STHr .Audio0/pitch STHr 4MOD 10* + DEO
	IO-TYPE SET-TYPE

RTN

@op-midi ( x y char -- )

	POP
	( get channel ) DUP2 [ SWP INC SWP ] GET-PORT-RIGHT STH
	( get octave ) DUP2 [ SWP #02 + SWP ] GET-PORT-RIGHT [ #0c * ] STH
	( get note ) DUP2 [ SWP #03 + SWP ] GET-PORT-RIGHT-RAW
		( req note ) DUP CHAR-DOT ! ,&is-active JCN [ POP POP2 POP2r RTN ] &is-active GET-NOTE STH
	( req bang ) DUP2 ;get-bang JSR2 ,&is-bang JCN [ POP2 POP2r POPr RTN ] &is-bang
	IO-TYPE SET-TYPE
	ADDr
	( note on ) OVRr STHr .Console/write DEO STHkr .Console/write DEO #7f .Console/write DEO
	( note off ) OVRr STHr .Console/write DEO STHkr .Console/write DEO #00 .Console/write DEO
	POP2r

RTN

@op-note ( x y char -- )

	POP
	DUP2
		;get-bang JSR2 STH
		GET-INDEX STH2k
	( get a ) INC2 ;get-port-right-value JSR2
	( get b ) STH2kr INC2 INC2 ;get-port-right-value JSR2
	( req bang ) ROTr STHr ,&is-bang JCN [ POP2 POP2r RTN ] &is-bang
	( set type ) STH2r IO-TYPE ROT ROT DATA-TYPES ++ STA
	( send note ) SWP #0c * + .Console/write DEO

RTN

@op-byte ( x y char -- )

	POP
	DUP2
		;get-bang JSR2 STH
		GET-INDEX STH2k
	( get a ) INC2 ;get-port-right-value JSR2
	( get b ) STH2kr INC2 INC2 ;get-port-right-value JSR2
	( req bang ) ROTr STHr ,&is-bang JCN [ POP2 POP2r RTN ] &is-bang
	( set type ) STH2r IO-TYPE ROT ROT DATA-TYPES ++ STA
	( write byte ) #0f AND SWP #0f AND #40 SFT + .Console/write DEO

RTN

@draw-toolbar ( -- )

	.toolbar/y1 LDZ2 .Screen/y DEO2

	( Positions )
	.grid/x1 LDZ2 .Screen/x DEO2
	.selection/x1 LDZ #01 ;draw-byte JSR2
	.grid/x1 LDZ2 #0010 ++ .Screen/x DEO2
	.selection/y1 LDZ #01 ;draw-byte JSR2

	.grid/x1 LDZ2 #0020 ++ .Screen/x DEO2
	;font/selector .selection/insert LDZ TOS 10** ++
		#02 .selection/x1 LDZ2 .selection/x2 LDZ2 == +
		;draw-sprite JSR2

	( Frame )
	.grid/x1 LDZ2 #0030 ++ .Screen/x DEO2
	.timer/frame INC LDZ #01 ;draw-byte JSR2

	.grid/x1 LDZ2 #0040 ++ .Screen/x DEO2
	;font/beat
		#03 .timer/frame INC LDZ #07 AND #00 = -
		;draw-sprite JSR2

	( d-pad )
	.dpad LDZ DUP #20 < ,&no-dpad JCN
		.grid/x1 LDZ2 #0050 ++ STH2k .Screen/x DEO2
		DUP #04 ;draw-byte JSR2
		STH2kr #0010 ++ .Screen/x DEO2
		;font #00 ;draw-sprite JSR2
		STH2r #0018 ++ .Screen/x DEO2
		.dpad LDZ #01 ;draw-char JSR2
		,&continue JMP
		&no-dpad
	( Speed )
	.grid/x1 LDZ2 #0050 ++ .Screen/x DEO2
	.timer/speed LDZ #01 ;draw-byte JSR2
	.grid/x1 LDZ2 #0060 ++ .Screen/x DEO2
	( t ) LIT 't #03 ;draw-char JSR2
	.grid/x1 LDZ2 #0068 ++ .Screen/x DEO2
	( h ) LIT 'h #03 ;draw-char JSR2
	&continue
	POP

	( File )
	.grid/x2 LDZ2 STH2k #0018 -- .Screen/x DEO2
	;font/load #01 ;draw-sprite JSR2
	STH2r #0020 -- .Screen/x DEO2
	;font/make #01 ;draw-sprite JSR2

	( filepath )
	#03 ;draw-filepath JSR2

RTN

@draw-state ( -- )

	.toolbar/x2 LDZ2 #0008 -- .Screen/x DEO2
	.toolbar/y1 LDZ2 .Screen/y DEO2
	;font/save #01 .state/changed LDZ + ;draw-sprite JSR2

RTN

@draw-filepath ( color -- )

	STH
	.toolbar/y1 LDZ2 .Screen/y DEO2
	.toolbar/x1 LDZ2 #0078 ++ .Screen/x DEO2
	;filepath STHr ;draw-str JSR2

RTN

@redraw ( -- )

	.grid/height LDZ #00
	&ver
		( x ) .grid/x1 LDZ2 .Screen/x DEO2
		( y ) DUP #00 SWP 10** [ .grid/y1 LDZ2 ++ ] .Screen/y DEO2
		.grid/width LDZ #00
		&hor
			GET-ITER STH2k ,get-char JSR STH2r ,get-color JSR ;draw-char JSR2
			INC GTHk ,&hor JCN
		POP2
		INC GTHk ,&ver JCN
	POP2
	;draw-toolbar JSR2

RTN

@get-color ( x y -- type )

	STH2k GET-TYPE #06 SWP
	STH2r ,is-selected JSR JMP SWP POP
		TOS ;cell-styles ++ LDA

RTN

@get-char ( x y -- char )

	DUP2 GET-CELL
	DUP CHAR-DOT ! ,&no-bar JCN
		POP
		DUP2 8MOD SWP 10MOD #0000 == ,&cross JCN
		DUP2 2MOD SWP 4MOD #0000 == ,&dot JCN
		DUP2 ,is-selected JSR ,&dot JCN
		DUP2 GET-TYPE ,&dot JCN
		POP2 #20 RTN
	&no-bar
	ROT ROT POP2

RTN
	&cross POP2 LIT '+ RTN
	&dot POP2 LIT '. RTN

@is-selected ( x y -- bool )

	OVR .selection/x1 LDZ < ,&end JCN
	OVR .selection/x2 LDZ > ,&end JCN
	DUP .selection/y1 LDZ < ,&end JCN
	DUP .selection/y2 LDZ > ,&end JCN
		POP2 #01 RTN
	&end
	POP2 #00

RTN

@draw-str ( str* color -- )

	STH
	&while
		LDAk STHkr ,draw-char JSR
		INC2 LDAk ,&while JCN
	POP2
	POPr

RTN

@draw-byte ( byte color -- )

	STH DUP
	#04 SFT GET-CHAR STHkr ,draw-char JSR
	#0f AND GET-CHAR STHr ,draw-char JSR

RTN

@draw-char ( char color -- )

	STH #20 - TOS 10** ;font ++ STHr ,draw-sprite JSR

RTN

@draw-sprite ( addr* color -- )
	
	STH .Screen/addr DEO2
	.Screen/y DEI2
	STHr .Screen/sprite DEOk DEO
	.Screen/y DEO2
	.Screen/x DEI2k #0008 ++ ROT DEO2

RTN

( file )

@new-file ( default* -- )

	#00 ;draw-filepath JSR2
	( clear variables )
	;variables #0024 ;mclr JSR2
	( clear cells/locks/types )
	#00 .grid/height LDZ #00 .grid/width LDZ ** STH2
		DATA-CELLS STH2kr ;mclr JSR2
		DATA-LOCKS STH2kr ;mclr JSR2
		DATA-TYPES STH2r ;mclr JSR2
	( rename to untitled.txt )
	;filepath #0020 ;mclr JSR2
	;untitled-txt ;filepath #000d ;mcpy JSR2
	;redraw JSR2
	RESET-STATE

RTN

@load-file ( -- )

	;filepath .File/name DEO2
	#0001 .File/length DEO2
	( x,y ) LIT2r 0000
	&stream
		;&b .File/read DEO2
		( write )
		;&b LDA IS-CHAR-KEY #00 = ,&invalid JCN
			OVRr STHr STHkr ;&b LDA SET-CELL
			&invalid
		( incr-x ) SWPr INCr SWPr
		( incr-y )
		;&b LDA #0a ! ,&no-lb JCN
			INCr NIPr LITr 00 SWPr
			&no-lb
		.File/success DEI2 #0000 !! ,&stream JCN
	POP2r
	;redraw JSR2
	RESET-STATE

RTN
	&b $1

@save-file ( -- )

	;filepath .File/name DEO2
	#0001 .File/length DEO2
	.grid/height LDZ #00
	&ver
		.grid/width LDZ #00
		&hor
			GET-ITER GET-INDEX DATA-CELLS ++ .File/write DEO2
			INC GTHk ,&hor JCN
		POP2
		( linebreak ) ;&lb .File/write DEO2
		INC GTHk ,&ver JCN
	POP2
	;redraw JSR2

RTN
	&lb 0a

( random )

@prng-init ( -- )

	( seed )
	#00 .DateTime/second DEI
	#00 .DateTime/minute DEI #60 SFT2 EOR2
	#00 .DateTime/hour   DEI #c0 SFT2 EOR2 ,prng/x STR2
	#00 .DateTime/hour   DEI #04 SFT2
	#00 .DateTime/day    DEI #10 SFT2 EOR2
	#00 .DateTime/month  DEI #60 SFT2 EOR2
		.DateTime/year  DEI2 #a0 SFT2 EOR2 ,prng/y STR2

RTN

@prng ( -- number* )

	LIT2 &x $2
	DUP2 #50 SFT2 EOR2
	DUP2 #03 SFT2 EOR2
	LIT2 &y $2 DUP2 ,&x STR2
	DUP2 #01 SFT2 EOR2 EOR2
	,&y STR2k POP

RTN

( theme )

@theme-txt ".theme $1

@load-theme ( -- )

	;theme-txt .File/name DEO2
	#0006 .File/length DEO2
	#fffa .File/read DEO2
	.File/success DEI2 #0006 !! ,&ignore JCN
		#fffa LDA2 .System/r DEO2
		#fffc LDA2 .System/g DEO2
		#fffe LDA2 .System/b DEO2
		&ignore
	;redraw JSR2

RTN

( snarf )

@snarf-txt ".snarf $1

@cut-snarf ( -- )

	,copy-snarf JSR
	CHAR-DOT ;fill-selection JSR2
	;redraw JSR2
	
RTN

@copy-snarf ( -- )

	;snarf-txt .File/name DEO2
	#0001 .File/length DEO2
	.selection/y2 LDZ INC .selection/y1 LDZ
	&ver
		.selection/x2 LDZ INC .selection/x1 LDZ
		&hor
			GET-ITER GET-INDEX DATA-CELLS ++ .File/write DEO2
			INC GTHk ,&hor JCN
		POP2
		( linebreak ) ;&lb .File/write DEO2
		INC GTHk ,&ver JCN
	POP2
	;redraw JSR2

RTN
	&lb 0a

@paste-snarf ( -- )

	;snarf-txt .File/name DEO2
	#0001 .File/length DEO2
	( x,y ) LIT2r 0000
	&stream
		;&b .File/read DEO2
		( write )
		;&b LDA IS-CHAR-KEY #00 = ,&invalid JCN
			.selection/x1 LDZ OVRr STHr +
			.selection/y1 LDZ STHkr +
				;&b LDA SET-CELL
			&invalid
		( incr-x ) SWPr INCr SWPr
		( incr-y )
		;&b LDA #0a ! ,&no-lb JCN
			INCr NIPr LITr 00 SWPr
			&no-lb
		.File/success DEI2 #0000 !! ,&stream JCN
	POP2r
	;redraw JSR2

RTN
	&b $1

( string generics )

@slen ( str* -- len* )

	DUP2 ,scap JSR SWP2 --

RTN

@scap ( str* -- str-end* )

	LDAk #00 ! JMP RTN
	&while INC2 LDAk ,&while JCN

RTN

@sput ( str* char -- )

	ROT ROT ,scap JSR STA

RTN

@spop ( str* -- )

	LDAk ,&no-null JCN
		POP2 RTN &no-null
	#00 ROT ROT ,scap JSR #0001 -- STA

RTN

( memory generics )

@mclr ( addr* len* -- )

	OVR2 ++ SWP2
	&loop
		STH2k #00 STH2r STA
		INC2 GTH2k ,&loop JCN
	POP2 POP2

RTN

@mcpy ( src* dst* len* -- )

	SWP2 STH2
	OVR2 ++ SWP2
	&loop
		LDAk STH2kr STA INC2r
		INC2 GTH2k ,&loop JCN
	POP2 POP2
	POP2r

RTN

( generics )

@within-rect ( x* y* rect -- flag )

	STH
	( y < rect.y1 ) DUP2 STHkr #02 + LDZ2 << ,&skip JCN
	( y > rect.y2 ) DUP2 STHkr #06 + LDZ2 >> ,&skip JCN
	SWP2
	( x < rect.x1 ) DUP2 STHkr LDZ2 << ,&skip JCN
	( x > rect.x2 ) DUP2 STHkr #04 + LDZ2 >> ,&skip JCN
	POP2 POP2 POPr
	#01
RTN
	&skip
	POP2 POP2 POPr
	#00

RTN

@print-hex ( value* -- )
	
	SWP ,&byte JSR
	&byte ( byte -- )
		STHk #04 SFT ,&parse JSR #18 DEO
		STHr #0f AND ,&parse JSR #18 DEO
	RTN
	&parse ( byte -- char ) DUP #09 GTH ,&above JCN #30 + RTN
	&above #57 + RTN

RTN

@untitled-txt  "untitled.orca $1

@lc-notes
	00 00 00 00 00 00 00 00
	00 00
	0a 0c 01 03 05 06 08 0a
	0c 0d 0f 11 12 14 16 18
	19 1b 1d 1e 20 22 24 25
	27 29

@uc-notes
	00 00 00 00 00 00 00 00
	00 00
	09 0b 00 02 04 05 07 09
	0b 0c 0e 10 11 13 15 17
	18 1a 1c 1d 1f 21 23 24
	26 28

@values ( char to b36 )
	00 00 00 00 00 00 00 00
	00 00 00 00 00 00 00 00
	00 01 02 03 04 05 06 07
	08 09 00 00 00 00 00 00
	00 0a 0b 0c 0d 0e 0f 10
	11 12 13 14 15 16 17 18
	19 1a 1b 1c 1d 1e 1f 20
	21 22 23 00 00 00 00 00
	00 0a 0b 0c 0d 0e 0f 10
	11 12 13 14 15 16 17 18
	19 1a 1b 1c 1d 1e 1f 20
	21 22 23 00 00 00 00 00

@b36clc ( b36 to char-lc )
	30 31 32 33 34 35 36 37
	38 39 61 62 63 64 65 66
	67 68 69 6a 6b 6c 6d 6e
	6f 70 71 72 73 74 75 76
	77 78 79 7a

@cell-styles
	03 ( 0 normal )
	03 ( 1 locked )
	01 ( 2 port-unlocked )
	04 ( 3 operator )
	02 ( 4 port-locked )
	08 ( 5 port-output )
	09 ( 6 selected )
	0c ( 7 io )

~src/assets.tal
