( Orca
	
	space - toggle play/pause
	backspace/delete - erase
	escape - deselect
	arrow - move
	shift+arrow - scale selection
	ctrl+, - speed down
	ctrl+. - speed up
	ctrl+arrow - drag selection
	ctrl+n - new
	ctrl+s - save
	ctrl+r - rename
	ctrl+o - open
	ctrl+c - copy
	ctrl+v - paste
	ctrl+x - cut
	alt - dpad controls
	ctrl+escape - toggle play/pause 

	TODO
		- z is looping over the limit
		- Snarf buffer support
		- Catch ports that overflow out of grid
		- Insert mode
		- Display on-screen guide )

%DATA-CELLS { #b000 }
%DATA-LOCKS { #c000 }
%DATA-TYPES { #d000 }
%DATA-FILE  { #e000 } ( file transfer )
%DATA-CLIP  { #f000 } ( copy/paste )

( == )

%+  { ADD } %-   { SUB }  %*  { MUL }  %/  { DIV }
%<  { LTH } %>   { GTH }  %=  { EQU }  %!  { NEQ }
%++ { ADD2 } %-- { SUB2 } %** { MUL2 } %// { DIV2 }
%<< { LTH2 } %>> { GTH2 } %== { EQU2 } %!! { NEQ2 }

%DEBUG  { ;print-hex JSR2 #0a .Console/write DEO }
%DEBUG2 { SWP ;print-hex JSR2 ;print-hex JSR2 #0a .Console/write DEO }

%8** { #30 SFT2 }    %8// { #03 SFT2 }
%TOB  { SWP POP }    %TOS  { #00 SWP }
%MOD  { DUP2 / * - } %MOD2 { OVR2 OVR2 // ** -- } 

%RTN  { JMP2r }
%BRK? { #01 JCN BRK } %RTN? { #01 JCN RTN }
%SWP? { #01 JCN SWP } %SWPr? { #01 JCN SWPr }

%LTSk { #80 + SWP #80 + > }

%1MIN { DUP #00 = + }

%TOGGLE { DUP LDZ #00 = SWP STZ }
%GET-ITER { OVR2 SWP POP OVR SWP }

%LOCKED-TYPE   { #01 } %PORTEL-TYPE   { #02 }
%OPERATOR-TYPE { #03 } %PORTER-TYPE   { #04 }
%OUTPUT-TYPE   { #05 } %IO-TYPE       { #07 }

%CHAR-NULL  { #00 } %CHAR-LINE  { #0a }
%CHAR-HASH  { #23 } %CHAR-BANG  { #2a }
%CHAR-DOT   { #2e } %CHAR-SLASH { #2f }  
%CHAR-COLON { #3a } %CHAR-EQUAL { #3d }

%IS-CHAR-KEY { STHk #20 > STHr #7b < #0101 == }
%CIUC { STHk #40 > STHr #5b < #0101 == } ( char -- flag )

%GET-CASE { GET-CELL CIUC STH } ( x y -- uc )
%SET-CASE { DUP #60 > STHr #20 * * - } ( char uc -- char )

%SET-STATE   { #01 .state/changed STZ ;draw-state JSR2 }
%RESET-STATE { #00 .state/changed STZ ;draw-state JSR2 }
%RESET-SELECTION { .selection/x1 LDZ .selection/x2 STZ .selection/y1 LDZ .selection/y2 STZ }
%RESET-INSERT { #00 .selection/insert STZ }

%GET-INDEX { #00 SWP #00 .grid/width LDZ ** ROT #00 SWP ++ } ( x y -- index )
%GET-CHAR  { #24 MOD #00 SWP ;b36clc ++ LDA } ( b36 -- char )
%GET-VALUE { #20 - #00 SWP ;values ++ LDA } ( char -- b36 )
%GET-NOTE  { DUP GET-VALUE SWP CIUC #24 * + TOS ;lc-notes ++ LDA } ( char -- midi )
%GET-CHAR-ADDR { #20 - TOS #0010 ** ;font ++ }

%GET-CELL  { GET-INDEX DATA-CELLS ++ LDA } ( x y -- char )
%SET-CELL  { ROT ROT GET-INDEX DATA-CELLS ++ STA } ( x y char -- )
%GET-TYPE  { GET-INDEX DATA-TYPES ++ LDA } ( x y -- type )
%SET-TYPE  { ROT ROT GET-INDEX DATA-TYPES ++ STA } ( x y type -- )
%GET-LOCK  { GET-INDEX DATA-LOCKS ++ LDA } ( x y -- type )
%SET-LOCK  { ROT ROT GET-INDEX DATA-LOCKS ++ STA } ( x y type -- )
%GET-PORT-LEFT  { DUP2 PORTEL-TYPE SET-TYPE GET-CELL GET-VALUE } ( x y -- char )
%GET-PORT-RIGHT { DUP2 PORTER-TYPE SET-TYPE DUP2 #01 SET-LOCK GET-CELL GET-VALUE } ( x y -- char )
%GET-PORT-RIGHT-RAW { DUP2 PORTER-TYPE SET-TYPE DUP2 #01 SET-LOCK GET-CELL } ( x y -- char )
%SET-PORT-OUTPUT { STH DUP2 OUTPUT-TYPE SET-TYPE DUP2 #01 SET-LOCK STHr SET-CELL } ( x y char -- )

( devices )

|00 @System     &vector $2 &pad      $6 &r      $2 &g     $2 &b      $2 
|10 @Console    &vector $2 &read     $1 &pad    $5 &write $1 
|20 @Screen     &vector $2 &width    $2 &height $2 &pad   $2 &x      $2 &y      $2 &addr  $2 &pixel  $1 &sprite $1 
|30 @Audio0     &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr  $2 &volume $1 &pitch $1 
|40 @Audio1     &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr  $2 &volume $1 &pitch $1 
|50 @Audio2     &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr  $2 &volume $1 &pitch $1 
|60 @Audio3     &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr  $2 &volume $1 &pitch $1 
|70 @Midi       &vector $2 &rchan    $1 &rnote  $1 &rvelo $1 &pad    $3 &wchan  $1 &wnote $1 &wvelo  $1
|80 @Controller &vector $2 &button   $1 &key    $1 
|90 @Mouse      &vector $2 &x        $2 &y      $2 &state $1 &chord  $1 
|a0 @File       &vector $2 &success  $2 &offset $2 &pad   $2 &name   $2 &length $2 &load $2 &save $2 
|b0 @DateTime   &year   $2 &month    $1 &day    $1 &hour  $1 &minute $1 &second $1 &dotw $1 &doty $2 &isdst $1 

( variables )

|0000

@state
	&timer $1
	&blink $1
	&changed $1
@timer
	&beat $1 
	&alive $1 
	&speed $1
	&frame $2 
	&seed $2
@path 
	&length $1
	&name $20
@grid
	&x1 $2
	&y1 $2
	&x2 $2
	&y2 $2
	&width $1 
	&height $1
@toolbar
	&x1 $2
	&y1 $2
	&x2 $2
	&y2 $2
@selection 
	&x1 $1 &y1 $1 
	&x2 $1 &y2 $1 
	&insert $1
@cursor
	&x $2 &y $2 &last $1
@variables
	$36
@dpad $1

|0100

	( theme ) 
	#0f35 .System/r DEO2 
	#0fc5 .System/g DEO2 
	#0f95 .System/b DEO2

	( synths )
	#dd .Audio0/volume DEO  #0118 .Audio0/adsr DEO2 #0100 .Audio0/length DEO2
	#ce .Audio1/volume DEO  #0334 .Audio1/adsr DEO2 #0100 .Audio1/length DEO2
	#ec .Audio2/volume DEO  #1414 .Audio2/adsr DEO2 #0100 .Audio2/length DEO2
	#dd .Audio3/volume DEO  #222c .Audio3/adsr DEO2 #0100 .Audio3/length DEO2

	;sin-pcm .Audio0/addr DEO2
	;tri-pcm .Audio1/addr DEO2
	;saw-pcm .Audio2/addr DEO2
	;sqr-pcm .Audio3/addr DEO2

	( vectors ) 
	;on-button .Controller/vector DEO2
	;on-mouse .Mouse/vector DEO2
	;on-frame .Screen/vector DEO2

	( set grid size )
	.Screen/width DEI2 
		DUP2 8// TOB #03 - .grid/width STZ
		DUP2 #0002 // .grid/width LDZ #02 / #01 + TOS 8** -- #0004 ++ .grid/x1 STZ2
		#0002 // .grid/width LDZ #02 / TOS 8** ++ #0002 ++ .grid/x2 STZ2
	.Screen/height DEI2 
		DUP2 #0010 // TOB #03 - .grid/height STZ
		DUP2 #0002 // .grid/height LDZ #02 / #01 + TOS #0010 ** -- #0004 -- .grid/y1 STZ2
		#0002 // .grid/height LDZ #02 / TOS #0010 ** ++ #0008 -- .grid/y2 STZ2

	( adjust for small sizes )
	.Screen/width DEI2 #0100 >> ,&hor-skip JCN
		#0000 .grid/x1 STZ2
		.Screen/width DEI2 DUP2 .grid/x2 STZ2 8// TOB .grid/width STZ
		&hor-skip
	.Screen/height DEI2 #0080 >> ,&ver-skip JCN
		#0000 .grid/y1 STZ2
		.Screen/height DEI2 DUP2 .grid/y2 STZ2 8// TOB .grid/height STZ
		&ver-skip

	( set toolbar size )
	.grid/x1 LDZ2 .toolbar/x1 STZ2
	.grid/y2 LDZ2 #0010 ++ .toolbar/y1 STZ2
	.grid/x2 LDZ2 .toolbar/x2 STZ2
	.toolbar/y1 LDZ2 #0008 ++ .toolbar/y2 STZ2

	( random seed )
	.DateTime/minute DEI2 SWP DUP2
		.DateTime/day DEI2 ++ ++
		#7131 **
		.timer/seed STZ2

	( blank variables )
	#24 #00
	&var
		DUP .variables + CHAR-DOT SWP STZ
		#01 + GTHk ,&var JCN
	POP2

	;untitled-txt ;new-file JSR2

	( start )
	;clear JSR2
	;init JSR2
	#08 .timer/speed STZ
	#01 .timer/alive STZ

	( theme support )
	;load-theme JSR2

BRK

@on-frame ( -> )

	( paused ) .timer/alive LDZ BRK?

	;draw-meter JSR2

	.timer/beat LDZ #01 + 
		DUP .timer/beat STZ 
		.timer/speed LDZ = BRK?

	.timer/frame LDZ2 #0001 ++ .timer/frame STZ2

	;run JSR2

	#00 .timer/beat STZ

BRK

@on-frame-trap ( -> )

	( incr ) .state/timer LDZ #01 + DUP .state/timer STZ 

	#08 ! ,&no-toggle JCN
		.state/blink TOGGLE
		#03 .state/blink LDZ #09 * + ;draw-filepath JSR2
		#00 .state/timer STZ 
		&no-toggle

BRK

@on-button ( -> )

	( d-pad handler )
	.Controller/button DEI ;&last LDA
	DUP2 #0200 == ;dpad-input/start JCN2
	DUP2 #0002 == ;dpad-input/end JCN2
	DUP #0f AND #02 = ;dpad-input/add JCN2
	POP ( pop last )
	DUP ;&last STA
	( normal routing )
	DUP #f0 AND ;&arrows JCN2 
	DUP #0f AND #01 = ;&control JCN2 
	DUP #09 ! ,&no-ctrl-escape JCN
		.timer/alive TOGGLE
		&no-ctrl-escape
	POP

	( default )
	.Controller/key DEI
	DUP #20 ! ,&no-space JCN
		.timer/alive TOGGLE
		.selection/insert LDZ #00 = ,&no-space-insert JCN
			.timer/alive TOGGLE
			#01 #00 #00 ;edit-selection JSR2 
			&no-space-insert
		;redraw JSR2 POP BRK 
		&no-space
	DUP #08 ! OVR #7f ! #0101 == ,&no-backspace JCN
		CHAR-DOT ;fill-selection JSR2 
		.selection/insert LDZ #00 = ,&no-backspace-insert JCN
			#ff #00 #00 ;edit-selection JSR2 
			&no-backspace-insert
		SET-STATE 
		;redraw JSR2 POP BRK 
		&no-backspace
	DUP #1b ! ,&no-escape JCN
		RESET-SELECTION 
		RESET-INSERT
		;redraw JSR2 POP BRK 
		&no-escape
	DUP IS-CHAR-KEY #00 = ,&no-key JCN
		.selection LDZ2 .Controller/key DEI SET-CELL
		.selection/insert LDZ #00 = ,&no-key-insert JCN
			#01 #00 #00 ;edit-selection JSR2 
			&no-key-insert
		SET-STATE 
		;redraw JSR2 POP BRK 
		&no-key
	POP BRK

	&control ( button -- )
		POP 
		.Controller/key DEI
		DUP [ LIT 'a ] ! ,&no-expand JCN
			#00 .selection/x1 STZ
			#00 .selection/y1 STZ
			.grid/width LDZ .selection/x2 STZ
			.grid/height LDZ .selection/y2 STZ
			;redraw JSR2 POP BRK 
			&no-expand
		DUP [ LIT 'c ] ! ,&no-copy JCN
			;copy-selection JSR2 
			;redraw JSR2 POP BRK 
			&no-copy
		DUP [ LIT 'v ] ! ,&no-paste JCN
			;paste-selection JSR2 RESET-SELECTION
			;redraw JSR2 POP BRK 
			&no-paste
		DUP [ LIT 'x ] ! ,&no-cut JCN
			;copy-selection JSR2 CHAR-DOT ;fill-selection JSR2 RESET-SELECTION
			;redraw JSR2 POP BRK 
			&no-cut
		DUP [ LIT 'o ] ! ,&no-open JCN
			;load-file JSR2
			;redraw JSR2 POP BRK 
			&no-open
		DUP [ LIT 'r ] ! ,&no-name JCN
			#00 ;draw-filepath JSR2 
			#52 ! ,&no-rename JCN
				#00 .path/length STZ
				#0000 .path/name STZ2
				&no-rename
			;on-frame-trap .Screen/vector DEO2
			;on-button-trap .Controller/vector DEO2
			BRK
			&no-name
		DUP [ LIT 's ] ! ,&no-save JCN
			;save-file JSR2 
			;redraw JSR2 POP BRK  
			&no-save
		DUP [ LIT 'n ] ! ,&no-new JCN
			#00 ;draw-filepath JSR2 ;untitled-txt ;new-file JSR2 
			;redraw JSR2 POP BRK 
			&no-new
		DUP [ LIT 'i ] ! ,&no-insert JCN
			.selection/insert TOGGLE
			;redraw JSR2 POP BRK
			&no-insert
		DUP #2c ! ,&no-slow JCN
			( clamp ) .timer/speed LDZ #03 < ,&no-slow JCN
			.timer/speed LDZ #01 - .timer/speed STZ
			#00 .timer/beat STZ
			;redraw JSR2 POP BRK
			&no-slow
		DUP #2e ! ,&no-fast JCN
			( clamp ) .timer/speed LDZ #15 > ,&no-fast JCN
			.timer/speed LDZ #01 + .timer/speed STZ
			#00 .timer/beat STZ
			;redraw JSR2 POP BRK
			&no-fast
		POP 
	BRK

	&arrows ( button -> )
		DUP #f0 AND #10 ! ,&no-up JCN    
			#00ff ROT ,&move JMP 
			&no-up
		DUP #f0 AND #20 ! ,&no-down JCN  
			#0001 ROT ,&move JMP 
			&no-down
		DUP #f0 AND #40 ! ,&no-left JCN  
			#ff00 ROT ,&move JMP 
			&no-left
		DUP #f0 AND #80 ! ,&no-right JCN 
			#0100 ROT ,&move JMP 
			&no-right
		POP BRK
		&move 
		;edit-selection JSR2 
		;redraw JSR2 
	BRK
	&last $1

BRK

@on-button-trap ( -> )

	.Controller/key DEI
	DUP ,&continue JCN
		POP BRK
		&continue
	DUP ( backspace ) #08 ! ,&no-edit-backspace JCN
		( clamp ) .path/length LDZ #00 = ,&edit-end JCN
		#00 ;draw-filepath JSR2
		.path/length LDZ #01 - STHk .path/length STZ
		#00 .path/name STHr + STZ
		#01 ;draw-filepath JSR2 POP BRK
		&no-edit-backspace
	DUP ( special ) #20 > ,&no-edit-enter JCN
		;on-frame .Screen/vector DEO2
		;on-button .Controller/vector DEO2
		#00 .state/blink STZ 
		#01 ;draw-filepath JSR2 POP BRK
		&no-edit-enter
	( clamp ) .path/length LDZ #1f = ,&edit-end JCN
	DUP .path/name .path/length LDZ STHk + STZ
	STHr #01 + STHk .path/length STZ
	#00 .path/name STHr + STZ
	#01 ;draw-filepath JSR2
	&edit-end
	POP

BRK

@on-mouse ( -> )
	
	( clear last cursor )
	.cursor/x LDZ2 .Screen/x DEO2
	.cursor/y LDZ2 .Screen/y DEO2
	#40 .Screen/sprite DEO

	( draw new cursor )
	.Mouse/x DEI2 DUP2 .cursor/x STZ2 .Screen/x DEO2
	.Mouse/y DEI2 DUP2 .cursor/y STZ2 .Screen/y DEO2
	;cursor-icn .Screen/addr DEO2
	#41 [ .Mouse/state DEI #00 ! #02 * ] + .Screen/sprite DEO 

	( route )
	.Mouse/y DEI2 .toolbar/y1 LDZ2 -- #0010 // #0000 == 
		;on-mouse-toolbar JCN2
	.Mouse/x DEI2 .Mouse/y DEI2 .grid ;within-rect JSR2
		;on-mouse-grid JCN2

	( release-record ) #0000 .Mouse/state DEO .cursor/last STZ
	
BRK

@on-mouse-grid ( -> )
	
	.Mouse/state DEI DUP .cursor/last LDZ 
		DUP2 #0000 == ,&end JCN
		DUP2 #0100 !! ,&no-down JCN
			.Mouse/x DEI2 .grid/x1 LDZ2 -- 8// TOB 
				DUP .selection/x1 STZ .selection/x2 STZ
			.Mouse/y DEI2 .grid/y1 LDZ2 -- #0010 // TOB 
				DUP .selection/y1 STZ .selection/y2 STZ
			;clamp-selection JSR2 ;redraw JSR2
			,&end JMP 
			&no-down
		( release )
		.Mouse/x DEI2 .grid/x1 LDZ2 -- 8// TOB .selection/x2 STZ
		.Mouse/y DEI2 .grid/y1 LDZ2 -- #0010 // TOB .selection/y2 STZ
		;clamp-selection JSR2 ;redraw JSR2
	&end
	POP2
	.cursor/last STZ

BRK

@on-mouse-toolbar ( -> )
	
	( skip ) .Mouse/state DEI BRK?

	( left-side )
	.Mouse/x DEI2 .grid/x1 LDZ2 -- 8// TOB 

	DUP #04 ! ,&no-insert JCN
		.selection/insert TOGGLE
		;redraw JSR2 
		&no-insert
	DUP #08 ! ,&no-pause JCN
		.timer/alive TOGGLE
		;redraw JSR2 
		&no-pause 
	DUP #0f > OVR .grid/width LDZ SWP - #05 > #0101 !! ,&no-rename JCN
		#00 ;draw-filepath JSR2 
		;on-frame-trap .Screen/vector DEO2
		;on-button-trap .Controller/vector DEO2
		&no-rename
	POP

	( right-side )
	.grid/x2 LDZ2 .Mouse/x DEI2 -- 8// TOB 
	DUP ,&no-save JCN
		;save-file JSR2 
		&no-save
	DUP #02 ! ,&no-load JCN
		;load-file JSR2
		;redraw JSR2 
		&no-load
	DUP #03 ! ,&no-name JCN
		#00 ;draw-filepath JSR2
		;untitled-txt ;new-file JSR2
		;redraw JSR2 
		&no-name
	POP

	( release ) #00 .Mouse/state DEO

BRK

( special )

@dpad-input ( -> )

	&start ( button* -> )
		POP
		#20 .dpad STZ
		,&save JMP
	&end ( button* -> )
		POP
		.dpad LDZ #7f > ,&save JCN
		.dpad LDZ #20 = ,&erase JCN
		.selection LDZ2 .dpad LDZ SET-CELL
		SET-STATE 
		#00 .dpad STZ
		,&save JMP
	&add ( button* -> )
		#02 ! ,&save JCN
		DUP #04 SFT .dpad LDZ + #7f AND .dpad STZ
		,&save JMP
	&erase ( -> )
		.selection LDZ2 CHAR-DOT SET-CELL SET-STATE 
		#00 .dpad STZ
	&save ( -> )
		;on-button/last STA
		;redraw JSR2 
	BRK

BRK

( operations )

@get-bang ( x y -- bang )

	DUP2 #01 + GET-CELL CHAR-BANG = ,&bang JCN
	DUP2 #01 - GET-CELL CHAR-BANG = ,&bang JCN
	DUP2 SWP #01 + SWP GET-CELL CHAR-BANG = ,&bang JCN
	DUP2 SWP #01 - SWP GET-CELL CHAR-BANG = ,&bang JCN
	POP2 #00 RTN
	&bang
		POP2 #01 

RTN

@get-cell-sprite ( x y -- addr* )
	
	DUP2 GET-CELL
	( if character is dot )
	DUP CHAR-DOT NEQ ,&no-bar JCN
		( check if x,y is grid )
		POP
		DUP2 #01 AND #00 = SWP #03 AND #00 = #0101 NEQ2 ,&no-marker4 JCN 
			POP2 ;font/marker RTN 
			&no-marker4
		DUP2 GET-TYPE #00 = ,&no-port JCN
			POP2 ;font/marker RTN 
			&no-port
		POP2 ;font RTN
	&no-bar
	STH POP2 STHr
	GET-CHAR-ADDR

RTN

( operators )

@op-a ( x y char -- )

	POP
	( get case ) DUP2 SWP #01 + SWP GET-CASE
	( get a ) DUP2 SWP #01 - SWP GET-PORT-LEFT STH
	( get b ) DUP2 SWP #01 + SWP GET-PORT-RIGHT STH
	( incr y ) #01 +
	( get result ) ADDr STHr 
	GET-CHAR SET-CASE SET-PORT-OUTPUT 

RTN

@op-b ( x y char -- )
	
	POP
	( get case ) DUP2 SWP #01 + SWP GET-CASE
	( get a ) DUP2 SWP #01 - SWP GET-PORT-LEFT STH
	( get b ) DUP2 SWP #01 + SWP GET-PORT-RIGHT STH
	( incr y ) #01 +
	( get result ) SUBr STHr
	( bounce ) DUP #80 < #04 JCN [ #24 SWP - ]
	GET-CHAR SET-CASE SET-PORT-OUTPUT 

RTN

@op-c ( x y char -- )
	
	POP
	( get case ) DUP2 SWP #01 + SWP GET-CASE
	( get rate ) DUP2 SWP #01 - SWP GET-PORT-LEFT 1MIN STH
	( get mod ) DUP2 SWP #01 + SWP GET-PORT-RIGHT 1MIN STH
	( incr y ) #01 +
	( get result ) SWPr .timer/frame LDZ2 STHr TOS // STHr TOS MOD2 TOB
	GET-CHAR SET-CASE SET-PORT-OUTPUT

RTN

@op-d ( x y char -- )

	POP
	( get rate ) DUP2 SWP #01 - SWP GET-PORT-LEFT 1MIN STH
	( get mod ) DUP2 SWP #01 + SWP GET-PORT-RIGHT 1MIN STH
	( incr y ) #01 +
	( get result ) .timer/frame LDZ2 MULr STHr TOS MOD2 #0000 ==
	( bang if equal ) #fc * CHAR-DOT + 
	SET-PORT-OUTPUT
	
RTN

@op-e ( x y char -- )

	STH
	( hit edge ) OVR .grid/width LDZ #01 - = ;&collide JCN2
	( hit cell ) DUP2 SWP #01 + SWP GET-CELL CHAR-DOT ! ,&collide JCN
	DUP2 #00 SET-TYPE
	DUP2 CHAR-DOT SET-CELL
	SWP #01 + SWP DUP2 STHr SET-CELL
	#01 SET-LOCK
	RTN
	&collide CHAR-BANG SET-CELL POPr
	
RTN

@op-f ( x y char -- )

	POP
	( get a ) DUP2 SWP #01 - SWP GET-PORT-LEFT STH
	( get b ) DUP2 SWP #01 + SWP GET-PORT-RIGHT STH
	( incr y ) #01 +
	( get result ) EQUr STHr
	( bang if equal ) #fc * CHAR-DOT + 
	SET-PORT-OUTPUT
	
RTN

@op-g ( x y char -- )
	
	POP
	( get x ) DUP2 SWP #03 - SWP GET-PORT-LEFT STH
	( get y ) DUP2 SWP #02 - SWP GET-PORT-LEFT STH
	( get len ) DUP2 SWP #01 - SWP GET-PORT-LEFT 1MIN
	#00 SWP
	&loop
		( x+i+1,y ) OVR STH OVR2 STHr ROT + #01 + SWP
		DUP2 GET-PORT-RIGHT-RAW STH
		( unstash x,y ) ROTr STHkr ROTr STHkr ROTr
		( x0+x1-1,y0+y1+1 ) ROT + STH + #01 - STHr #01 +
		STHr SET-PORT-OUTPUT
		SWP #01 + SWP
		LTHk ;&loop JCN2
	POP2
	( clean ) POP2 POP2r

RTN

@op-h ( x y char -- )

	POP
	#01 + 
	( lock ) DUP2 #01 SET-LOCK
	( type ) PORTER-TYPE SET-TYPE 

RTN

@op-i ( x y char -- )

	POP
	( get case ) DUP2 SWP #01 + SWP GET-CASE
	( get mod ) DUP2 SWP #01 + SWP GET-PORT-RIGHT 1MIN STH
	( get rate ) DUP2 SWP #01 - SWP GET-PORT-LEFT STH
	( incr y ) #01 +
	( get val ) DUP2 GET-CELL GET-VALUE STH
	( get result ) ADDr STH2r SWP MOD 
	GET-CHAR SET-CASE SET-PORT-OUTPUT
	
RTN

@op-j ( x y char -- )

	
	POP ( TODO: Wiring )
	( get value ) DUP2 #01 - GET-PORT-RIGHT-RAW STH
	( incr y ) #01 + 
	STHr SET-PORT-OUTPUT

RTN

@op-k ( x y char -- )

	POP
	( get len ) DUP2 SWP #01 - SWP GET-PORT-LEFT 1MIN
	#00 SWP 
	&loop
		( x+i+1,y ) OVR STH OVR2 STHr ROT + #01 + SWP
		( get variable ) DUP2 GET-PORT-RIGHT 
		DUP #00 = ,&skip JCN
			.variables + LDZ STH
			( incr y ) #01 + 
			DUP2 STHkr SET-PORT-OUTPUT
			STHr
			&skip
		POP POP2
		SWP #01 + SWP
		LTHk ;&loop JCN2
	POP2
	POP2
	
RTN

@op-l ( x y char -- )

	POP
	( get case ) DUP2 SWP #01 + SWP GET-CASE
	( get left ) DUP2 SWP #01 - SWP GET-PORT-LEFT STH
	( get right ) DUP2 SWP #01 + SWP GET-PORT-RIGHT STH
	( incr y ) #01 +
	( min ) STH2r LTHk SWP? POP 
	GET-CHAR SET-CASE SET-PORT-OUTPUT
	
RTN

@op-m ( x y char -- )

	POP
	( get case ) DUP2 SWP #01 + SWP GET-CASE
	( get left ) DUP2 SWP #01 - SWP GET-PORT-LEFT STH
	( get right ) DUP2 SWP #01 + SWP GET-PORT-RIGHT STH
	( incr y ) #01 +
	( get result ) MULr STHr 
	GET-CHAR SET-CASE SET-PORT-OUTPUT
	
RTN

@op-n ( x y char -- )
	
	STH
	( hit edge ) DUP #00 = ;&collide JCN2
	( hit cell ) DUP2 #01 - GET-CELL CHAR-DOT ! ,&collide JCN
	DUP2 #00 SET-TYPE
	DUP2 CHAR-DOT SET-CELL
	#01 - DUP2 STHr SET-CELL
	#01 SET-LOCK
	RTN
	&collide CHAR-BANG SET-CELL POPr
	
RTN

@op-o ( x y char -- )

	POP
	( get x ) DUP2 SWP #02 - SWP GET-PORT-LEFT STH
	( get y ) DUP2 SWP #01 - SWP GET-PORT-LEFT STH
	( get value ) DUP2 SWP #01 + SWP STH2r ++ GET-PORT-RIGHT-RAW STH
	( incr y ) #01 +
	STHr SET-PORT-OUTPUT
	
RTN

@op-p ( x y char -- )

	POP
	( get key ) DUP2 SWP #02 - SWP GET-PORT-LEFT STH
	( get len ) DUP2 SWP #01 - SWP GET-PORT-LEFT 1MIN STH
	( get input ) DUP2 SWP #01 + SWP GET-PORT-RIGHT-RAW STH
	#00 OVRr STHr
	&loop
		( x+i+1,y ) OVR STH OVR2 STHr ROT + SWP #01 +
		( lock ) DUP2 #01 SET-LOCK
		( type ) LOCKED-TYPE SET-TYPE
		SWP #01 + SWP
		LTHk ,&loop JCN
	POP2
	( write )
	( x-offset ) ROTr ROTr STH2r MOD
	( x,y ) SWP #01 + STH + STHr
	STHr SET-PORT-OUTPUT
	
RTN

@op-q ( x y char -- )

	POP
	( get x ) DUP2 SWP #03 - SWP GET-PORT-LEFT STH
	( get y ) DUP2 SWP #02 - SWP GET-PORT-LEFT STH
	( get len ) DUP2 SWP #01 - SWP GET-PORT-LEFT 1MIN
	#00 SWP
	&loop
		( x+i+1,y ) OVR STH OVR2 STHr ROT + #01 + SWP
		( x+x0,y+y0 ) STHkr + SWP OVRr STHr + SWP
		GET-PORT-RIGHT-RAW STH
		( x-i-len ) DUP2 SWP - STH 
		( x,y ) OVR2 SWP STHr - #01 + SWP #01 +
		STHr SET-PORT-OUTPUT
		SWP #01 + SWP
		LTHk ;&loop JCN2
	POP2
	( clean ) POP2 POP2r
	
RTN

@op-r ( x y char -- )

	POP 
	( get case ) DUP2 SWP #01 + SWP GET-CASE
	( get min ) DUP2 SWP #01 - SWP GET-PORT-LEFT STH
	( get max ) DUP2 SWP #01 + SWP GET-PORT-RIGHT 1MIN STH
	( unstash min,max ) STH2r 
	( real max ) LTHk SWP?
	( no equal ) NEQk #04 JCN [ #01 - SWP ] 
	( stash min,max ) STH2
	( incr y ) #01 +
	( get key ) .timer/seed LDZ2 .timer/frame LDZ2 ** SWP + 
	( key % max + min ) STH2kr SWP - MOD POPr STHr +
	GET-CHAR SET-CASE SET-PORT-OUTPUT
	
RTN

@op-s ( x y char -- )
	
	STH
	( hit edge ) DUP .grid/height LDZ #01 - = ;&collide JCN2
	( hit cell ) DUP2 #01 + GET-CELL CHAR-DOT ! ,&collide JCN
	DUP2 #00 SET-TYPE
	DUP2 CHAR-DOT SET-CELL
	#01 + DUP2 STHr SET-CELL
	#01 SET-LOCK
	RTN
	&collide CHAR-BANG SET-CELL POPr
	
RTN

@op-t ( x y char -- )

	POP
	( get key ) DUP2 SWP #02 - SWP GET-PORT-LEFT STH
	( get len ) DUP2 SWP #01 - SWP GET-PORT-LEFT 1MIN STH
	#00 STHkr
	&loop
		( x+i+1,y ) OVR STH OVR2 STHr ROT + #01 + SWP
		( lock ) DUP2 #01 SET-LOCK 
		( type ) LOCKED-TYPE SET-TYPE
		SWP #01 + SWP
		LTHk ,&loop JCN
	POP2
	( read )
	( x-offset ) DUP2 SWP #01 + SWP STH2r MOD ROT + SWP 
	( x,y ) GET-PORT-RIGHT-RAW STH #01 +
	STHr SET-PORT-OUTPUT

RTN

@op-u ( x y char -- )

	POP
	( get step ) DUP2 SWP #01 - SWP GET-PORT-LEFT STH
	( get max ) DUP2 SWP #01 + SWP GET-PORT-RIGHT 1MIN STH
	( incr y ) #01 +
	( frame + max - 1 ) .timer/frame LDZ2 STHkr TOS ++ #0001 --
	( * step ) OVRr STHr TOS **
	( % max ) STHkr TOS MOD2
	( + step ) SWPr STHr TOS ++
	( bucket >= max ) STHr TOS << #01 !
	( bang if equal ) #fc * CHAR-DOT + 
	SET-PORT-OUTPUT
	
RTN

@op-v ( x y char -- )

	POP
	( get write ) DUP2 SWP #01 - SWP GET-PORT-LEFT STH
	( get read ) DUP2 SWP #01 + SWP GET-PORT-RIGHT-RAW STH
	OVRr STHr ,&write JCN
	( incr y ) #01 +
	( load ) STHr GET-VALUE .variables + LDZ SET-PORT-OUTPUT
	POPr
	RTN
	&write
	( save ) STH2r SWP .variables + STZ POP2

RTN

@op-w ( x y char -- )

	STH
	( hit edge ) OVR #00 = ;&collide JCN2
	( hit cell ) DUP2 SWP #01 - SWP GET-CELL CHAR-DOT ! ,&collide JCN
	DUP2 #00 SET-TYPE
	DUP2 CHAR-DOT SET-CELL
	SWP #01 - SWP DUP2 STHr SET-CELL
	#01 SET-LOCK
	RTN
	&collide CHAR-BANG SET-CELL POPr
	
RTN

@op-x ( x y char -- )

	POP
	( get value ) DUP2 SWP #01 + SWP GET-PORT-RIGHT-RAW STH 
	( get x ) DUP2 SWP #02 - SWP GET-PORT-LEFT STH
	( get y ) DUP2 SWP #01 - SWP GET-PORT-LEFT STH
	( incr y ) STH2r #01 + ++ STHr
	SET-PORT-OUTPUT
	
RTN

@op-y ( x y char -- )

	POP ( TODO: Wiring )
	( get value ) DUP2 SWP #01 - SWP GET-PORT-RIGHT-RAW STH
	( incr y ) SWP #01 + SWP
	STHr SET-PORT-OUTPUT
	
RTN

@op-z ( x y char -- )

	POP
	( get case ) DUP2 SWP #01 + SWP GET-CASE
	( get rate ) DUP2 SWP #01 - SWP GET-PORT-LEFT 1MIN STH
	( get target ) DUP2 SWP #01 + SWP GET-PORT-RIGHT STH
	( incr y ) #01 +
	( get val ) DUP2 GET-CELL GET-VALUE STH
	EQUkr STHr ,&end JCN 
	LTHkr STHr #00 ! ,&no-below JCN 
		( incr ) STHr OVRr STH SWPr ADDr
		( clamp ) GTHkr STHr SWPr?
		,&end JMP
		&no-below
	GTHkr STHr #00 ! ,&no-above JCN 
		( decr ) STHr OVRr STH SWPr SUBr
		( clamp ) STH2kr LTSk SWPr?
		&no-above
	&end
	STHr GET-CHAR SET-CASE SET-PORT-OUTPUT POP2r
	
RTN

@op-bang ( x y char -- )

	POP
	CHAR-DOT SET-CELL

RTN

@op-comment ( x y char -- )
	
	POP
	STH
	.grid/width LDZ SWP #01 +
	&loop
		DUP STHkr 
		( lock )  DUP2 #01 SET-LOCK 
		( close ) DUP2 GET-CELL CHAR-HASH = ,&end JCN
		( type )  LOCKED-TYPE SET-TYPE
		#01 + GTHk ,&loop JCN
	POP2 POPr
	RTN
	&end
	POP2 POP2 POPr

RTN

@op-synth ( x y char -- )
	
	POP
	( get channel ) DUP2 [ SWP #01 + SWP ] GET-PORT-RIGHT STH 
	( get octave ) DUP2 [ SWP #02 + SWP ] GET-PORT-RIGHT [ #0c * ] STH 
	( get note ) DUP2 [ SWP #03 + SWP ] GET-PORT-RIGHT-RAW 
		( req note ) DUP CHAR-DOT ! ,&is-active JCN [ POP POP2 POP2r RTN ] &is-active GET-NOTE STH ADDr
	( req bang ) DUP2 ;get-bang JSR2 ,&is-bang [ JCN POP2 POP2r RTN ] &is-bang
	STHr .Audio0/pitch STHr #10 * + DEO
	IO-TYPE SET-TYPE

RTN

@op-midi ( x y char -- )

	POP
	( get channel ) DUP2 [ SWP #01 + SWP ] GET-PORT-RIGHT STH
	( get octave ) DUP2 [ SWP #02 + SWP ] GET-PORT-RIGHT [ #0c * ] STH 
	( get note ) DUP2 [ SWP #03 + SWP ] GET-PORT-RIGHT-RAW 
		( req note ) DUP CHAR-DOT ! ,&is-active JCN [ POP POP2 POP2r RTN ] &is-active GET-NOTE STH 
	( req bang ) DUP2 ;get-bang JSR2 ,&is-bang JCN [ POP2 POP2r POPr RTN ] &is-bang
	IO-TYPE SET-TYPE
	ADDr
	( note on ) OVRr STHr .Console/write DEO STHkr .Console/write DEO #7f .Console/write DEO
	( note off ) OVRr STHr .Console/write DEO STHkr .Console/write DEO #00 .Console/write DEO
	POP2r

RTN

@op-byte ( x y char -- )

	POP
	( get octave ) DUP2 [ SWP #01 + SWP ] GET-PORT-RIGHT [ #0c * ] STH 
	( get note ) DUP2 [ SWP #02 + SWP ] GET-PORT-RIGHT-RAW 
		( req note ) DUP CHAR-DOT ! ,&is-active JCN [ POP POP2 POPr RTN ] &is-active GET-NOTE STH
	( req bang ) DUP2 ;get-bang JSR2 ,&is-bang JCN POP2 POP2r RTN &is-bang
	IO-TYPE SET-TYPE
	ADDr STHr .Console/write DEO

RTN

@run-char ( x y char -- )
	
	( skip dot )
	DUP CHAR-DOT NEQ ,&not-dot JCN
		POP POP2 RTN 
		&not-dot

	( skip locked )
	ROT ROT DUP2 GET-LOCK #00 = ,&not-locked JCN
		POP POP2 RTN 
		&not-locked
	ROT

	( lowercase )
	DUP #60 < ,&no-lc JCN
	DUP #7b > ,&no-lc JCN
		STH DUP2 ;get-bang JSR2 ,&run JCN 
		POPr POP2 RTN
		&no-lc

	( uppercase )
	DUP #40 < ,&no-uc JCN
	DUP #5a > ,&no-uc JCN
		STH DUP2 OPERATOR-TYPE SET-TYPE &run STHr 
		DUP GET-VALUE #0a - #02 * TOS ;operations ++ LDA2 JMP2
		&no-uc

	( special )
	DUP CHAR-BANG = ;op-bang JCN2
	DUP CHAR-HASH = ;op-comment JCN2
	DUP CHAR-EQUAL = ;op-synth JCN2
	DUP CHAR-COLON = ;op-midi JCN2
	DUP CHAR-SLASH = ;op-byte JCN2

	( unknown )
	POP2 POP

RTN

@clear ( -- )

	.grid/height LDZ #00
	&ver
		.grid/width LDZ #00
		&hor
			GET-ITER CHAR-DOT SET-CELL
			#01 + GTHk ,&hor JCN
		POP2
		#01 + GTHk ,&ver JCN
	POP2

RTN

@init ( -- )
	
	.grid/height LDZ #00
	&ver
		.grid/width LDZ #00
		&hor
			GET-ITER
			( reset lock ) DUP2 #00 SET-LOCK
			( reset type ) #00 SET-TYPE
			#01 + GTHk ,&hor JCN
		POP2
		#01 + GTHk ,&ver JCN
	POP2

RTN

@run ( -- )
	
	;init JSR2
	.grid/height LDZ #00
	&ver
		.grid/width LDZ #00
		&hor
			GET-ITER
			DUP2 GET-CELL ;run-char JSR2
			#01 + GTHk ,&hor JCN
		POP2
		#01 + GTHk ,&ver JCN
	POP2
	;redraw JSR2

RTN

@draw-byte ( byte color -- )
	
	STH
	DUP #04 SFT GET-CHAR GET-CHAR-ADDR STHkr ,draw-char JSR
	.Screen/x DEI2 #0008 ++ .Screen/x DEO2
	#0f AND GET-CHAR GET-CHAR-ADDR STHr ,draw-char JSR

RTN

@draw-char ( addr* color -- )
	
	STH .Screen/addr DEO2
	STHkr .Screen/sprite DEO
	.Screen/addr DEI2 #0008 ++ .Screen/addr DEO2
	.Screen/y DEI2 STH2k #0008 ++ .Screen/y DEO2
	ROTr STHr .Screen/sprite DEO
	STH2r .Screen/y DEO2

RTN

@redraw ( -- )
	
	.grid/height LDZ #00
	&ver
		( pos-y ) DUP #00 SWP #0010 ** [ .grid/y1 LDZ2 ++ ] .Screen/y DEO2
		.grid/width LDZ #00
		&hor
			( pos-x ) DUP #00 SWP 8** [ .grid/x1 LDZ2 ++ ] .Screen/x DEO2
			GET-ITER
			( sprite ) DUP2 ;get-cell-sprite JSR2
			( color ) SWP2 ,get-cell-type JSR TOS ;cell-styles ++ LDA
			;draw-char JSR2
			#01 + GTHk ,&hor JCN
		POP2
		#01 + GTHk ,&ver JCN
	POP2
	,draw-toolbar JSR

RTN

@get-cell-type ( x y -- type )
	
	OVR .selection/x1 LDZ < ,&end JCN
	OVR .selection/x2 LDZ > ,&end JCN
	DUP .selection/y1 LDZ < ,&end JCN
	DUP .selection/y2 LDZ > ,&end JCN
		POP2 #06 RTN 
	&end
	GET-TYPE

RTN

@draw-toolbar ( -- )
		
	( skip on samll screens )
	.toolbar/y1 LDZ2 .Screen/height DEI2 << RTN?

	.toolbar/y1 LDZ2 .Screen/y DEO2

	( Positions )
	.grid/x1 LDZ2 .Screen/x DEO2
	.selection/x1 LDZ #01 ;draw-byte JSR2
	.grid/x1 LDZ2 #0010 ++ .Screen/x DEO2
	.selection/y1 LDZ #01 ;draw-byte JSR2

	.grid/x1 LDZ2 #0020 ++ .Screen/x DEO2
	;selection-icns .selection/insert LDZ TOS #0008 ** ++ .Screen/addr DEO2
	#02 .selection/x1 LDZ .selection/y1 LDZ .selection/x2 LDZ .selection/y2 LDZ == + .Screen/sprite DEO

	( Frame )
	.grid/x1 LDZ2 #0030 ++ .Screen/x DEO2
	.timer/frame #01 + LDZ #01 ;draw-byte JSR2
	.grid/x1 LDZ2 #0040 ++ .Screen/x DEO2
	;beat-icn .Screen/addr DEO2
	#03 .timer/frame #01 + LDZ #07 AND #00 = - .Screen/sprite DEO
	
	( Speed )
	.grid/x1 LDZ2 #0050 ++ .Screen/x DEO2
	.timer/speed LDZ #01 ;draw-byte JSR2
	.grid/x1 LDZ2 #0060 ++ .Screen/x DEO2
	( t ) #74 GET-CHAR-ADDR #01 ;draw-char JSR2
	.grid/x1 LDZ2 #0068 ++ .Screen/x DEO2
	( h ) #68 GET-CHAR-ADDR #01 ;draw-char JSR2

	( d-pad )
	.dpad LDZ DUP #20 < ,&no-dpad JCN
		.grid/x1 LDZ2 #0050 ++ STH2k .Screen/x DEO2
		DUP #07 ;draw-byte JSR2
		STH2kr #0010 ++ .Screen/x DEO2
		;font #00 ;draw-char JSR2
		STH2r #0018 ++ .Screen/x DEO2
		.dpad LDZ GET-CHAR-ADDR #02 ;draw-char JSR2
		&no-dpad
	POP

	( File )
	.grid/x2 LDZ2 STH2k #0018 -- .Screen/x DEO2
	;load-icn .Screen/addr DEO2
	#01 .Screen/sprite DEO
	STH2r #0020 -- .Screen/x DEO2
	;make-icn .Screen/addr DEO2
	#01 .Screen/sprite DEO

	( filepath )
	#03 ;draw-filepath JSR2

RTN

@draw-meter ( -- )
	
	.toolbar/y1 LDZ2 #0001 -- .Screen/y DEO2

	( merge channels )
	.Audio0/output DEI DUP #0f AND STH #04 SFT STH
	.Audio1/output DEI DUP #0f AND STH #04 SFT STH
		ROTr ADDr ROTr ROTr ADDr SWPr
	.Audio2/output DEI DUP #0f AND STH #04 SFT STH
		ROTr ADDr ROTr ROTr ADDr SWPr
	.Audio3/output DEI DUP #0f AND STH #04 SFT STH
		ROTr ADDr ROTr ROTr ADDr SWPr

	( draw )
	#00 #08
	&loop
		.toolbar/x2 LDZ2 #0028 -- .Screen/x DEO2
		DUP OVRr STHr #04 / < .Screen/pixel DEO
		.toolbar/x2 LDZ2 #0026 -- .Screen/x DEO2
		DUP STHkr #04 / < .Screen/pixel DEO
		.Screen/y DEI2 #0001 ++ .Screen/y DEO2
		#01 - LTHk ,&loop JCN
	POP2

	POP2r

RTN

@draw-state ( -- )
	
	.toolbar/x2 LDZ2 #0008 -- .Screen/x DEO2
	.toolbar/y1 LDZ2 .Screen/y DEO2
	;save-icn .Screen/addr DEO2
	#01 .state/changed LDZ + .Screen/sprite DEO

RTN

@draw-filepath ( color -- )
	
	STH
	.toolbar/y1 LDZ2 .Screen/y DEO2
	.toolbar/x1 LDZ2 #0080 ++ .Screen/x DEO2
	;path/name
	&while
		DUP2 LDA GET-CHAR-ADDR STHkr ;draw-char JSR2
		.Screen/x DEI2 #0008 ++ .Screen/x DEO2
		#0001 ++ LDAk ,&while JCN
	POP2
	POPr
	( clear last ) 
	#00 .Screen/sprite DEO

RTN

( file )

@new-file ( default* -- )

	;clear JSR2
	STH2
	#0d #00
	&loop
		DUP DUP TOS STH2kr ++ LDA
		SWP .path/name + STZ
		#01 + GTHk ,&loop JCN
	( end ) #00 SWP .path/name + STZ 
	.path/length STZ 
	POP2r
	RESET-STATE

RTN

@load-file ( -- )

	;path/name .File/name DEO2 
	#1000 .File/length DEO2 
	DATA-FILE .File/load DEO2 
	( setup )
	( TODO: Stop at #00 instead of fixed length )
	#0000 #1000
	&loop
		( get char ) OVR2 DATA-FILE ++ LDA
		DUP CHAR-NULL = ,&end JCN
		DUP CHAR-LINE = ,&linebreak JCN
			( write  ) STH ,&x LDR ,&y LDR STHr SET-CELL
			( incr x ) ,&x LDR #01 + ,&x STR
			,&continue JMP
		&linebreak
			( undo x ) #00 ,&x STR
			( incr y ) ,&y LDR #01 + ,&y STR
			POP
		&continue
		( incr ) SWP2 #0001 ++ SWP2
		LTH2k ,&loop JCN
	&end
	POP2 POP2 POP
	#00 ,&x STR
	#00 ,&y STR
	RESET-STATE
	RTN
	&x $1
	&y $1

RTN

@save-file ( -- )
	
	( stash length ) #0000 STH2
	( setup )
	.grid/height LDZ #00
	&ver
		.grid/width LDZ #00
		&hor
			( write char ) GET-ITER GET-CELL [ STH2kr DATA-FILE ++ ] STA
			( incr index ) #0001 STH2 ADD2r
			#01 + GTHk ,&hor JCN
		POP2
		( write linebreak ) CHAR-LINE [ STH2kr DATA-FILE ++ ] STA
		( incr index ) #0001 STH2 ADD2r
		#01 + GTHk ,&ver JCN
	POP2

	;path/name .File/name DEO2 
	STH2r .File/length DEO2 
	DATA-FILE .File/save DEO2 
	RESET-STATE

RTN

@fill-selection ( char -- )
	
	STH
	.selection/y2 LDZ #01 + .selection/y1 LDZ
	&ver
		.selection/x2 LDZ #01 + .selection/x1 LDZ
		&hor
			( write char ) GET-ITER STHkr SET-CELL
			#01 + GTHk ,&hor JCN
		POP2
		#01 + GTHk ,&ver JCN
	POP2
	POPr

RTN

@cut-selection ( -- )

	;copy-selection JSR2 
	CHAR-DOT ;fill-selection JSR2

RTN

@edit-selection ( x y mod -- )
	
	( set modifiers )
	DUP 
		#01 AND #00 ! ;&drag STA
		#04 AND #00 ! #02 * ;&scale STA
	STH2

	;&drag LDA #00 = ,&no-drag-start JCN 
		;cut-selection JSR2 &no-drag-start

	( y )
	STHkr #00 = ,&no-ver JCN
		( clamp ) STHkr #ff = .selection/y1 [ ,&scale LDR + ] LDZ #00 = #0101 == ,&no-ver JCN
		.selection/y1 [ ,&scale LDR + ] LDZ STHkr + 
			.selection/y1 [ ,&scale LDR + ] STZ
		,&scale LDR ,&no-ver JCN
			.selection/y2 LDZ STHkr + .selection/y2 STZ 
		&no-ver POPr

	( x )
	STHkr #00 = ,&no-hor JCN
		( clamp ) STHkr #ff = .selection/x1 [ ,&scale LDR + ] LDZ #00 = #0101 == ,&no-hor JCN
		.selection/x1 [ ,&scale LDR + ] LDZ STHkr + 
			.selection/x1 [ ,&scale LDR + ] STZ
		,&scale LDR ,&no-hor JCN
			.selection/x2 LDZ STHkr + .selection/x2 STZ 
		&no-hor POPr

	;clamp-selection JSR2 

	,&drag LDR #00 = ,&no-drag-end JCN 
		;paste-selection JSR2 &no-drag-end

	RTN

	&drag $1
	&scale $1

RTN

@clamp-selection ( -- )
	
	.selection/x1 LDZ .grid/width LDZ #01 - STHk < ,&ok-limitx1 JCN
		STHkr .selection/x1 STZ &ok-limitx1 POPr
	.selection/y1 LDZ .grid/height LDZ #01 - STHk < ,&ok-limity1 JCN
		STHkr .selection/y1 STZ &ok-limity1 POPr
	.selection/x2 LDZ .grid/width LDZ #01 - STHk < ,&ok-limitx2 JCN
		STHkr .selection/x2 STZ &ok-limitx2 POPr
	.selection/y2 LDZ .grid/height LDZ #01 - STHk < ,&ok-limity2 JCN
		STHkr .selection/y2 STZ &ok-limity2 POPr
	.selection/x2 LDZ .selection/x1 LDZ STHk > ,&ok-flipx JCN
		STHkr .selection/x2 STZ &ok-flipx POPr
	.selection/y2 LDZ .selection/y1 LDZ STHk > ,&ok-flipy JCN
		STHkr .selection/y2 STZ &ok-flipy POPr

RTN

( theme )

@load-theme ( -- )

	;&path .File/name DEO2 
	#0006 .File/length DEO2 
	#fffa .File/load DEO2
	.File/success DEI2 #0006 !! ,&ignore JCN
		#fffa LDA2 .System/r DEO2
		#fffc LDA2 .System/g DEO2
		#fffe LDA2 .System/b DEO2
		&ignore
	;redraw JSR2

RTN
	&path ".theme $1

( snarf )

@copy-selection ( -- )
	
	( stash length ) #0000 STH2
	.selection/y2 LDZ #01 + .selection/y1 LDZ
	&ver
		.selection/x2 LDZ #01 + .selection/x1 LDZ
		&hor
			( write char ) GET-ITER GET-CELL [ STH2kr DATA-CLIP ++ ] STA
			( incr index ) #0001 STH2 ADD2r
			#01 + GTHk ,&hor JCN
		POP2
		( write linebreak ) CHAR-LINE [ STH2kr DATA-CLIP ++ ] STA
		( incr index ) #0001 STH2 ADD2r
		#01 + GTHk ,&ver JCN
	POP2
	( close ) #00 [ STH2r DATA-CLIP ++ ] STA

RTN

@paste-selection ( -- )
	
	#0000 #1000
	&loop
		( get char ) OVR2 DATA-CLIP ++ LDA
		DUP CHAR-NULL = ,&end JCN
		DUP CHAR-LINE = ,&linebreak JCN
			( write  ) STH ,&x LDR [ .selection/x1 LDZ + ] ,&y LDR [ .selection/y1 LDZ + ] STHr SET-CELL
			( incr x ) ,&x LDR #01 + ,&x STR
			,&continue JMP
		&linebreak
			( undo x ) #00 ,&x STR
			( incr y ) ,&y LDR #01 + ,&y STR
			POP
		&continue
		( incr ) SWP2 #0001 ++ SWP2
		LTH2k ,&loop JCN
	&end
	POP2 POP2 POP
	#00 ,&x STR
	#00 ,&y STR
	RTN
	&x $1
	&y $1

RTN

( generics )

@within-rect ( x* y* rect -- flag )
	
	STH
	( y < rect.y1 ) DUP2 STHkr #02 + LDZ2 << ,&skip JCN
	( y > rect.y2 ) DUP2 STHkr #06 + LDZ2 >> ,&skip JCN
	SWP2
	( x < rect.x1 ) DUP2 STHkr LDZ2 << ,&skip JCN
	( x > rect.x2 ) DUP2 STHkr #04 + LDZ2 >> ,&skip JCN
	POP2 POP2 POPr
	#01 
RTN
	&skip
	POP2 POP2 POPr
	#00

RTN

@print-hex ( value -- )
	
	STHk #04 SFT ,&parse JSR .Console/write DEO
	STHr #0f AND ,&parse JSR .Console/write DEO
	RTN
	&parse ( value -- char )
		DUP #09 GTH ,&above JCN #30 ADD RTN &above #09 SUB #60 ADD RTN

RTN

@operations
	:op-a :op-b :op-c :op-d :op-e :op-f :op-g :op-h
	:op-i :op-j :op-k :op-l :op-m :op-n :op-o :op-p
	:op-q :op-r :op-s :op-t :op-u :op-v :op-w :op-x
	:op-y :op-z

@untitled-txt  "untitled.orca $1

@lc-notes
	00 00 00 00 00 00 00 00 
	00 00 
	0a 0c 01 03 05 06 08 0a
	0c 0d 0f 11 12 14 16 18
	19 1b 1d 1e 20 22 24 25
	27 29

@uc-notes
	00 00 00 00 00 00 00 00 
	00 00 
	09 0b 00 02 04 05 07 09
	0b 0c 0e 10 11 13 15 17
	18 1a 1c 1d 1f 21 23 24
	26 28

@values ( char to b36 )
	00 00 00 00 00 00 00 00
	00 00 00 00 00 00 00 00
	00 01 02 03 04 05 06 07
	08 09 00 00 00 00 00 00
	00 0a 0b 0c 0d 0e 0f 10
	11 12 13 14 15 16 17 18
	19 1a 1b 1c 1d 1e 1f 20
	21 22 23 00 00 00 00 00
	00 0a 0b 0c 0d 0e 0f 10
	11 12 13 14 15 16 17 18
	19 1a 1b 1c 1d 1e 1f 20
	21 22 23 00 00 00 00 00

@b36clc ( b36 to char-lc )
	30 31 32 33 34 35 36 37
	38 39 61 62 63 64 65 66
	67 68 69 6a 6b 6c 6d 6e
	6f 70 71 72 73 74 75 76
	77 78 79 7a

@cell-styles
	03 ( 0 normal )
	03 ( 1 locked )
	01 ( 2 port-unlocked )
	04 ( 3 operator )
	02 ( 4 port-locked )
	08 ( 5 port-output )
	09 ( 6 selected )
	0c ( 7 io )

@selection-icns   
	0066 4200 0042 6600
	0088 ccee cc88 0000

@cursor-icn     80c0 e0f0 f8e0 1000
@beat-icn       0000 1038 7c38 1000

@save-icn      1054 28c6 2854 1000 
@make-icn      fe82 8282 848a f400 
@load-icn      feaa d6aa d4aa f400 

