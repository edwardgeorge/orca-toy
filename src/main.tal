( Orca

	space - toggle play/pause
	backspace/delete - erase
	escape - deselect
	arrow - move
	shift+arrow - scale selection
	ctrl+, - speed down
	ctrl+. - speed up
	ctrl+arrow - drag selection
	ctrl+n - new
	ctrl+s - save
	ctrl+r - rename
	ctrl+o - open
	ctrl+c - copy
	ctrl+v - paste
	ctrl+x - cut
	alt - dpad controls
	ctrl+escape - toggle play/pause

	TODO
		- Catch ports that overflow out of grid
		- Display on-screen guide )

~src/utils.tal

%DATA-CELLS { #b000 }
%DATA-LOCKS { #c000 }
%DATA-TYPES { #d000 }

%LOCKED-TYPE   { #01 } %PORTEL-TYPE   { #02 }
%OPERATOR-TYPE { #03 } %PORTER-TYPE   { #04 }
%OUTPUT-TYPE   { #05 } %IO-TYPE       { #07 }

%CHAR-NULL  { #00 } %CHAR-LINE  { #0a }
%CHAR-HASH  { #23 } %CHAR-BANG  { #2a }
%CHAR-DOT   { #2e } %CHAR-SLASH { #2f }
%CHAR-COLON { #3a } %CHAR-EQUAL { #3d }
%CHAR-SEMI  { #3b }

%IS-CHAR-KEY { STHk #20 > STHr #7b < AND }

%SET-STATE   { #01 .state/changed STZ ;draw-state JSR2 }
%RESET-STATE { #00 .state/changed STZ ;draw-state JSR2 }
%RESET-SELECTION { .selection/x1 LDZ2 ;set-selection-from JSR2 }
%RESET-INSERT { #00 .selection/insert STZ }

%GET-INDEX { #00 SWP #00 .grid/width LDZ ** ROT #00 SWP ++ } ( x y -- index )
%GET-CHAR  { #24 MOD #00 SWP ;b36clc ++ LDA } ( b36 -- char )
%GET-VALUE { #20 - #00 SWP ;values ++ LDA } ( char -- b36 )
%GET-NOTE  { DUP GET-VALUE SWP IS-UC #24 * + TOS ;lc-notes ++ LDA } ( char -- midi )
%GET-CHAR-ADDR { #20 - TOS 10** ;font ++ }

%GET-CELL  { GET-INDEX DATA-CELLS ++ LDA } ( x y -- char )
%SET-CELL  { ROT ROT GET-INDEX DATA-CELLS ++ STA } ( x y char -- )
%GET-TYPE  { GET-INDEX DATA-TYPES ++ LDA } ( x y -- type )
%SET-TYPE  { ROT ROT GET-INDEX DATA-TYPES ++ STA } ( x y type -- )
%GET-LOCK  { GET-INDEX DATA-LOCKS ++ LDA } ( x y -- type )
%SET-LOCK  { ROT ROT GET-INDEX DATA-LOCKS ++ STA } ( x y type -- )
%GET-PORT-LEFT  { DUP2 PORTEL-TYPE SET-TYPE GET-CELL GET-VALUE } ( x y -- char )
%GET-PORT-RIGHT { DUP2 PORTER-TYPE SET-TYPE DUP2 #01 SET-LOCK GET-CELL GET-VALUE } ( x y -- char )
%GET-PORT-RIGHT-RAW { DUP2 PORTER-TYPE SET-TYPE DUP2 #01 SET-LOCK GET-CELL } ( x y -- char )
%SET-PORT-OUTPUT { STH DUP2 OUTPUT-TYPE SET-TYPE DUP2 #01 SET-LOCK STHr SET-CELL } ( x y char -- )
%LOAD-CASE { GET-CELL IS-UC } ( x y -- uc )
%SAVE-CASE { DUP #60 > STHr 20* * - } ( char uc -- char )

%GET-CASE { DUP IS-UC STH }
%SET-CASE { DUP #60 > STHr 20* * - }

( devices )

|00 @System     &vector $2 &pad      $6 &r      $2 &g     $2 &b      $2
|10 @Console    &vector $2 &read     $1 &pad    $5 &write $1
|20 @Screen     &vector $2 &width $2 &height $2 &auto $1 &pad $1 &x $2 &y $2 &addr $2 &pixel $1 &sprite $1
|30 @Audio0     &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr  $2 &volume $1 &pitch $1
|40 @Audio1     &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr  $2 &volume $1 &pitch $1
|50 @Audio2     &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr  $2 &volume $1 &pitch $1
|60 @Audio3     &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr  $2 &volume $1 &pitch $1
|80 @Controller &vector $2 &button   $1 &key    $1
|90 @Mouse      &vector $2 &x        $2 &y      $2 &state $1 &chord  $1
|a0 @File       &vector $2 &success  $2 &stat   $2 &delete $1 &append $1 &name  $2 &length $2 &read $2 &write $2
|b0 @DateTime   &year   $2 &month    $1 &day    $1 &hour  $1 &minute $1 &second $1 &dotw $1 &doty $2 &isdst $1

( variables )

|0000

@dpad $1 
	&last $1

@state
	&timer $1 &blink $1 &changed $1
@timer
	&beat $1 &speed $1 &alive $1  &frame $2 &seed $2
@path
	&name $20
@grid
	&x1 $2 &y1 $2
	&x2 $2 &y2 $2
	&width $1 &height $1
@toolbar
	&x1 $2 &y1 $2
	&x2 $2 &y2 $2
@selection
	&x1 $1 &y1 $1
	&x2 $1 &y2 $1
	&insert $1
@cursor
	&x $2 &y $2
	&last $1

@variables $24

|0100

	( theme )
	#0f38 .System/r DEO2
	#0fc8 .System/g DEO2
	#0f98 .System/b DEO2

	( synths )
	#dd .Audio0/volume DEO  #0118 .Audio0/adsr DEO2 #0100 .Audio0/length DEO2
	#ce .Audio1/volume DEO  #0334 .Audio1/adsr DEO2 #0100 .Audio1/length DEO2
	#ec .Audio2/volume DEO  #1414 .Audio2/adsr DEO2 #0100 .Audio2/length DEO2
	#dd .Audio3/volume DEO  #222c .Audio3/adsr DEO2 #0100 .Audio3/length DEO2

	;sin-pcm .Audio0/addr DEO2
	;tri-pcm .Audio1/addr DEO2
	;saw-pcm .Audio2/addr DEO2
	;sqr-pcm .Audio3/addr DEO2

	( vectors )
	;untrap JSR2

	( set grid size )
	.Screen/width DEI2
		DUP2 8// NIP #03 - .grid/width STZ
		DUP2 2// .grid/width LDZ 2/ INC TOS 8** -- #0004 ++ .grid/x1 STZ2
		2// .grid/width LDZ 2/ TOS 8** ++ #0002 ++ .grid/x2 STZ2
	.Screen/height DEI2
		DUP2 10// NIP #03 - .grid/height STZ
		DUP2 2// .grid/height LDZ 2/ INC TOS 10** -- #0004 -- .grid/y1 STZ2
		2// .grid/height LDZ 2/ TOS 10** ++ #0008 -- .grid/y2 STZ2

	( set toolbar size )
	.grid/x1 LDZ2 .toolbar/x1 STZ2
	.grid/y2 LDZ2 #0010 ++ .toolbar/y1 STZ2
	.grid/x2 LDZ2 .toolbar/x2 STZ2
	.toolbar/y1 LDZ2 #0008 ++ .toolbar/y2 STZ2

	( random seed )
	.DateTime/minute DEI2 SWP DUP2
		.DateTime/day DEI2 ++ ++
		#7131 **
		.timer/seed STZ2

	AUTO-YADDR
	( blank file )
	;new-file JSR2
	( theme support )
	;load-theme JSR2
	( start )
	#08 ;set-speed JSR2
	#01 .timer/alive STZ

BRK

@untrap ( -- )

	( vectors )
	;on-console .Console/vector DEO2
	;on-button .Controller/vector DEO2
	;on-mouse .Mouse/vector DEO2
	;on-frame .Screen/vector DEO2

	( filepath )
	#00 .state/blink STZ
	#01 ;draw-filepath JSR2
	RELEASE-MOUSE

RTN

@trap ( -- )

	( vectors )
	;on-button-trap .Controller/vector DEO2
	;on-mouse-trap .Mouse/vector DEO2
	;on-frame-trap .Screen/vector DEO2

	( filepath )
	#01 .state/blink STZ
	#01 ;draw-filepath JSR2
	RELEASE-MOUSE

	( clear cursor )
	.cursor/x LDZ2 .Screen/x DEO2
	.cursor/y LDZ2 .Screen/y DEO2
	#40 .Screen/sprite DEO

RTN

@on-console ( -> )

	.Console/read DEI
	DUP #11 ! ,&no-u JCN #00ff #00 ;edit-selection JSR2 &no-u
	DUP #12 ! ,&no-d JCN #0001 #00 ;edit-selection JSR2 &no-d
	DUP #13 ! ,&no-l JCN #ff00 #00 ;edit-selection JSR2 &no-l
	DUP #14 ! ,&no-r JCN #0100 #00 ;edit-selection JSR2 &no-r
	DUP IS-CHAR-KEY #00 = ,&no-key JCN 
		STHk .selection LDZ2 STHr SET-CELL 
		&no-key
	POP

BRK

@on-frame ( -> )

	( paused ) 
	.timer/alive LDZ JMP BRK
	( inc beat )
	.timer/beat LDZk INC SWP STZ
	( on beat )
	.timer LDZ2 ! ,&skip JCN
		;run JSR2
		( reset ) #00 .timer/beat STZ
		( incr ) .timer/frame LDZ2k INC2 ROT STZ2
		&skip

BRK

@on-frame-trap ( -> )

	.state/timer LDZ INC
	DUP 8MOD ,&no-blink JCN
		.state/blink LDZ #00 =
			DUP 8* INC ;draw-filepath JSR2
			.state/blink STZ
		&no-blink
	.state/timer STZ

BRK

@on-button ( -> )

	( d-pad handler )
	.Controller/button DEI .dpad/last LDZ
	DUP2 #0200 == ;dpad-input/start JCN2
	DUP2 #0002 == ;dpad-input/end JCN2
	DUP #0f AND #02 = ;dpad-input/add JCN2
	POP ( pop last )
	DUP .dpad/last STZ
	( normal routing )
	DUP #f0 AND ;&arrows JCN2
	DUP #01 AND ;&control JCN2
	DUP #09 ! ,&no-ctrl-escape JCN
		.timer/alive TOGGLE
		&no-ctrl-escape
	POP

	( default )
	.Controller/key DEI
	DUP #20 ! ,&no-space JCN
		.timer/alive TOGGLE
		.selection/insert LDZ #00 = ,&no-space-insert JCN
			.timer/alive TOGGLE
			#01 #00 #00 ;edit-selection JSR2
			&no-space-insert
		;redraw JSR2 POP BRK
		&no-space
	DUP #08 ! OVR #7f ! AND ,&no-backspace JCN
		CHAR-DOT ;fill-selection JSR2
		.selection/insert LDZ #00 = ,&no-backspace-insert JCN
			#ff #00 #00 ;edit-selection JSR2
			&no-backspace-insert
		SET-STATE
		;redraw JSR2 POP BRK
		&no-backspace
	DUP #1b ! ,&no-escape JCN
		RESET-SELECTION
		RESET-INSERT
		;load-theme JSR2 POP BRK
		&no-escape
	DUP IS-CHAR-KEY #00 = ,&no-key JCN
		.selection LDZ2 .Controller/key DEI SET-CELL
		.selection/insert LDZ #00 = ,&no-key-insert JCN
			#01 #00 #00 ;edit-selection JSR2
			&no-key-insert
		SET-STATE
		;redraw JSR2 POP BRK
		&no-key
	POP BRK

	&control ( button -- )
		POP
		.Controller/key DEI
		DUP [ LIT 'a ] ! ,&no-expand JCN
			#0000 .grid/width LDZ2 ;set-selection JSR2
			POP BRK
			&no-expand
		DUP [ LIT 'c ] ! ,&no-copy JCN
			;copy-snarf JSR2
			;redraw JSR2 POP BRK
			&no-copy
		DUP [ LIT 'v ] ! ,&no-paste JCN
			;paste-snarf JSR2 RESET-SELECTION
			;redraw JSR2 POP BRK
			&no-paste
		DUP [ LIT 'x ] ! ,&no-cut JCN
			;copy-snarf JSR2 CHAR-DOT ;fill-selection JSR2 RESET-SELECTION
			;redraw JSR2 POP BRK
			&no-cut
		DUP [ LIT 'o ] ! ,&no-open JCN
			;load-file JSR2
			POP BRK
			&no-open
		DUP [ LIT 'r ] ! ,&no-name JCN
			#00 ;draw-filepath JSR2
			;trap JSR2
			POP BRK
			&no-name
		DUP [ LIT 'R ] ! ,&no-rename JCN
			#00 ;draw-filepath JSR2
			;path/name #0020 ;mclr JSR2
			;trap JSR2
			POP BRK
			&no-rename
		DUP [ LIT 's ] ! ,&no-save JCN
			;save-file JSR2
			;redraw JSR2 POP BRK
			&no-save
		DUP [ LIT 'n ] ! ,&no-new JCN
			;new-file JSR2
			POP BRK
			&no-new
		DUP [ LIT 'i ] ! ,&no-insert JCN
			.selection/insert TOGGLE
			;redraw JSR2 POP BRK
			&no-insert
		DUP #2c ! ,&no-slow JCN
			.timer/speed LDZ #01 - ;set-speed JSR2
			;redraw JSR2 POP BRK
			&no-slow
		DUP #2e ! ,&no-fast JCN
			.timer/speed LDZ INC ;set-speed
			;redraw JSR2 POP BRK
			&no-fast
		POP
	BRK

	&arrows ( button -> )
		DUP #f0 AND #10 ! ,&no-u JCN #00ff ROT ,&move JMP &no-u
		DUP #f0 AND #20 ! ,&no-d JCN #0001 ROT ,&move JMP &no-d
		DUP #f0 AND #40 ! ,&no-l JCN #ff00 ROT ,&move JMP &no-l
		DUP #f0 AND #80 ! ,&no-r JCN #0100 ROT ,&move JMP &no-r
		POP BRK
		&move
		;edit-selection JSR2
		;redraw JSR2
	BRK

BRK

@on-button-trap ( -> )

	.Controller/key DEI
	DUP ,&continue JCN
		POP BRK
		&continue
	( backspace ) #08 !~ ,&no-edit-backspace JCN
		( clamp ) ;path/name ;slen JSR2 NIP #00 = ,&edit-end JCN
		#00 ;draw-filepath JSR2
		;path/name ;spop JSR2
		#01 ;draw-filepath JSR2
		POP BRK
		&no-edit-backspace
	( special ) #20 >~ ,&no-edit-enter JCN
		;untrap JSR2
		#00 .state/blink STZ
		#01 ;draw-filepath JSR2
		POP BRK
		&no-edit-enter
	( append ) ;path/name ;slen JSR2 NIP #1f = ,&edit-end JCN
	DUP ;path/name ROT ;sput JSR2
	#01 ;draw-filepath JSR2
	&edit-end
	POP

BRK

@on-mouse-trap ( -> )

	( release trap on touch )
	.Mouse/state DEI BRK?

	;untrap JSR2

BRK

@on-mouse ( -> )

	( clear last cursor )
	.cursor/x LDZ2 .Screen/x DEO2
	.cursor/y LDZ2 .Screen/y DEO2
	#40 .Screen/sprite DEO

	( draw new cursor )
	.Mouse/x DEI2 DUP2 .cursor/x STZ2 .Screen/x DEO2
	.Mouse/y DEI2 DUP2 .cursor/y STZ2 .Screen/y DEO2
	;cursor-icn .Screen/addr DEO2
	#41 [ .Mouse/state DEI #00 ! 2* ] + .Screen/sprite DEO

	( route )
	.Mouse/y DEI2 .toolbar/y1 LDZ2 -- 10// #0000 ==
		;on-mouse-toolbar JCN2
	.Mouse/x DEI2 .Mouse/y DEI2 .grid ;within-rect JSR2
		;on-mouse-grid JCN2

	( release-record ) #0000 .Mouse/state DEO .cursor/last STZ

BRK

@on-mouse-grid ( -> )

	.Mouse/state DEI DUP .cursor/last LDZ
		DUP2 #0000 == ,&end JCN
		( on down )
		DUP2 #0100 !! ,&no-down JCN
			.Mouse/x DEI2 .grid/x1 LDZ2 -- 8// NIP
			.Mouse/y DEI2 .grid/y1 LDZ2 -- 10// NIP
				;set-selection-from JSR2
			,&end JMP
			&no-down
		( on release )
		.Mouse/x DEI2 .grid/x1 LDZ2 -- 8// NIP
		.Mouse/y DEI2 .grid/y1 LDZ2 -- 10// NIP
			;set-selection-to JSR2
	&end
	POP2
	.cursor/last STZ

BRK

@on-mouse-toolbar ( -> )

	( skip ) .Mouse/state DEI BRK?

	( left-side )
	.Mouse/x DEI2 .grid/x1 LDZ2 -- 8// NIP
	DUP #05 > ,&no-insert JCN
		.selection/insert TOGGLE
		RELEASE-MOUSE
		;redraw JSR2 POP BRK
		&no-insert
	DUP #09 > ,&no-pause JCN
		.timer/alive TOGGLE
		RELEASE-MOUSE
		;redraw JSR2 POP BRK
		&no-pause
	DUP #0d > ,&no-speed JCN
		.timer/speed LDZ #01 +
			[ .Controller/button DEI #01 = #02 * - ]
			;set-speed JSR2
		RELEASE-MOUSE
		;redraw JSR2 POP BRK
		&no-speed
	DUP #0f > OVR .grid/width LDZ SWP - #05 > #0101 !! ,&no-rename JCN
		#00 ;draw-filepath JSR2
		;trap JSR2
		&no-rename
	POP

	( right-side )
	.grid/x2 LDZ2 .Mouse/x DEI2 -- 8// NIP
	DUP ,&no-save JCN
		;save-file JSR2
		&no-save
	DUP #02 ! ,&no-load JCN
		;load-file JSR2
		&no-load
	DUP #03 ! ,&no-name JCN
		;new-file JSR2
		&no-name
	POP

	RELEASE-MOUSE

BRK

( general )

@set-selection-from ( x y -- )

	DUP2 ,set-selection JSR

RTN

@set-selection-to ( x y -- )

	.selection/x1 LDZ2 SWP2 ,set-selection JSR

RTN

@set-selection ( x y x2 y2 -- )

	( keep to over from )
	OVR2 OVR2 ROT MAX ROT ROT MAX SWP NIP2
	( changed ) LITr 00
	,clamp-position JSR 
		DUP2 .selection/x2 LDZ2 !! JMP INCr 
		.selection/x2 STZ2
	,clamp-position JSR 
		DUP2 .selection/x1 LDZ2 !! JMP INCr
		.selection/x1 STZ2
	STHr #00 = ,&no-redraw JCN
		;redraw JSR2
		&no-redraw

RTN

@clamp-position ( x y -- x y )

	.grid/height LDZ #01 - MIN SWP .grid/width LDZ #01 - MIN SWP

RTN

@fill-selection ( char -- )

	STH
	.selection/y2 LDZ INC .selection/y1 LDZ
	&ver
		.selection/x2 LDZ INC .selection/x1 LDZ
		&hor
			( write char ) GET-ITER STHkr SET-CELL
			INC GTHk ,&hor JCN
		POP2
		INC GTHk ,&ver JCN
	POP2
	POPr

RTN

@edit-selection ( x y mod -- )

	( set modifiers )
	DUP
		#01 AND #00 ! ;&drag STA
		#04 AND #00 ! 2* ;&scale STA
	STH2

	;&drag LDA #00 = ,&no-drag-start JCN
		;copy-snarf JSR2
		CHAR-DOT ;fill-selection JSR2
		&no-drag-start

	( y )
	STHkr #00 = ,&no-ver JCN
		( clamp ) STHkr #ff = .selection/y1 [ ,&scale LDR + ] LDZ #00 = AND ,&no-ver JCN
		.selection/y1 [ ,&scale LDR + ] LDZ STHkr +
			.selection/y1 [ ,&scale LDR + ] STZ
		,&scale LDR ,&no-ver JCN
			.selection/y2 LDZ STHkr + .selection/y2 STZ
		&no-ver POPr

	( x )
	STHkr #00 = ,&no-hor JCN
		( clamp ) STHkr #ff = .selection/x1 [ ,&scale LDR + ] LDZ #00 = AND ,&no-hor JCN
		.selection/x1 [ ,&scale LDR + ] LDZ STHkr +
			.selection/x1 [ ,&scale LDR + ] STZ
		,&scale LDR ,&no-hor JCN
			.selection/x2 LDZ STHkr + .selection/x2 STZ
		&no-hor POPr

	( clamp result )
	.selection/x1 LDZ2 .selection/x2 LDZ2 ;set-selection JSR2

	,&drag LDR #00 = ,&no-drag-end JCN
		;paste-snarf JSR2
		&no-drag-end

RTN
	&drag $1
	&scale $1

@set-speed ( speed -- )

	( clamp )
	#1f AND [ #04 MAX ] .timer/speed STZ
	( reset timer )
	#00 .timer/beat STZ

RTN

( special )

@dpad-input ( -> )

	&start ( button* -> )
		POP
		#20 .dpad STZ
		;&save JMP2
	&end ( button* -> )
		POP
		.dpad LDZ #7f > ,&save JCN
		.dpad LDZ #20 = ,&erase JCN
		.selection LDZ2 .dpad LDZ SET-CELL
		SET-STATE
		RESET-SELECTION
		#00 .dpad STZ
		,&save JMP
	&add ( button* -> )
		#02 ! ,&save JCN
		DUP #04 SFT .dpad LDZ + #7f AND .dpad STZ
		,&save JMP
	&erase ( -> )
		.selection LDZ2 CHAR-DOT SET-CELL SET-STATE
		#00 .dpad STZ
	&save ( -> )
		.dpad/last STZ
		;redraw JSR2
	BRK

BRK

@run-char ( x y char -- )

	( skip dot )
	DUP CHAR-DOT NEQ ,&not-dot JCN
		POP POP2 RTN
		&not-dot

	( skip locked )
	ROT ROT DUP2 GET-LOCK #00 = ,&not-locked JCN
		POP POP2 RTN
		&not-locked
	ROT

	( lowercase )
	DUP #61 < ,&no-lc JCN
	DUP #7a > ,&no-lc JCN
		STH DUP2 ;get-bang JSR2 ,&run JCN
		POPr POP2 RTN
		&no-lc

	( uppercase )
	DUP #41 < ,&no-uc JCN
	DUP #5a > ,&no-uc JCN
		STH DUP2 OPERATOR-TYPE SET-TYPE &run STHr
		DUP GET-VALUE #0a - 2* TOS ;operations ++ LDA2 JMP2
		&no-uc

	( special )
	DUP CHAR-BANG = ;op-bang JCN2
	DUP CHAR-HASH = ;op-comment JCN2
	DUP CHAR-SEMI = ;op-note JCN2
	DUP CHAR-EQUAL = ;op-synth JCN2
	DUP CHAR-COLON = ;op-midi JCN2
	DUP CHAR-SLASH = ;op-byte JCN2

	( unknown )
	POP2 POP

RTN

@clear-grid ( -- )

	#00 .grid/height LDZ #00 .grid/width LDZ ** #0000
	&loop
		STH2k
		CHAR-DOT DATA-CELLS STH2kr ++ STA
		#00 DATA-LOCKS STH2kr ++ STA
		#00 DATA-TYPES STH2r ++ STA
		INC2 GTH2k ,&loop JCN
	POP2 POP2

RTN

@run ( -- )

	( clear lock/types )
	#00 .grid/height LDZ #00 .grid/width LDZ ** STH2
		DATA-LOCKS STH2kr ;mclr JSR2
		DATA-TYPES STH2r ;mclr JSR2
	( do )
	.grid/height LDZ #00
	&ver
		.grid/width LDZ #00
		&hor
			GET-ITER
			DUP2 GET-CELL ;run-char JSR2
			INC GTHk ,&hor JCN
		POP2
		INC GTHk ,&ver JCN
	POP2
	;redraw JSR2

RTN

( operations )

@get-bang ( x y -- bang )

	DUP2 INC GET-CELL CHAR-BANG = ,&bang JCN
	DUP2 #01 - GET-CELL CHAR-BANG = ,&bang JCN
	DUP2 SWP INC SWP GET-CELL CHAR-BANG = ,&bang JCN
	DUP2 SWP #01 - SWP GET-CELL CHAR-BANG = ,&bang JCN
	POP2 #00 RTN
	&bang
		POP2 #01

RTN

@get-port-raw ( addr* -- value )

	( set type ) DUP2 PORTEL-TYPE ROT ROT DATA-TYPES ++ STA
	( get data ) DATA-CELLS ++ LDA

RTN

@get-port-left ( addr* -- value )

	( set type ) DUP2 PORTEL-TYPE ROT ROT DATA-TYPES ++ STA
	( get data ) DATA-CELLS ++ LDA GET-VALUE

RTN

@get-port-right ( addr* -- value )

	( set lock ) DUP2 #01 ROT ROT DATA-LOCKS ++ STA
	( set type ) DUP2 PORTER-TYPE ROT ROT DATA-TYPES ++ STA
	( get data ) DATA-CELLS ++ LDA GET-VALUE

RTN

@set-port-output ( value addr* -- )

	( set lock ) DUP2 #01 ROT ROT DATA-LOCKS ++ STA
	( set type ) DUP2 OUTPUT-TYPE ROT ROT DATA-TYPES ++ STA
	( set data ) DATA-CELLS ++ STA

RTN

@set-port-raw ( value addr* -- )

	( set lock ) DUP2 #01 ROT ROT DATA-LOCKS ++ STA
	( set type ) DUP2 #00 ROT ROT DATA-TYPES ++ STA
	( set data ) DATA-CELLS ++ STA

RTN

( operators )

@operations
	:op-a :op-b :op-c :op-d :op-e :op-f :op-g :op-h
	:op-i :op-j :op-k :op-l :op-m :op-n :op-o :op-p
	:op-q :op-r :op-s :op-t :op-u :op-v :op-w :op-x
	:op-y :op-z

@op-a ( x y char -- )

	POP
	GET-INDEX STH2k
	( get a ) DEC2 ;get-port-left JSR2
	( get b ) STH2kr INC2
		( set lock ) DUP2 #01 ROT ROT DATA-LOCKS ++ STA
		( set type ) DUP2 PORTER-TYPE ROT ROT DATA-TYPES ++ STA
		( get data ) DATA-CELLS ++ LDA GET-CASE GET-VALUE
	( a b + ) +
	( apply case ) GET-CHAR SET-CASE
	( output ) STH2r #00 .grid/width LDZ ++ ;set-port-output JSR2

RTN

@op-b ( x y char -- )

	POP
	GET-INDEX STH2k
	( get a ) DEC2 ;get-port-left JSR2
	( get b ) STH2kr INC2
		( set lock ) DUP2 #01 ROT ROT DATA-LOCKS ++ STA
		( set type ) DUP2 PORTER-TYPE ROT ROT DATA-TYPES ++ STA
		( get data ) DATA-CELLS ++ LDA GET-CASE GET-VALUE
	( a b -abs ) - DUP #80 < ,&bounce JCN #24 SWP - &bounce
	( apply case ) GET-CHAR SET-CASE
	( output ) STH2r #00 .grid/width LDZ ++ ;set-port-output JSR2

RTN

@op-c ( x y char -- )

	POP
	GET-INDEX STH2k
	( get rate ) DEC2 ;get-port-left JSR2 1MIN
	( get mod ) STH2kr INC2
		( set lock ) DUP2 #01 ROT ROT DATA-LOCKS ++ STA
		( set type ) DUP2 PORTER-TYPE ROT ROT DATA-TYPES ++ STA
		( get data ) DATA-CELLS ++ LDA GET-CASE GET-VALUE 1MIN
	( timer rate / mod % ) TOS ROT TOS .timer/frame LDZ2 SWP2 // SWP2 MOD2 NIP
	( apply case ) GET-CHAR SET-CASE
	( output ) STH2r #00 .grid/width LDZ ++ ;set-port-output JSR2

RTN

@op-d ( x y char -- )

	POP
	GET-INDEX STH2k
	( get rate ) DEC2 ;get-port-left JSR2 1MIN
	( get mod ) STH2kr INC2 ;get-port-right JSR2 1MIN
	( rate mod * 0 = ) * TOS .timer/frame LDZ2 SWP2 MOD2 #0000 ==
	( bang on equal ) #fc * CHAR-DOT +
	( output ) STH2r #00 .grid/width LDZ ++ ;set-port-output JSR2

RTN

@op-e ( x y char -- )

	STH
	OVR STH GET-INDEX STHr
	( hit edge ) .grid/width LDZ #01 - = ,&collide JCN
	( hit cell ) INC2k DATA-CELLS ++ LDA CHAR-DOT ! ,&collide JCN
	( write new ) STH2k ROTr STHr STH2r INC2 ;set-port-raw JSR2
	( erase old ) STH2 CHAR-DOT STH2r ;set-port-raw JSR2
	RTN
	&collide
		POPr
		STH2 CHAR-BANG STH2r ;set-port-output JSR2

RTN

@op-f ( x y char -- )

	POP
	GET-INDEX STH2k
	( get rate ) DEC2 ;get-port-left JSR2
	( get mod ) STH2kr INC2 ;get-port-right JSR2
	( bang on equal ) = [ #fc * CHAR-DOT +  ]
	( output ) STH2r #00 .grid/width LDZ ++ ;set-port-output JSR2

RTN

@op-g ( x y char -- )

	POP
	( get x ) DUP2 [ SWP #03 - SWP ] GET-PORT-LEFT STH
	( get y ) DUP2 [ SWP #02 - SWP ] GET-PORT-LEFT STH
	( get len ) DUP2 [ SWP #01 - SWP ] GET-PORT-LEFT 1MIN
	#00
	&loop
		( x+i+1,y ) STHk OVR2 STHr ROT + INC SWP
		DUP2 GET-PORT-RIGHT-RAW STH
		( unstash x,y ) ROTr STHkr ROTr STHkr ROTr
		( x0+x1-1,y0+y1+1 ) ROT + STH + #01 - STHr INC
		STHr SET-PORT-OUTPUT
		INC GTHk ;&loop JCN2
	POP2
	( clean ) POP2 POP2r

RTN

@op-h ( x y char -- )

	POP INC
	GET-INDEX
	( set lock ) DUP2 #01 ROT ROT DATA-LOCKS ++ STA
	( set type ) PORTER-TYPE ROT ROT DATA-TYPES ++ STA

RTN

@op-i ( x y char -- )

	POP
	GET-INDEX STH2k
	( get rate ) DEC2 ;get-port-left JSR2 1MIN
	( get output ) STH2kr #00 .grid/width LDZ ++ DATA-CELLS ++ LDA GET-VALUE
	( rate output + ) +
	( get mod ) STH2kr INC2
		( set lock ) DUP2 #01 ROT ROT DATA-LOCKS ++ STA
		( set type ) DUP2 PORTER-TYPE ROT ROT DATA-TYPES ++ STA
		( get data ) DATA-CELLS ++ LDA GET-CASE GET-VALUE 1MIN
	( result % ) MOD
	( apply case ) GET-CHAR SET-CASE
	( output ) STH2r #00 .grid/width LDZ ++ ;set-port-output JSR2

RTN

@op-j ( x y char -- )

	POP ( TODO: Wiring )
	GET-INDEX STH2k
	( get above ) #00 .grid/width LDZ -- ;get-port-raw JSR2
	( set below ) STH2r #00 .grid/width LDZ ++ ;set-port-output JSR2

RTN

@op-k ( x y char -- )

	POP
	( get len ) DUP2 [ SWP #01 - SWP ] GET-PORT-LEFT 1MIN
	#00
	&loop
		( x+i+1,y ) STHk OVR2 STHr ROT + INC SWP
		( get variable ) DUP2 GET-PORT-RIGHT
		DUP #00 = ,&skip JCN
			.variables + LDZ STH
			( incr y ) INC
			DUP2 STHkr SET-PORT-OUTPUT
			STHr
			&skip
		POP POP2
		INC GTHk ;&loop JCN2
	POP2
	POP2

RTN

@op-l ( x y char -- )

	POP
	GET-INDEX STH2k
	( get rate ) DEC2 ;get-port-left JSR2
	( get mod ) STH2kr INC2
		( set lock ) DUP2 #01 ROT ROT DATA-LOCKS ++ STA
		( set type ) DUP2 PORTER-TYPE ROT ROT DATA-TYPES ++ STA
		( get data ) DATA-CELLS ++ LDA GET-CASE GET-VALUE
	( min ) LTHk JMP SWP POP
	( apply case ) GET-CHAR SET-CASE
	( output ) STH2r #00 .grid/width LDZ ++ ;set-port-output JSR2

RTN

@op-m ( x y char -- )

	POP
	GET-INDEX STH2k
	( get rate ) DEC2 ;get-port-left JSR2
	( get mod ) STH2kr INC2
		( set lock ) DUP2 #01 ROT ROT DATA-LOCKS ++ STA
		( set type ) DUP2 PORTER-TYPE ROT ROT DATA-TYPES ++ STA
		( get data ) DATA-CELLS ++ LDA GET-CASE GET-VALUE
	( mul ) *
	( apply case ) GET-CHAR SET-CASE
	( output ) STH2r #00 .grid/width LDZ ++ ;set-port-output JSR2

RTN

@op-n ( x y char -- )

	STH
	STHk GET-INDEX STHr
	( hit edge ) #00 = ,&collide JCN
	( hit cell ) DUP2 #00 .grid/width LDZ -- DATA-CELLS ++ LDA CHAR-DOT ! ,&collide JCN
	( write new ) STH2k ROTr STHr STH2r #00 .grid/width LDZ -- ;set-port-raw JSR2
	( erase old ) STH2 CHAR-DOT STH2r ;set-port-raw JSR2
	RTN
	&collide
		POPr
		STH2 CHAR-BANG STH2r ;set-port-output JSR2

RTN

@op-o ( x y char -- )

	POP
	( get x ) DUP2 [ SWP #02 - SWP ] GET-PORT-LEFT STH
	( get y ) DUP2 [ SWP #01 - SWP ] GET-PORT-LEFT STH
	( get value ) DUP2 [ SWP INC SWP ] STH2r ++ GET-PORT-RIGHT-RAW STH
	( incr y ) INC
	STHr SET-PORT-OUTPUT

RTN

@op-p ( x y char -- )

	POP
	( get key ) DUP2 [ SWP #02 - SWP ] GET-PORT-LEFT STH
	( get len ) DUP2 [ SWP #01 - SWP ] GET-PORT-LEFT 1MIN STH
	( get input ) DUP2 [ SWP INC SWP ] GET-PORT-RIGHT-RAW STH
	OVRr STHr #00
	&loop
		( x+i+1,y ) STHk OVR2 STHr ROT + SWP INC
		( lock ) DUP2 #01 SET-LOCK
		( type ) LOCKED-TYPE SET-TYPE
		INC GTHk ,&loop JCN
	POP2
	( write )
	( x-offset ) ROTr ROTr STH2r MOD
	( x,y ) SWP INC STH + STHr
	STHr SET-PORT-OUTPUT

RTN

@op-q ( x y char -- )

	POP
	( get x ) DUP2 [ SWP #03 - SWP ] GET-PORT-LEFT STH
	( get y ) DUP2 [ SWP #02 - SWP ] GET-PORT-LEFT STH
	( get len ) DUP2 [ SWP #01 - SWP ] GET-PORT-LEFT 1MIN
	#00
	&loop
		( x+i+1,y ) STHk OVR2 STHr ROT + INC SWP
		( x+x0,y+y0 ) STHkr + SWP OVRr STHr + SWP
		GET-PORT-RIGHT-RAW STH
		( x-i-len ) DUP2  - STH
		( x,y ) OVR2 SWP STHr - INC SWP INC
		STHr SET-PORT-OUTPUT
		 INC
		GTHk ;&loop JCN2
	POP2
	( clean ) POP2 POP2r

RTN

@op-r ( x y char -- )

	POP
	( get case ) DUP2 [ SWP INC SWP ] LOAD-CASE STH
	( get min ) DUP2 [ SWP #01 - SWP ] GET-PORT-LEFT STH
	( get max ) DUP2 [ SWP INC SWP ] GET-PORT-RIGHT 1MIN STH
	( unstash min,max ) STH2r
	( real max ) LTHk JMP SWP
	( no equal ) NEQk #04 JCN [ #01 - SWP ]
	( stash min,max ) STH2
	( incr y ) INC
	( get key ) .timer/seed LDZ2 .timer/frame LDZ2 ** SWP +
	( key % max + min ) STH2kr SWP - MOD POPr STHr +
	GET-CHAR SAVE-CASE SET-PORT-OUTPUT

RTN

@op-s ( x y char -- )

	STH
	STHk GET-INDEX STHr
	( hit edge ) .grid/height LDZ #01 - = ,&collide JCN
	( hit cell ) DUP2 #00 .grid/width LDZ ++ DATA-CELLS ++ LDA CHAR-DOT ! ,&collide JCN
	( write new ) STH2k ROTr STHr STH2r #00 .grid/width LDZ ++ ;set-port-raw JSR2
	( erase old ) STH2 CHAR-DOT STH2r ;set-port-raw JSR2
	RTN
	&collide
		POPr
		STH2 CHAR-BANG STH2r ;set-port-output JSR2

RTN

@op-t ( x y char -- )

	POP
	( get key ) DUP2 [ SWP #02 - SWP ] GET-PORT-LEFT STH
	( get len ) DUP2 [ SWP #01 - SWP ] GET-PORT-LEFT 1MIN STHk
	#00
	&loop
		( x+i+1,y ) STHk OVR2 STHr ROT + INC SWP
		( lock ) DUP2 #01 SET-LOCK
		( type ) LOCKED-TYPE SET-TYPE
		INC GTHk ,&loop JCN
	POP2
	( read )
	( x-offset ) DUP2 SWP INC SWP STH2r MOD ROT + SWP
	( x,y ) GET-PORT-RIGHT-RAW STH INC
	STHr SET-PORT-OUTPUT

RTN

@op-u ( x y char -- )

	POP
	( get step ) DUP2 [ SWP #01 - SWP ] GET-PORT-LEFT STH
	( get max ) DUP2 [ SWP INC SWP ] GET-PORT-RIGHT 1MIN STH
	( incr y ) INC
	( frame + max - 1 ) .timer/frame LDZ2 STHkr TOS ++ #0001 --
	( * step ) OVRr STHr TOS **
	( % max ) STHkr TOS MOD2
	( + step ) SWPr STHr TOS ++
	( bucket >= max ) STHr TOS << #01 !
	( bang if equal ) #fc * CHAR-DOT +
	SET-PORT-OUTPUT

RTN

@op-v ( x y char -- )

	POP
	( get write ) DUP2 [ SWP #01 - SWP ] GET-PORT-LEFT STH
	( get read ) DUP2 [ SWP INC SWP ] GET-PORT-RIGHT-RAW STH
	OVRr STHr ,&write JCN
	( incr y ) INC
	( load ) STHr GET-VALUE .variables + LDZ SET-PORT-OUTPUT
	POPr
	RTN
	&write
	( save ) STH2r SWP .variables + STZ POP2

RTN

@op-w ( x y char -- )

	STH
	OVR STH GET-INDEX STHr
	( hit edge ) #00 = ,&collide JCN
	( hit cell ) DUP2 #0001 -- DATA-CELLS ++ LDA CHAR-DOT ! ,&collide JCN
	( write new ) STH2k ROTr STHr STH2r #0001 -- ;set-port-raw JSR2
	( erase old ) STH2 CHAR-DOT STH2r ;set-port-raw JSR2
	RTN
	&collide
		POPr
		STH2 CHAR-BANG STH2r ;set-port-output JSR2

RTN

@op-x ( x y char -- )

	POP
	( get value ) DUP2 [ SWP INC SWP ] GET-PORT-RIGHT-RAW STH
	( get x ) DUP2 [ SWP #02 - SWP ] GET-PORT-LEFT STH
	( get y ) DUP2 [ SWP #01 - SWP ] GET-PORT-LEFT STH
	( incr y ) STH2r INC ++ STHr
	SET-PORT-OUTPUT

RTN

@op-y ( x y char -- )

	POP ( TODO: Wiring )
	GET-INDEX STH2k
	( get left ) DEC2 ;get-port-raw JSR2
	( set right ) STH2r INC2 ;set-port-output JSR2

RTN

@op-z ( x y char -- )

	POP
	( get case ) DUP2 [ SWP INC SWP ] LOAD-CASE STH
	( get rate ) DUP2 [ SWP #01 - SWP ] GET-PORT-LEFT STH
	( get target ) DUP2 [ SWP INC SWP ] GET-PORT-RIGHT STH
	( incr y ) INC
	( get val ) DUP2 GET-CELL GET-VALUE STH
	EQUkr STHr ,&end JCN
	LTHkr STHr #00 ! ,&no-below JCN
		( val rate + ) STHr OVRr STH SWPr ADDr
		( clamp ) GTHkr STHr SWPr?
		,&end JMP
		&no-below
	GTHkr STHr #00 ! ,&no-above JCN
		( val rate - ) STHr OVRr STH SWPr SUBr
		( clamp ) LTHkr STHr SWPr?
		&no-above
	&end
	STHr GET-CHAR POP2r SAVE-CASE SET-PORT-OUTPUT

RTN

@op-bang ( x y char -- )

	POP
	CHAR-DOT SET-CELL

RTN

@op-comment ( x y char -- )

	POP
	STH
	.grid/width LDZ SWP INC
	&loop
		DUP STHkr
		( lock )  DUP2 #01 SET-LOCK
		( close ) DUP2 GET-CELL CHAR-HASH = ,&end JCN
		( type )  LOCKED-TYPE SET-TYPE
		INC GTHk ,&loop JCN
	POP2 POPr
	RTN
	&end
	POP2 POP2 POPr

RTN

@op-synth ( x y char -- )

	POP
	( get channel ) DUP2 [ SWP INC SWP ] GET-PORT-RIGHT STH
	( get octave ) DUP2 [ SWP #02 + SWP ] GET-PORT-RIGHT [ #0c * ] STH
	( get note ) DUP2 [ SWP #03 + SWP ] GET-PORT-RIGHT-RAW
		( req note ) DUP CHAR-DOT ! ,&is-active JCN [ POP POP2 POP2r RTN ] &is-active GET-NOTE STH ADDr
	( req bang ) DUP2 ;get-bang JSR2 ,&is-bang [ JCN POP2 POP2r RTN ] &is-bang
	STHr .Audio0/pitch STHr 4MOD 10* + DEO
	IO-TYPE SET-TYPE

RTN

@op-midi ( x y char -- )

	POP
	( get channel ) DUP2 [ SWP INC SWP ] GET-PORT-RIGHT STH
	( get octave ) DUP2 [ SWP #02 + SWP ] GET-PORT-RIGHT [ #0c * ] STH
	( get note ) DUP2 [ SWP #03 + SWP ] GET-PORT-RIGHT-RAW
		( req note ) DUP CHAR-DOT ! ,&is-active JCN [ POP POP2 POP2r RTN ] &is-active GET-NOTE STH
	( req bang ) DUP2 ;get-bang JSR2 ,&is-bang JCN [ POP2 POP2r POPr RTN ] &is-bang
	IO-TYPE SET-TYPE
	ADDr
	( note on ) OVRr STHr .Console/write DEO STHkr .Console/write DEO #7f .Console/write DEO
	( note off ) OVRr STHr .Console/write DEO STHkr .Console/write DEO #00 .Console/write DEO
	POP2r

RTN

@op-note ( x y char -- )

	POP
	DUP2
		;get-bang JSR2 STH
		GET-INDEX STH2k
	( get a ) INC2 ;get-port-right JSR2
	( get b ) STH2kr INC2 INC2 ;get-port-right JSR2
	( req bang ) ROTr STHr ,&is-bang JCN [ POP2 POP2r RTN ] &is-bang
	( set type ) STH2r IO-TYPE ROT ROT DATA-TYPES ++ STA
	( send note ) SWP #0c * + .Console/write DEO

RTN

@op-byte ( x y char -- )

	POP
	DUP2
		;get-bang JSR2 STH
		GET-INDEX STH2k
	( get a ) INC2 ;get-port-right JSR2
	( get b ) STH2kr INC2 INC2 ;get-port-right JSR2
	( req bang ) ROTr STHr ,&is-bang JCN [ POP2 POP2r RTN ] &is-bang
	( set type ) STH2r IO-TYPE ROT ROT DATA-TYPES ++ STA
	( write byte ) #0f AND SWP #0f AND #40 SFT + .Console/write DEO

RTN

( drawing )

@draw-meter ( -- )

	.toolbar/y1 LDZ2 #0001 -- .Screen/y DEO2

	( merge channels )
	.Audio0/output DEI DUP #0f AND STH #04 SFT STH
	.Audio1/output DEI DUP #0f AND STH #04 SFT STH
		ROTr ADDr ROTr ROTr ADDr SWPr
	.Audio2/output DEI DUP #0f AND STH #04 SFT STH
		ROTr ADDr ROTr ROTr ADDr SWPr
	.Audio3/output DEI DUP #0f AND STH #04 SFT STH
		ROTr ADDr ROTr ROTr ADDr SWPr

	( draw )
	#00 #08
	&loop
		.toolbar/x2 LDZ2 #0028 -- .Screen/x DEO2
		DUP OVRr STHr 4/ < .Screen/pixel DEO
		.toolbar/x2 LDZ2 #0026 -- .Screen/x DEO2
		DUP STHkr 4/ < .Screen/pixel DEO
		.Screen/y DEI2 INC2 .Screen/y DEO2
		#01 - LTHk ,&loop JCN
	POP2

	POP2r

RTN

@draw-toolbar ( -- )

	( skip on small screens )
	.toolbar/y1 LDZ2 .Screen/height DEI2 << RTN?

	.toolbar/y1 LDZ2 .Screen/y DEO2

	( Positions )
	.grid/x1 LDZ2 .Screen/x DEO2
	.selection/x1 LDZ #01 ;draw-byte JSR2
	.grid/x1 LDZ2 #0010 ++ .Screen/x DEO2
	.selection/y1 LDZ #01 ;draw-byte JSR2

	.grid/x1 LDZ2 #0020 ++ .Screen/x DEO2
	;font/selector .selection/insert LDZ TOS 10** ++
		#02 .selection/x1 LDZ2 .selection/x2 LDZ2 == +
		;draw-sprite JSR2

	( Frame )
	.grid/x1 LDZ2 #0030 ++ .Screen/x DEO2
	.timer/frame INC LDZ #01 ;draw-byte JSR2

	.grid/x1 LDZ2 #0040 ++ .Screen/x DEO2
	;font/beat
		#03 .timer/frame INC LDZ #07 AND #00 = -
		;draw-sprite JSR2

	( d-pad )
	.dpad LDZ DUP #20 < ,&no-dpad JCN
		.grid/x1 LDZ2 #0050 ++ STH2k .Screen/x DEO2
		DUP #04 ;draw-byte JSR2
		STH2kr #0010 ++ .Screen/x DEO2
		;font #00 ;draw-sprite JSR2
		STH2r #0018 ++ .Screen/x DEO2
		.dpad LDZ #01 ;draw-char JSR2
		,&continue JMP
		&no-dpad
	( Speed )
	.grid/x1 LDZ2 #0050 ++ .Screen/x DEO2
	.timer/speed LDZ #01 ;draw-byte JSR2
	.grid/x1 LDZ2 #0060 ++ .Screen/x DEO2
	( t ) LIT 't #03 ;draw-char JSR2
	.grid/x1 LDZ2 #0068 ++ .Screen/x DEO2
	( h ) LIT 'h #03 ;draw-char JSR2
	&continue
	POP

	( File )
	.grid/x2 LDZ2 STH2k #0018 -- .Screen/x DEO2
	;font/load #01 ;draw-sprite JSR2
	STH2r #0020 -- .Screen/x DEO2
	;font/make #01 ;draw-sprite JSR2

	( filepath )
	#03 ;draw-filepath JSR2

RTN

@draw-state ( -- )

	.toolbar/x2 LDZ2 #0008 -- .Screen/x DEO2
	.toolbar/y1 LDZ2 .Screen/y DEO2
	;font/save #01 .state/changed LDZ + ;draw-sprite JSR2

RTN

@draw-filepath ( color -- )

	STH
	.toolbar/y1 LDZ2 .Screen/y DEO2
	.toolbar/x1 LDZ2 #0078 ++ .Screen/x DEO2
	;path/name STHr ;draw-str JSR2

RTN

@redraw ( -- )

	.grid/height LDZ #00
	&ver
		( x ) .grid/x1 LDZ2 .Screen/x DEO2
		( y ) DUP #00 SWP 10** [ .grid/y1 LDZ2 ++ ] .Screen/y DEO2
		.grid/width LDZ #00
		&hor
			GET-ITER STH2k ,get-char JSR STH2r ,get-color JSR ;draw-char JSR2
			INC GTHk ,&hor JCN
		POP2
		INC GTHk ,&ver JCN
	POP2
	;draw-toolbar JSR2
	;draw-meter JSR2

RTN

@get-color ( x y -- type )

	STH2k GET-TYPE #06 SWP
	STH2r ,is-selected JSR JMP SWP POP
		TOS ;cell-styles ++ LDA

RTN

@get-char ( x y -- char )

	DUP2 GET-CELL
	DUP CHAR-DOT ! ,&no-bar JCN
		POP
		DUP2 GET-TYPE #00 = ,&no-port JCN
			POP2 LIT '. RTN &no-port
		DUP2 8MOD SWP 10MOD #0000 !! ,&no-marker4 JCN
			POP2 LIT '+ RTN &no-marker4
		DUP2 2MOD SWP 4MOD #0000 !! ,&no-marker2 JCN
			POP2 LIT '. RTN &no-marker2
		POP2 
		#20 RTN
	&no-bar
	ROT ROT POP2

RTN

@is-selected ( x y -- bool )

	OVR .selection/x1 LDZ < ,&end JCN
	OVR .selection/x2 LDZ > ,&end JCN
	DUP .selection/y1 LDZ < ,&end JCN
	DUP .selection/y2 LDZ > ,&end JCN
		POP2 #01 RTN
	&end
	POP2 #00

RTN

@draw-str ( str* color -- )

	STH
	&while
		LDAk STHkr ,draw-char JSR
		INC2 LDAk ,&while JCN
	POP2
	POPr

RTN

@draw-byte ( byte color -- )

	STH
	DUP #04 SFT GET-CHAR STHkr ,draw-char JSR
	#0f AND GET-CHAR STHr ,draw-char JSR

RTN

@draw-char ( char color -- )

	STH #20 - TOS 10** ;font ++ STHr ,draw-sprite JSR

RTN

@draw-sprite ( addr* color -- )
	
	STH .Screen/addr DEO2
	.Screen/y DEI2
	STHr .Screen/sprite DEOk DEO
	.Screen/y DEO2
	.Screen/x DEI2k #0008 ++ ROT DEO2

RTN

( file )

@new-file ( default* -- )

	#00 ;draw-filepath JSR2 
	( clear variables )
	;variables #0024 ;mclr JSR2
	;clear-grid JSR2
	( rename to untitled.txt )
	;path/name #0020 ;mclr JSR2
	;untitled-txt ;path/name #000d ;mcpy JSR2
	;redraw JSR2
	RESET-STATE

RTN

@load-file ( -- )

	;path/name .File/name DEO2
	#0001 .File/length DEO2
	( x,y ) LIT2r 0000
	&stream
		;&b .File/read DEO2
		( write )
		;&b LDA IS-CHAR-KEY #00 = ,&invalid JCN
			OVRr STHr STHkr ;&b LDA SET-CELL
			&invalid
		( incr-x ) SWPr INCr SWPr
		( incr-y )
		;&b LDA #0a ! ,&no-lb JCN
			INCr NIPr LITr 00 SWPr
			&no-lb
		.File/success DEI2 #0000 !! ,&stream JCN
	POP2r
	;redraw JSR2
	RESET-STATE

RTN
	&b $1

@save-file ( -- )

	;path/name .File/name DEO2
	#0001 .File/length DEO2
	.grid/height LDZ #00
	&ver
		.grid/width LDZ #00
		&hor
			GET-ITER GET-INDEX DATA-CELLS ++ .File/write DEO2
			INC GTHk ,&hor JCN
		POP2
		( linebreak ) ;&lb .File/write DEO2
		INC GTHk ,&ver JCN
	POP2

RTN
	&lb 0a

( theme )

@theme-txt ".theme $1

@load-theme ( -- )

	;theme-txt .File/name DEO2
	#0006 .File/length DEO2
	#fffa .File/read DEO2
	.File/success DEI2 #0006 !! ,&ignore JCN
		#fffa LDA2 .System/r DEO2
		#fffc LDA2 .System/g DEO2
		#fffe LDA2 .System/b DEO2
		&ignore
	;redraw JSR2

RTN

( snarf )

@snarf-txt ".snarf $1

@copy-snarf ( -- )

	;snarf-txt .File/name DEO2
	#0001 .File/length DEO2
	.selection/y2 LDZ INC .selection/y1 LDZ
	&ver
		.selection/x2 LDZ INC .selection/x1 LDZ
		&hor
			GET-ITER GET-INDEX DATA-CELLS ++ .File/write DEO2
			INC GTHk ,&hor JCN
		POP2
		( linebreak ) ;&lb .File/write DEO2
		INC GTHk ,&ver JCN
	POP2

RTN
	&lb 0a

@paste-snarf ( -- )

	;snarf-txt .File/name DEO2
	#0001 .File/length DEO2
	( x,y ) LIT2r 0000
	&stream
		;&b .File/read DEO2
		( write )
		;&b LDA IS-CHAR-KEY #00 = ,&invalid JCN
			.selection/x1 LDZ OVRr STHr +
			.selection/y1 LDZ STHkr +
				;&b LDA SET-CELL
			&invalid
		( incr-x ) SWPr INCr SWPr
		( incr-y )
		;&b LDA #0a ! ,&no-lb JCN
			INCr NIPr LITr 00 SWPr
			&no-lb
		.File/success DEI2 #0000 !! ,&stream JCN
	POP2r

RTN
	&b $1

( string generics )

@slen ( str* -- len* )

	DUP2 ,scap JSR SWP2 --

RTN

@scap ( str* -- str-end* )

	LDAk #00 ! JMP RTN
	&while INC2 LDAk ,&while JCN

RTN

@sput ( str* char -- )

	ROT ROT ,scap JSR STA

RTN

@spop ( str* -- )

	( clamp ) LDAk #00 ! JMP RTN
	#00 ROT ROT ,scap JSR #0001 -- STA

RTN

( memory generics )

@mclr ( addr* len* -- )

	OVR2 ++ SWP2
	&loop
		STH2k #00 STH2r STA
		INC2 GTH2k ,&loop JCN
	POP2 POP2

RTN

@mcpy ( src* dst* len* -- )

	SWP2 STH2
	OVR2 ++ SWP2
	&loop
		LDAk STH2kr STA INC2r
		INC2 GTH2k ,&loop JCN
	POP2 POP2
	POP2r

RTN

( generics )

@within-rect ( x* y* rect -- flag )

	STH
	( y < rect.y1 ) DUP2 STHkr #02 + LDZ2 << ,&skip JCN
	( y > rect.y2 ) DUP2 STHkr #06 + LDZ2 >> ,&skip JCN
	SWP2
	( x < rect.x1 ) DUP2 STHkr LDZ2 << ,&skip JCN
	( x > rect.x2 ) DUP2 STHkr #04 + LDZ2 >> ,&skip JCN
	POP2 POP2 POPr
	#01
RTN
	&skip
	POP2 POP2 POPr
	#00

RTN

@print-hex ( value* -- )
	
	SWP ,&byte JSR 
	&byte ( byte -- )
		STHk #04 SFT ,&parse JSR #18 DEO
		STHr #0f AND ,&parse JSR #18 DEO
	RTN
	&parse ( byte -- char ) DUP #09 GTH ,&above JCN #30 + RTN 
	&above #57 + RTN

RTN

@untitled-txt  "untitled.orca $1

@lc-notes
	00 00 00 00 00 00 00 00
	00 00
	0a 0c 01 03 05 06 08 0a
	0c 0d 0f 11 12 14 16 18
	19 1b 1d 1e 20 22 24 25
	27 29

@uc-notes
	00 00 00 00 00 00 00 00
	00 00
	09 0b 00 02 04 05 07 09
	0b 0c 0e 10 11 13 15 17
	18 1a 1c 1d 1f 21 23 24
	26 28

@values ( char to b36 )
	00 00 00 00 00 00 00 00
	00 00 00 00 00 00 00 00
	00 01 02 03 04 05 06 07
	08 09 00 00 00 00 00 00
	00 0a 0b 0c 0d 0e 0f 10
	11 12 13 14 15 16 17 18
	19 1a 1b 1c 1d 1e 1f 20
	21 22 23 00 00 00 00 00
	00 0a 0b 0c 0d 0e 0f 10
	11 12 13 14 15 16 17 18
	19 1a 1b 1c 1d 1e 1f 20
	21 22 23 00 00 00 00 00

@b36clc ( b36 to char-lc )
	30 31 32 33 34 35 36 37
	38 39 61 62 63 64 65 66
	67 68 69 6a 6b 6c 6d 6e
	6f 70 71 72 73 74 75 76
	77 78 79 7a

@cell-styles
	03 ( 0 normal )
	03 ( 1 locked )
	01 ( 2 port-unlocked )
	04 ( 3 operator )
	02 ( 4 port-locked )
	08 ( 5 port-output )
	09 ( 6 selected )
	0c ( 7 io )

@cursor-icn     80c0 e0f0 f8e0 1000

~src/assets.tal
