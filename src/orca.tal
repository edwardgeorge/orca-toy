( Orca )

|00 @System &vector $2 &pad $6 &r $2 &g $2 &b $2
|10 @Console &vector $2 &read $1 &pad $5 &write $1
|20 @Screen &vector $2 &width $2 &height $2 &auto $1 &pad $1 &x $2 &y $2 &addr $2 &pixel $1 &sprite $1
|30 @Audio0 &vector $2 &position $2 &output $1 &pad $3 &adsr $2 &length $2 &addr $2 &volume $1 &pitch $1
|40 @Audio1 &vector $2 &position $2 &output $1 &pad $3 &adsr $2 &length $2 &addr $2 &volume $1 &pitch $1
|50 @Audio2 &vector $2 &position $2 &output $1 &pad $3 &adsr $2 &length $2 &addr $2 &volume $1 &pitch $1
|60 @Audio3 &vector $2 &position $2 &output $1 &pad $3 &adsr $2 &length $2 &addr $2 &volume $1 &pitch $1
|80 @Controller &vector $2 &button $1 &key $1
|90 @Mouse &vector $2 &x $2 &y $2 &state $1 &chord $1 &pad $4 &scrolly &scrolly-hb $1 &scrolly-lb $1
|a0 @File &vector $2 &success $2 &stat $2 &delete $1 &append $1 &name $2 &length $2 &read $2 &write $2
|c0 @DateTime &year $2 &month $1 &day $1 &hour $1 &minute $1 &second $1 &dotw $1 &doty $2 &isdst $1

( enums )

|00

	@types
		&default $1
		&locked $1
		&pl $1
		&op $1
		&pr $1
		&output $1
		&io $1
		&comment $1

|000

	@dpad $1 &last $1
	@timer &beat $1 &speed $1 &playing $1 &frame $1 &frame-lb $1
	@state &timer $1 &changed $1
	@help $1
	@filepath $40
	@grid &x1 $2 &y1 $2 &x2 $2 &y2 $2 &size &width $1 &height $1 &length $2
	@selection &from &x1 $1 &y1 $1 &to &x2 $1 &y2 $1
	@head &x $1 &y $1 &addr $2
	@variables $24
	@voices $40 &end ( len vel chn pitch )

|100 ( -> )

	( | meta )
	;meta #06 DEO2

	( | theme )
	#0f75 .System/r DEO2
	#0f7c .System/g DEO2
	#0f7a .System/b DEO2

	( | init random )
	init-prng

	( | drawing mode )
	#15 .Screen/auto DEO

	( | thinkpad: #02a8 x #0180 )
	#0328 .Screen/width DEO2
	#0200 .Screen/height DEO2

	( | size playdate
	#0190 .Screen/width DEO2
	#00f0 .Screen/height DEO2 )

	( | synths )
	#dd .Audio0/volume DEO #0118 .Audio0/adsr DEO2 #0100 .Audio0/length DEO2
	#ef .Audio1/volume DEO #0334 .Audio1/adsr DEO2 #0100 .Audio1/length DEO2
	#fe .Audio2/volume DEO #1414 .Audio2/adsr DEO2 #0100 .Audio2/length DEO2
	#dd .Audio3/volume DEO #222c .Audio3/adsr DEO2 #0100 .Audio3/length DEO2

	;sin-pcm .Audio0/addr DEO2
	;tri-pcm .Audio1/addr DEO2
	;saw-pcm .Audio2/addr DEO2
	;sqr-pcm .Audio3/addr DEO2

	( | x )
	#0010 .grid/x1 STZ2
	.Screen/width DEI2
		DUP2 #03 SFT2 NIP #04 SUB .grid/width STZ
		#01 SFT2 .grid/width LDZ #01 SFT #00 SWP #30 SFT2 ADD2 #0004 ADD2 .grid/x2 STZ2
	( | y )
	#0020 .grid/y1 STZ2
	.Screen/height DEI2
		DUP2 #04 SFT2 NIP #05 SUB .grid/height STZ
		#01 SFT2 .grid/height LDZ #01 SFT #00 SWP #40 SFT2 ADD2 .grid/y2 STZ2
	( | len )
	[ LIT2 00 -grid/height ] LDZ
	[ LIT2 00 -grid/width ] LDZ
		MUL2 .grid/length STZ2

	( | cache positions )
	.grid/x1 LDZ2
		DUP2 #0078 ADD2 ;draw-filepath/x STA2
		DUP2 ;draw-position/x STA2
		DUP2 #0030 ADD2 ;draw-timer/x STA2
		DUP2 #0050 ADD2 ;draw-dpad/x STA2
		#0050 ADD2 ;draw-speed/x STA2
	.grid/x2 LDZ2
		DUP2 #0008 SUB2 ;draw-state/x STA2
		#0028 SUB2 ;draw-meter/x STA2
	.grid/y2 LDZ2 #0010 ADD2
		DUP2 ;draw-dpad/y STA2
		DUP2 ;draw-position/y STA2
		DUP2 ;draw-timer/y STA2
		DUP2 ;draw-speed/y STA2
		DUP2 ;draw-state/y STA2
		DUP2 ;draw-filepath/y STA2
		;draw-meter/y STA2

	( | theme support )
	load-theme
	draw-menu

	( | blank file )
	file-new

	( | draw position )
	toggle-help
	toggle-grid
	draw-position

	( | start )
	.timer/playing LDZk #00 EQU SWP STZ

	( | vectors )
	untrap

BRK

@meta 00
	( name ) "Orca 0a
	( details ) "A 20 "Livecoding 20 "Playground 0a
	( author ) "By 20 "Hundred 20 "Rabbits 0a
	( date ) "15 20 "Apr 20 "2025 00
	02
		( icon ) 83 =appicon
		( mask ) 41 1705

@manifest
	05 "Orca $1
		01 "n =file-new "New $1
		01 "r =trap "Rename $1
		01 "o =file-open "Open $1
		01 "s =file-save "Save $1
		01 "q =exit "Exit $1
	06 "Edit $1
		01 "c =edit-copy "Copy $1
		01 "v =edit-paste "Paste $1
		01 "x =edit-cut "Cut $1
		01 "i =toggle-insert "Insert $1
		00 08 =edit-erase "Erase $1
		01 "b =edit-comment "Comment $1
	04 "Play $1
		00 20 =play-toggle "Pause $1
		00 0d =play-step "Step $1
		01 ", =play-decr "Decr $1
		01 ". =play-incr "Incr $1
	02 "View $1
		01 "g =toggle-grid "Grid $1
		01 "h =toggle-help "Help $1
	02 "Select $1
		00 1b =set-sel-reset "Reset $1
		01 "a =set-sel-all "All $1
	$1

(
@|vectors )

@untrap ( -- )

	( vectors )
	;on-console .Console/vector DEO2
	;on-button .Controller/vector DEO2
	;on-mouse .Mouse/vector DEO2
	;on-frame .Screen/vector DEO2
	#01 draw-filepath
	#00 .Mouse/state DEO

JMP2r

@trap ( -- )

	( vectors )
	;on-button-trap .Controller/vector DEO2
	;on-mouse-trap .Mouse/vector DEO2
	;on-frame-trap .Screen/vector DEO2
	#00 .Mouse/state DEO
	( clear cursor )
	#40

!draw-cursor

@on-console ( -> )

	#00 draw-filepath
	( start )
	[ LIT &listening $1 ] ?&no-start
		#01 ,&listening STR
		;filepath #0040 mclr
		&no-start
	( end )
	.Console/read DEI
	DUPk #1f GTH SWP #7f LTH AND ?&no-end
		#00 ,&listening STR
		&no-end
	( capture )
	capture-trap
	#01 draw-filepath

BRK

@on-frame-trap ( -> )

	.state/timer LDZ
	DUP #07 AND ?&no-blink
		DUP #03 SFT #01 AND #30 SFT INC draw-filepath
		&no-blink
	INC .state/timer STZ

BRK

@on-button-trap ( -> )

	#00 draw-filepath
	.Controller/key DEI DUP #0d EQU #03 MUL SUB capture-trap
	#01 draw-filepath

BRK

@capture-trap ( button -- )

	DUP ?&no-null POP JMP2r &no-null
	[ #08 ] NEQk NIP ?&no-pop ;filepath spop POP JMP2r &no-pop
	[ #0a ] NEQk NIP ?&no-load file-open &no-load
	[ #7f ] NEQk NIP ?&no-delete ;filepath #0040 mclr POP JMP2r &no-delete
	[ #20 ] GTHk NIP ?&no-special untrap POP JMP2r &no-special
	;filepath slen NIP #3f EQU ?&no-push
		DUP ;filepath sput
		&no-push
	POP

JMP2r

@on-mouse-trap ( -> )

	( release trap on touch )
	.Mouse/state DEI #00 NEQ [ JMP BRK ]
	untrap

BRK

@on-frame ( -> )

	( paused )
	.timer/playing LDZ [ JMP BRK ]
	( on beat )
	.timer LDZ2 NEQ ?&skip
		run
		&skip
	( inc beat )
	.timer/beat LDZk INC SWP STZ

BRK

@on-button ( -> )

	.Controller/button DEI2 find-modkey ORAk #00 EQU ?&skip
		JSR2 BRK
		&skip
	POP2

	( d-pad handler )
	.Controller/button DEI .dpad/last LDZ
	DUP2 #0200 EQU2 ?on-dpad/start
	DUP2 #0002 EQU2 ?on-dpad/end
	DUP #0f AND #02 EQU ?on-dpad/add
	POP ( pop last )
	.dpad/last STZ

	( modifier handlers )
	.Controller/button DEI #f0 AND ?on-button-arrow

	( default )
	.Controller/key DEI
		DUP ci-key #00 EQU ?&no-input
			DUP fill-sel
		&no-input
	POP

BRK

@on-button-insert ( -> )

	.Controller/key DEI
	[ #00 ] EQUk NIP ?&end
	[ #1b ] NEQk NIP ?&no-esc toggle-insert POP BRK &no-esc
	[ #20 ] NEQk NIP ?&no-spc #01 #0000 mod-sel POP BRK &no-spc
	[ #08 ] NEQk NIP ?&no-bks #ff #0000 mod-sel LIT ". fill-sel POP BRK &no-bks
	DUP ci-key #00 EQU ?&no-key
		DUP fill-sel #01 #0000 mod-sel &no-key
	&end
	POP

BRK

@on-button-arrow ( -> )

	( capture )
	.Controller/button DEI
	DUP #0f AND ,&mod STR
	#04 SFT #00 OVR #03 AND ;&vec ADD2 LDA ,&y STR
	#02 SFT #00 SWP #03 AND ;&vec ADD2 LDA ,&x STR
	[ LIT &x $1 ] [ LIT &y $1 ] [ LIT &mod $1 ] mod-sel

BRK
	&vec 00 ff 01 00

@on-mouse ( -> )

	.Mouse/y DEI2 #0014 LTH2 ?trap-menu

	#43 .Mouse/state DEI #00 NEQ SUB ;cursor-icn update-cursor

	( restore auto after cursor drawing )
	#15 .Screen/auto DEO

	.Controller/button DEI #02 NEQ ?&no-scroll
	.Mouse/scrolly-lb DEI #00 EQU ?&no-scroll
		.Mouse/scrolly-lb DEI !on-dpad/mod
		&no-scroll

	( route )
	.Mouse/x DEI2 .grid/x1 LDZ2 LTH2 ?&skip
	.Mouse/x DEI2 .grid/x2 LDZ2 GTH2 ?&skip
		.Mouse/y DEI2 .grid/y2 LDZ2 GTH2 ?&no-grid
			!on-mouse-grid
			&no-grid
		.Mouse/y DEI2 .grid/y2 LDZ2 SUB2 NIP #04 SFT #01 EQU ?on-mouse-toolbar
		&skip
	#00 .Mouse/state DEO

BRK

@on-mouse-grid ( -> )

	.Mouse/state DEI [ LIT &last $1 ]
		ORAk #00 EQU ?&end
		( on down )
		DUP2 #0100 NEQ2 ?&no-down
			get-pos set-sel-from
			!&end
			&no-down
		( on release )
		get-pos set-sel-to
	&end
	POP ,&last STR

BRK

@get-pos ( -- x y )

	.Mouse/x DEI2 .grid/x1 LDZ2 SUB2 #03 SFT2 NIP
	.Mouse/y DEI2 .grid/y1 LDZ2 SUB2 #04 SFT2 NIP

JMP2r

@on-mouse-toolbar ( -> )

	( skip ) .Mouse/state DEI #01 JCN [ BRK ]

	( release )
	#00 .Mouse/state DEO

	( left-side )
	.Mouse/x DEI2 .grid/x1 LDZ2 SUB2 #03 SFT2 NIP
	[ #05 ] GTHk NIP ?&no-insert toggle-insert POP BRK &no-insert
	[ #09 ] GTHk NIP ?&no-pause play-toggle POP BRK &no-pause
	[ #0d ] GTHk NIP ?&no-speed [ .Mouse/state DEI #01 EQU DUP ADD #01 SUB ] mod-speed POP BRK &no-speed
	[ #0e ] GTHk NIP OVR .grid/width LDZ SWP SUB #06 GTH #0101 NEQ2 ?&no-rename trap &no-rename
	POP
	( right-side )
	.grid/x2 LDZ2 .Mouse/x DEI2 SUB2 #03 SFT2 NIP
	[ #00 ] NEQk NIP ?&no-save file-save &no-save
	[ #02 ] NEQk NIP ?&no-help toggle-grid &no-help
	POP

BRK

@on-dpad ( -> )

	&start ( button* -> )
		POP .dpad/last STZ
		#20 .dpad STZ
		draw-dpad
		BRK
	&end ( button* -> )
		POP
		.dpad LDZ fill-sel
		.selection/from LDZ2 set-sel-from
		#00 .dpad STZ
		.dpad/last STZ
		draw-speed
		BRK
	&add ( button* -> )
		POP #04 SFT
	&mod ( mod -> )
		.dpad LDZ ADD
			( min ) #20 OVR #20 GTH [ JMP SWP POP ]
			( max ) #7e OVR #7e LTH [ JMP SWP POP ]
				.dpad STZ
		draw-dpad

BRK

(
@|core )

@init ( -- )

	;data/cells .grid/length LDZ2 [ LIT2 ".. ] mfil
	&grid
	;data/locks .grid/length LDZ2 #0000 mfil
	;data/types .grid/length LDZ2 #0000 mfil
	;variables #0024 [ LIT2 ".. ]

!mfil


@run ( -- )

	init/grid
	( reset head ) LIT2r 0000
	.grid/height LDZ #00
	&ver
		DUP .head/y STZ
		.grid/width LDZ #00
		&hor
			DUP .head/x STZ
			STH2kr run-char
			INC2r
			INC GTHk ?&hor
		POP2
		INC GTHk ?&ver
	POP2
	POP2r
	( do not draw when menu )
	;draw-menu/sel LDA INC ?&skip
		draw-grid
		draw-timer
		&skip
	.timer/frame LDZ2k INC2 ROT STZ2
	#00 .timer/beat STZ

!manage-voices

@run-char ( id* -- )

	( cache )
	DUP2 .head/addr STZ2
	( skip locked )
	DUP2 read-lock ?&locked
	( run unlocked )
	DUP2 ;data/cells ADD2 LDA
	#00 SWP #20 SUB DUP ADD ;op-ascii ADD2 LDA2 JMP2
	&locked
	POP2

JMP2r

(
@|actions )

@play-decr ( -- ) #ff !mod-speed
@play-incr ( -- ) #01 !mod-speed

@mod-sel ( x y mod -- )

	DUP #04 NEQ ?&no-scale
		POP
		.selection/to LDZ2 add-pos !set-sel-to
		&no-scale
	DUP #01 NEQ ?&no-drag
		POP
		edit-cut
		STH2k .selection/from LDZ2 add-pos
		STH2r .selection/to LDZ2 add-pos
			set-sel-range
		!edit-paste
		&no-drag
	POP
	( default )
	STH2k .selection/from LDZ2 add-pos
	STH2r .selection/to LDZ2 add-pos

!set-sel-range

@add-pos ( xy xy -- xy ) ROT ADD STH ADD STHr JMP2r

@set-sel-reset ( -- ) .selection/from LDZ2 !set-sel-from
@set-sel-all ( -- ) #0000 .grid/size LDZ2 !set-sel-range
@set-sel-from ( x y -- ) DUP2 !set-sel-range

@set-sel-to ( x y -- )

	.selection/from LDZ2 SWP2

@set-sel-range ( from* to* -- )

	( clamp top-left )
	OVR2 #ff NEQ SWP #ff NEQ AND ?&no-tl
		POP2 POP2 JMP2r
		&no-tl
	( clamp bottom-right )
	OVR2 .grid/height LDZ LTH SWP .grid/width LDZ LTH AND ?&no-br
		POP2 POP2 JMP2r
		&no-br
	( from )
	SWP2 DUP2 .selection/from LDZ2 NEQ2 STH .selection/from STZ2
	( to )
	.selection/y1 LDZ GTHk [ JMP SWP POP ] .grid/height LDZ #01 SUB LTHk [ JMP SWP POP ] STH
	.selection/x1 LDZ GTHk [ JMP SWP POP ] .grid/width LDZ #01 SUB LTHk [ JMP SWP POP ] STHr
	DUP2 .selection/to LDZ2 NEQ2 STH .selection/to STZ2
	( skip redraw when unchanged )
	ADDr STHr #01 JCN [ JMP2r ]
	( hide help )
	#00 .help STZ
	( redraw )
	draw-grid

!draw-position

@fill-sel ( char -- )

	DUP #20 GTH ?&valid
		POP JMP2r
		&valid

	,&c STR
	.selection/y2 LDZ INC .selection/y1 LDZ
	&ver
		STHk
		.selection/x2 LDZ INC .selection/x1 LDZ
		&hor
			DUP STHkr [ LIT &c $1 ] set-cell
			INC GTHk ?&hor
		POP2 POPr
		INC GTHk ?&ver
	POP2
	[ LIT2 01 -state/changed ] STZ

!draw-state

@is-selected ( x y -- bool )

	DUP .selection/y1 LDZ LTH ?&outside
	DUP .selection/y2 LDZ GTH ?&outside
	OVR .selection/x1 LDZ LTH ?&outside
	OVR .selection/x2 LDZ GTH ?&outside
	POP2 #01

JMP2r
	&outside POP2 #00 JMP2r

@mod-speed ( mod -- )

	.timer/speed LDZ ADD

@set-speed ( speed -- )

	#1f AND #04 GTHk [ JMP SWP POP ] .timer/speed STZ
	#00 .timer/beat STZ

!draw-speed

@toggle-insert ( -- )

	;on-button ;on-button-insert
		.Controller/vector DEI2 ;on-button-insert EQU2
			[ JMP SWP2 POP2 ]
			.Controller/vector DEO2

!draw-position

@play-toggle ( -- )

	.timer/playing LDZk #00 EQU SWP STZ

!draw-timer

@play-step ( -- )

	.timer/playing LDZ ?&skip
		run
		&skip
	#00 .timer/playing STZ

!draw-timer

@toggle-help ( -- )

	.help LDZk #00 EQU SWP STZ

!draw-grid

@toggle-grid ( -- )

	;get-char/grid LDA DUP #00 EQU ;get-char/grid STA
	draw-grid
	( icon )
	.grid/y2 LDZ2 #0010 ADD2 .Screen/y DEO2
	.grid/x2 LDZ2 #0018 SUB2 .Screen/x DEO2
	#00 SWP #40 SFT2 ;help-icn ADD2 .Screen/addr DEO2
	[ LIT2 01 -Screen/sprite ] DEO

JMP2r

@get-color ( -- char type )

	.head LDZ2 is-selected ?&selected
		#00 .head/addr LDZ2 read-type ;styles-lut ADD2 LDA JMP2r
	&selected
		#0c

JMP2r

@get-char ( addr* -- char )

	;data/cells ADD2 LDA
	DUP LIT ". NEQ ?&no-bar
		POP
		[ LIT &grid $1 ] ?&do-grid
			#20 JMP2r
			&do-grid
		.head LDZ2
		DUP2 #07 AND SWP #0f AND ORA ?&no-cross
			POP2 #7f JMP2r
			&no-cross
		DUP2 #01 AND SWP #03 AND ORA ?&no-dot
			&dot POP2 LIT ". JMP2r
			&no-dot
		DUP2 is-selected ?&dot
		.head/addr LDZ2 read-type ?&dot
		POP2 #20
	&no-bar

JMP2r

@get-word ( addr* -- word* )

	;&word #0020 mclr
	&while
		INC2 DUP2 read-cell
			DUP LIT ". EQU ?&skip
				DUP ;&word sput
				&skip
			LIT ". NEQ ?&while
	POP2
	;&word

JMP2r
	&word $20

@get-strw ( str* -- width* )

	slen #30 SFT2

JMP2r

@get-bang ( -- bang )

	.head/addr LDZ2 ;data/cells ADD2 STH2k
	( left ) #0001 SUB2 LDA LIT "* EQU ?&bang
	( top ) STH2kr [ LIT2 00 -grid/width ] LDZ SUB2 LDA LIT "* EQU ?&bang
	( right ) STH2kr INC2 LDA LIT "* EQU ?&bang
	( bottom ) STH2kr [ LIT2 00 -grid/width ] LDZ ADD2 LDA LIT "* EQU ?&bang
	POP2r #00
JMP2r
	&bang POP2r #01 JMP2r

@lerp ( rate target val -- val )

	DUP2 GTHk [ JMP SWP SUB ] STH
	( if rate GTH target )
	ROT DUP STHr LTH ?&skip
		POP2 JMP2r
		&skip
	( target val rate )
	STH
	GTHk ?&no-below
		NIP STHr SUB JMP2r
		&no-below
	NIP STHr ADD

JMP2r

(
@|voices ) ( len vel chn note )

@release-voice ( voice -- )

	( chn ) INC INC LDZ2 SWP .Console/write DEO
	( note ) .Console/write DEO
	( vel ) #00 .Console/write DEO

JMP2r

@add-voice ( chn pitch len vel -- )

	OVR2 find-voice DUP #ff EQU ?&no-voice
		DUP release-voice
		#00 OVR STZ
		&no-voice POP
	( save )
	next-voice STHk STZ2
	INCkr INCr STHr STZ2
	STHr

	( chn ) INC INCk LDZ2 SWP .Console/write DEO
	( note ) .Console/write DEO
	( vel ) LDZ .Console/write DEO

JMP2r

@find-voice ( chn pitch -- <voice> )

	,&t STR2
	.voices/end .voices
	&l
		LDZk #00 EQU ?&skip
			INCk INC LDZ2 [ LIT2 &t $2 ] NEQ2 ?&skip
			NIP JMP2r
			&skip
		#04 ADD GTHk ?&l
	POP2
	#ff

JMP2r

@next-voice ( -- voice )

	.voices/end .voices
	&l
		LDZk #00 EQU ?&end
		#04 ADD GTHk ?&l
	&end NIP

JMP2r

@manage-voices ( -- )

	#1000
	&l
		DUP #20 SFT .voices ADD LDZk #00 EQU ?&no-voice
			( decrement ) LDZk #01 SUB OVR STZ
			LDZk ?&no-voice
			DUP release-voice
			&no-voice POP
		INC GTHk ?&l
	POP2

JMP2r

@count-voices ( -- count )

	LITr 00
	.voices/end .voices
	&l
		LDZk #00 NEQ STH ADDr
		#04 ADD GTHk ?&l
	&end POP2
	STHr

JMP2r

(
@|drawing )

@redraw-all ( -- )

@draw-grid ( -- )

	( reset head ) LIT2r 0000
	.grid/height LDZ #00
	&ver
		DUP .head/y STZ
		( x ) .grid/x1 LDZ2 .Screen/x DEO2
		( y ) #00 OVR #40 SFT2 .grid/y1 LDZ2 ADD2 .Screen/y DEO2
		.grid/width LDZ #00
		&hor
			DUP .head/x STZ
			STH2kr .head/addr STZ2
			STH2kr get-char get-color draw-chr-color
			( underline )
			STH2kr read-lock #02 NEQ ?&no-lock
				.Screen/x DEI2k #0008 SUB2 ROT DEO2
				;underline-icn .Screen/addr DEO2
				#0f .Screen/sprite DEO
				&no-lock
			INC2r
			INC GTHk ?&hor
		POP2
		INC GTHk ?&ver
	POP2
	POP2r
	( draw meter )
	draw-meter
	( draw-voices )
	( draw help )
	.help LDZ ?draw-help

JMP2r

@draw-help ( -- )

	.Screen/width DEI2 #0200 GTH2 ?&continue
		JMP2r
		&continue

	#0020 #0000
	&loop
		( x ) DUP2 #84 SFT2 .grid/x1 LDZ2 ADD2 #0020 ADD2 .Screen/x DEO2
		( y ) DUP2 #000f AND2 #40 SFT2 .grid/y1 LDZ2 ADD2 #0020 ADD2 .Screen/y DEO2
		.Screen/y DEI2 .grid/y2 LDZ2 #0030 SUB2 GTH2 ?&skip
		DUP2k ADD2 ;docs-lut ADD2 LDA2
		( glyph )
			LDAk #0c draw-chr-color
		( space )
			[ LIT2 00 -Screen/sprite ] DEO
		( text )
			INC2 #01 draw-str-color
		&skip
		INC2 GTH2k ?&loop
	POP2 POP2

JMP2r

@draw-voices ( -- )

	#04 ;draw-chr/color STA
	#1000
	&l
		#00 OVR #74 SFT2 .grid/x2 LDZ2 #00d0 SUB2 ADD2 .Screen/x DEO2
		#00 OVR #0f AND #40 SFT2 .grid/y1 LDZ2 ADD2 #0010 ADD2 .Screen/y DEO2
		DUP #20 SFT .voices ADD LDZk #00 EQU ?&skip
			LDZ2k draw-short INC INC LDZ2k draw-short
			&skip
			POP
		INC GTHk ?&l
	POP2

JMP2r

@draw-dpad ( -- )

	[ LIT2 &x $2 ] .Screen/x DEO2
	[ LIT2 &y $2 ] .Screen/y DEO2
	( value )
	#04 ;draw-chr/color STA
	.dpad LDZ draw-byte
	( space )
	[ LIT2 00 -Screen/sprite ] DEO
	( icon )
	.dpad LDZ #01

!draw-chr-color

@draw-position ( -- )

	[ LIT2 &x $2 ] .Screen/x DEO2
	[ LIT2 &y $2 ] .Screen/y DEO2
	( draw size )
	.selection/from LDZ2 .selection/to LDZ2 EQU2k ?&normal
		SWP2 SUB2 DUP2
		&normal
	( value )
	#01 ;draw-chr/color STA
	POP2 draw-short
	( icon )
	;selector-icn #00 .Controller/vector DEI2 ;on-button-insert EQU2 #40 SFT2 ADD2 .Screen/addr DEO2
	#02 .selection/from LDZ2 .selection/to LDZ2 NEQ2 ADD .Screen/sprite DEO

JMP2r

@draw-timer ( -- )

	[ LIT2 &x $2 ] .Screen/x DEO2
	[ LIT2 &y $2 ] .Screen/y DEO2
	( value )
	.timer/frame-lb LDZ
		DUP #03 .timer/playing LDZ DUP ADD SUB ;draw-chr/color STA
		draw-byte
	( icon )
	;beat-icn .Screen/addr DEO2
	#02 SWP #07 AND #00 EQU ADD .Screen/sprite DEO

JMP2r

@draw-speed ( -- )

	[ LIT2 &x $2 ] .Screen/x DEO2
	[ LIT2 &y $2 ] .Screen/y DEO2
	( value )
	#01 ;draw-chr/color STA
	.timer/speed LDZ draw-byte
	( th )
	;&th #03

!draw-str-color
	&th "th $1

@draw-state ( -- )

	[ LIT2 &x $2 ] .Screen/x DEO2
	[ LIT2 &y $2 ] .Screen/y DEO2
	( icon )
	;save-icn .Screen/addr DEO2
	.state/changed LDZ DUP ADD INC .Screen/sprite DEO

JMP2r

@draw-filepath ( color -- )

	[ LIT2 &x $2 ] .Screen/x DEO2
	[ LIT2 &y $2 ] .Screen/y DEO2
	( icon )
	;filepath ROT

!draw-str-color

@draw-meter ( -- )

	[ LIT2 &x $2 ] .Screen/x DEO2
	[ LIT2 &y $2 ] .Screen/y DEO2
	;meter-icn #00 count-voices #40 SFT2 ADD2 .Screen/addr DEO2
	#01 .Screen/sprite DEO

JMP2r

@draw-short ( short* -- )

	SWP draw-byte

@draw-byte ( byte -- )

	DUP #04 SFT draw-hex

@draw-hex ( byte -- )

	#0f AND DUP #09 GTH #07 MUL ADD #30 ADD

!draw-chr

@draw-chr-color ( char color -- )

	,draw-chr/color STR

@draw-chr ( char -- )

	#20 SUB #00 SWP #40 SFT2 ;font ADD2 .Screen/addr DEO2
	[ LIT2 &color 01 -Screen/sprite ] DEO

JMP2r

@draw-str-right ( text* -- )

	DUP2 get-strw STH2
	.Screen/x DEI2k STH2r SUB2 ROT DEO2

@draw-str ( str* -- str* )

	LDAk #00 EQU ?&skip
	&while
		LDAk draw-chr
		INC2 LDAk ?&while
	&skip
	INC2

JMP2r

@draw-str-color ( str* color -- )

	,draw-chr/color STR
	draw-str POP2

JMP2r

(
@|document )

@untitled-txt "untitled.orca $1

@file-new ( -- )

	init

	( rename to untitled.txt )
	#00 draw-filepath
	;filepath #0040 mclr
	;untitled-txt ;filepath #000d mcpy
	#01 draw-filepath

	( default speed )
	#0b set-speed

	run
	[ LIT2 00 -state/changed ] STZ

!draw-state

@file-open ( -- )

	#0000 ;filepath inject-file
	draw-grid
	[ LIT2 00 -state/changed ] STZ

!draw-state

@inject-file ( x y path* -- )

	.File/name DEO2
	#0001 .File/length DEO2
	OVR ,&anchor-x STR
	&stream
		;&b .File/read DEO2
		( write )
		;&b LDA ci-key #00 EQU ?&invalid
			DUP2 ;&b LDA set-cell
			&invalid
		( inc x ) SWP INC SWP
		;&b LDA #0a NEQ ?&no-lb
			( inc y ) INC
			( reset x ) [ LIT &anchor-x $1 ] ROT POP SWP
			&no-lb
		.File/success DEI2 ORA ?&stream
	POP2

JMP2r
	&b $1

@file-save ( -- )

	;filepath .File/name DEO2
	#0001 .File/length DEO2
	.grid/height LDZ #00
	&ver
		.grid/width LDZ #00
		&hor
			OVR2 NIP OVR SWP get-addr ;data/cells ADD2 .File/write DEO2
			INC GTHk ?&hor
		POP2
		( linebreak ) ;&lb .File/write DEO2
		INC GTHk ?&ver
	POP2
	[ LIT2 00 -state/changed ] STZ

!draw-state
	&lb 0a

( snarf )

@snarf-txt ".snarf $1

@edit-cut ( -- ) edit-copy LIT ". !fill-sel

@edit-copy ( -- )

	;snarf-txt .File/name DEO2
	#0001 .File/length DEO2
	.selection/y2 LDZ INC .selection/y1 LDZ
	&ver
		STHk
		.selection/x2 LDZ INC .selection/x1 LDZ
		&hor
			DUP STHkr get-addr ;data/cells ADD2 .File/write DEO2
			INC GTHk ?&hor
		POP2 POPr
		( linebreak ) ;&lb .File/write DEO2
		INC GTHk ?&ver
	POP2

JMP2r
	&lb 0a

@edit-paste ( -- )

	.selection LDZ2 ;snarf-txt inject-file

!draw-grid

@edit-erase ( -- ) LIT ". !fill-sel

@edit-comment ( -- )

	.selection/x1 LDZ .selection/x2 LDZ EQU ?&skip
	.selection/y2 LDZ INC .selection/y1 LDZ
	&loop
		( l ) .selection/x1 LDZ edit-comment/row set-cell
		( r ) .selection/x2 LDZ edit-comment/row set-cell
		INC GTHk ?&loop
	POP2
	&skip

JMP2r

&row

	OVRk get-addr read-cell
	[ LIT2 "#. ] ROT OVR EQU [ JMP SWP POP ]

JMP2r

(
@|ports )

@get-port-right1-value ( addr* -- value ) INC2
@get-port-right-value ( addr* -- value ) get-port-right-raw !chrb36

@get-port-left1-value ( addr* -- value ) #0001 SUB2
@get-port-left-value ( addr* -- value ) get-port-left-raw !chrb36

@get-port-left1-raw ( addr* -- value ) #0001 SUB2
@get-port-left-raw ( addr* -- value )
	( bounds ) DUP2 .grid/length LDZ2 GTH2 ?&skip
	( type ) STH2k .types/pl STH2r write-type/force
	!read-cell/force
	&skip POP2 LIT ". JMP2r

@get-port-right1-raw ( addr* -- value ) INC2
@get-port-right-raw ( addr* -- value )
	( bounds ) DUP2 .grid/length LDZ2 GTH2 ?&skip
	( lock ) STH2k #02 STH2kr write-lock/force
	( type ) .types/pr STH2r write-type/force
	!read-cell/force
	&skip POP2 LIT ". JMP2r

@set-port-output-below ( value addr* -- ) [ LIT2 00 -grid/width ] LDZ ADD2
@set-port-output ( value addr* -- )
	( bounds ) DUP2 .grid/length LDZ2 GTH2 ?&skip
	( lock ) STH2k #01 STH2kr write-lock/force
	( type ) .types/output STH2r write-type/force
	!write-cell/force
	&skip POP2 POP JMP2r

@set-port-raw ( value addr* -- )
	( bounds ) DUP2 .grid/length LDZ2 GTH2 ?&skip
	( lock ) STH2k #01 STH2kr write-lock/force
	( type ) #00 STH2r write-type/force
	!write-cell/force
	&skip POP2 POP JMP2r

(
@|primitives )

@read-cell ( addr* -- cell )
	( bounds ) DUP2 .grid/length LDZ2 GTH2 ?&skip
	&force ;data/cells ADD2 LDA JMP2r
	&skip POP2 LIT ". JMP2r

@set-cell ( x y c -- )
	ROT ROT
	( bounds ) OVR .grid/width LDZ #01 SUB GTH ?write-cell/skip
	get-addr
@write-cell ( cell addr* -- )
	( bounds ) DUP2 .grid/length LDZ2 GTH2 ?&skip
	&force ;data/cells ADD2 STA JMP2r
	&skip POP2 POP JMP2r

@read-type ( addr* -- cell )
	( bounds ) DUP2 .grid/length LDZ2 GTH2 ?&skip
	&force ;data/types ADD2 LDA JMP2r
	&skip POP2 .types/default JMP2r

@write-type ( type addr* -- )
	( bounds ) DUP2 .grid/length LDZ2 GTH2 ?&skip
	&force ;data/types ADD2 STA JMP2r
	&skip POP2 POP JMP2r

@read-lock ( addr* -- lock )
	( bounds ) DUP2 .grid/length LDZ2 GTH2 ?&skip
	&force ;data/locks ADD2 LDA JMP2r
	&skip POP2 #01 JMP2r

@write-lock ( lock addr* -- )
	( bounds ) DUP2 .grid/length LDZ2 GTH2 ?&skip
	&force ;data/locks ADD2 STA JMP2r
	&skip POP2 POP JMP2r

@set-case ( value case -- raw )

	SWP b36chr DUP #60 GTH ROT AND #50 SFT SUB

JMP2r

@get-addr ( x y -- addr* )

	#00 SWP [ LIT2 00 -grid/width ] LDZ MUL2 ROT #00 SWP ADD2

JMP2r

(
@|stdlib )

@base128 ( char - b128 ) chrb36 #00 SWP #007f MUL2 #0023 DIV2 NIP JMP2r
@b36chr ( b36 -- char ) #24 ( MOD ) [ DIVk MUL SUB ] #00 SWP ;b36clc ADD2 LDA JMP2r
@chrb36 ( char -- b36 ) #20 SUB #00 SWP ;values ADD2 LDA JMP2r
@chrmid ( char -- midi ) DUP chrb36 SWP ciuc #24 MUL ADD #00 SWP ;notes ADD2 LDA JMP2r
@chrvel ( char -- vel )

	DUP LIT "0 EQU ?&silence
	chrb36 #03 MUL DUP ?&has-vel POP #7f &has-vel

JMP2r
	&silence POP #00 JMP2r

@ciuc ( char -- bool ) LIT "A SUB #1a LTH JMP2r
@ci-key ( char -- bool ) #20 SUB #5b LTH JMP2r
@mcpy ( src* dst* len* -- ) SWP2 STH2 OVR2 ADD2 SWP2 &loop LDAk STH2kr STA INC2r INC2 GTH2k ?&loop POP2 POP2 POP2r JMP2r
@sseg ( a* b* -- f ) STH2 &l LDAk LDAkr STHr NEQ ?&e INC2k LDA #00 EQU ?&e INC2 INC2r !&l &e LDA LDAr STHr EQU JMP2r

( random )

@init-prng ( -- )

	( seed )
	#00 .DateTime/second DEI
	#00 .DateTime/minute DEI #60 SFT2 EOR2
	#00 .DateTime/hour DEI #c0 SFT2 EOR2 ,prng/x STR2
	#00 .DateTime/hour DEI #04 SFT2
	#00 .DateTime/day DEI DUP2 ADD2 EOR2
	#00 .DateTime/month DEI #60 SFT2 EOR2
	.DateTime/year DEI2 #a0 SFT2 EOR2 ,prng/y STR2

JMP2r

@prng ( -- number* )

	LIT2 &x $2
	DUP2 #50 SFT2 EOR2
	DUP2 #03 SFT2 EOR2
	LIT2 &y $2 DUP2 ,&x STR2
	DUP2 #01 SFT2 EOR2 EOR2
	,&y STR2k POP

JMP2r

@mfil ( src* len* data* -- )

	,&data STR2
	ADD2k NIP2 SWP2
	&l
		[ LIT2 &data $2 ] OVR2 STA2
		INC2 INC2 GTH2k ?&l
	POP2 POP2

JMP2r

~src/library.tal

