( Orca )

|00 @System &vector $2 &pad $6 &r $2 &g $2 &b $2
|10 @Console &vector $2 &read $1 &pad $5 &write $1
|20 @Screen &vector $2 &width $2 &height $2 &auto $1 &pad $1 &x $2 &y $2 &addr $2 &pixel $1 &sprite $1
|30 @Audio0 &vector $2 &position $2 &output $1 &pad $3 &adsr $2 &length $2 &addr $2 &volume $1 &pitch $1
|40 @Audio1 &vector $2 &position $2 &output $1 &pad $3 &adsr $2 &length $2 &addr $2 &volume $1 &pitch $1
|50 @Audio2 &vector $2 &position $2 &output $1 &pad $3 &adsr $2 &length $2 &addr $2 &volume $1 &pitch $1
|60 @Audio3 &vector $2 &position $2 &output $1 &pad $3 &adsr $2 &length $2 &addr $2 &volume $1 &pitch $1
|80 @Controller &vector $2 &button $1 &key $1
|90 @Mouse &vector $2 &x $2 &y $2 &state $1 &chord $1 &pad $4 &scrolly &scrolly-hb $1 &scrolly-lb $1
|a0 @File &vector $2 &success $2 &stat $2 &delete $1 &append $1 &name $2 &length $2 &read $2 &write $2
|c0 @DateTime &year $2 &month $1 &day $1 &hour $1 &minute $1 &second $1 &dotw $1 &doty $2 &isdst $1

( enums )

|00

	@types
		&default $1
		&locked $1
		&pl $1
		&op $1
		&pr $1
		&output $1
		&io $1
		&comment $1

|0000

	@dpad $1 &last $1
	@timer &beat $1 &speed $1 &playing $1 &frame $1 &frame-lb $1
	@state &timer $1 &changed $1
	@guide $1 &grid $1
	@filepath $40
	@grid &x1 $2 &y1 $2 &x2 $2 &y2 $2 &size &width $1 &height $1 &length $2
	@selection &from &x1 $1 &y1 $1 &to &x2 $1 &y2 $1
	@cursor &x $2 &y $2
	@toolbar &x1 $2 &y1 $2 &x2 $2 &y2 $2
	@head &x $1 &y $1 &addr $2
	@variables $24
	@signal &midi $1 &midi-last $1
	@voices $20

|0100 ( -> )

	( meta )
	;meta #f0 DEO2

	( theme )
	#0f75 .System/r DEO2
	#0f7b .System/g DEO2
	#0f7a .System/b DEO2

	( init random )
	;init-prng JSR2

	( drawing mode )
	#15 .Screen/auto DEO

	( size thinkpad )
	#02a8 .Screen/width DEO2
	#0180 .Screen/height DEO2

	( size playdate
	#0190 .Screen/width DEO2
	#00f0 .Screen/height DEO2 )

	( synths )
	#dd .Audio0/volume DEO #0118 .Audio0/adsr DEO2 #0100 .Audio0/length DEO2
	#ef .Audio1/volume DEO #0334 .Audio1/adsr DEO2 #0100 .Audio1/length DEO2
	#fe .Audio2/volume DEO #1414 .Audio2/adsr DEO2 #0100 .Audio2/length DEO2
	#dd .Audio3/volume DEO #222c .Audio3/adsr DEO2 #0100 .Audio3/length DEO2

	;sin-pcm .Audio0/addr DEO2
	;tri-pcm .Audio1/addr DEO2
	;saw-pcm .Audio2/addr DEO2
	;sqr-pcm .Audio3/addr DEO2

	( x )
	#0010 .grid/x1 STZ2
	.Screen/width DEI2
		DUP2 #03 SFT2 NIP #04 SUB .grid/width STZ
		#01 SFT2 .grid/width LDZ #01 SFT #00 SWP #30 SFT2 ADD2 #0004 ADD2 .grid/x2 STZ2
	( y )
	#0020 .grid/y1 STZ2
	.Screen/height DEI2
		DUP2 #04 SFT2 NIP #05 SUB .grid/height STZ
		#01 SFT2 .grid/height LDZ #01 SFT #00 SWP #40 SFT2 ADD2 .grid/y2 STZ2
	( len )
	#00 .grid/height LDZ #00 .grid/width LDZ MUL2 .grid/length STZ2

	( cache positions )
	.grid/x1 LDZ2 .toolbar/x1 STZ2
	.grid/x2 LDZ2 .toolbar/x2 STZ2
	.grid/y2 LDZ2 #000c ADD2
		DUP2 .toolbar/y1 STZ2
		DUP2 ;draw-dpad/y STA2
		DUP2 ;draw-position/y STA2
		DUP2 ;draw-timer/y STA2
		DUP2 ;draw-speed/y STA2
		DUP2 ;draw-state/y STA2
		DUP2 ;draw-filepath/y STA2
		DUP2 ;draw-meter/y STA2
		#0010 ADD2 .toolbar/y2 STZ2
	( cache x positions )
	.grid/x1 LDZ2 ;draw-position/x STA2
	.grid/x1 LDZ2 #0030 ADD2 ;draw-timer/x STA2
	.grid/x1 LDZ2 #0050 ADD2 ;draw-dpad/x STA2
	.grid/x1 LDZ2 #0050 ADD2 ;draw-speed/x STA2
	.grid/x2 LDZ2 #0028 SUB2 ;draw-meter/x STA2
	.toolbar/x1 LDZ2 #0078 ADD2 ;draw-filepath/x STA2
	.toolbar/x2 LDZ2 #0008 SUB2 ;draw-state/x STA2

	( theme support )
	;load-theme JSR2
	;draw-menu JSR2

	( blank file )
	;file-new JSR2

	( display guide )
	;toggle-guide JSR2
	;toggle-grid JSR2

	( draw position )
	;draw-position JSR2

	( start )
	.timer/playing LDZk #00 EQU SWP STZ

	( vectors )
	;untrap JSR2

BRK

@meta 00 &body
	( name ) "Orca 0a
	( details ) "A 20 "Livecoding 20 "Playground 0a
	( author ) "By 20 "Hundred 20 "Rabbits 0a
	( date ) "Jan 20 "8, 20 "2023 00
	02
		( icon ) 83 =appicon
		( mask ) 41 1705

@manifest

	&menu
		05 "Orca $1
			01 "n =file-new "New $1
			01 "r =trap "Rename $1
			01 "o =file-open "Open $1
			01 "s =file-save "Save $1
			01 "q =exit "Exit $1
		06 "Edit $1
			01 "c =edit-copy "Copy $1
			01 "v =edit-paste "Paste $1
			01 "x =edit-cut "Cut $1
			01 "i =toggle-insert "Insert $1
			00 08 =edit-erase "Erase $1
			01 "b =edit-comment "Comment $1
		03 "Play $1
			00 20 =play-toggle "Pause $1
			01 ", =play-decr "Decr $1
			01 ". =play-incr "Incr $1
		02 "View $1
			01 "g =toggle-guide "Guide $1
			01 "h =toggle-grid "Grid $1
		02 "Select $1
			00 1b =set-sel-reset "Reset $1
			01 "a =set-sel-all "All $1
		$1

(
@|vectors )

@untrap ( -- )

	( vectors )
	;on-console .Console/vector DEO2
	;on-button .Controller/vector DEO2
	;on-mouse .Mouse/vector DEO2
	;on-frame .Screen/vector DEO2
	#01 ;draw-filepath JSR2
	#00 .Mouse/state DEO

JMP2r

@trap ( -- )

	( vectors )
	;on-button-trap .Controller/vector DEO2
	;on-mouse-trap .Mouse/vector DEO2
	;on-frame-trap .Screen/vector DEO2
	#00 .Mouse/state DEO
	( clear cursor )
	#40 ;draw-cursor ( .. )

JMP2

@on-console ( -> )

	#00 ;draw-filepath JSR2
	( start )
	[ LIT &listening $1 ] ,&no-start JCN
		#01 ,&listening STR
		;filepath #0040 ;mclr JSR2
		&no-start
	( end )
	.Console/read DEI
	DUPk #1f GTH SWP #7f LTH AND ,&no-end JCN
		#00 ,&listening STR
		&no-end
	( capture )
	,capture-trap JSR
	#01 ;draw-filepath JSR2

BRK

@on-frame-trap ( -> )

	.state/timer LDZ
	DUP #07 AND ,&no-blink JCN
		DUP #03 SFT #01 AND #30 SFT INC ;draw-filepath JSR2
		&no-blink
	INC .state/timer STZ

BRK

@on-button-trap ( -> )

	#00 ;draw-filepath JSR2
	.Controller/key DEI DUP #0d EQU #03 MUL SUB ,capture-trap JSR
	#01 ;draw-filepath JSR2

BRK

@capture-trap ( button -- )

	DUP ,&no-null JCN POP JMP2r &no-null
	[ #08 ] NEQk NIP ,&no-pop JCN ;filepath ;spop JSR2 POP JMP2r &no-pop
	[ #0a ] NEQk NIP ,&no-load JCN ;file-open JSR2 &no-load
	[ #7f ] NEQk NIP ,&no-delete JCN ;filepath #0040 ;mclr JSR2 POP JMP2r &no-delete
	[ #20 ] GTHk NIP ,&no-special JCN ;untrap JSR2 POP JMP2r &no-special
	;filepath ;slen JSR2 NIP #3f EQU ,&no-push JCN
		DUP ;filepath ;sput JSR2
		&no-push
	POP

JMP2r

@on-mouse-trap ( -> )

	( release trap on touch )
	.Mouse/state DEI #00 NEQ [ JMP BRK ]
	;untrap JSR2

BRK

@on-frame ( -> )

	( paused )
	.timer/playing LDZ [ JMP BRK ]
	( on beat )
	.timer LDZ2 NEQ ,&skip JCN
		;manage-voices JSR2
		;run JSR2
		.timer/frame LDZ2k INC2 ROT STZ2
		#00 .timer/beat STZ
		&skip
	( inc beat )
	.timer/beat LDZk INC SWP STZ

BRK

@on-button ( -> )

	.Controller/button DEI2 ;find-modkey JSR2 ORAk #00 EQU ,&skip JCN
		JSR2 BRK
		&skip
	POP2

	( d-pad handler )
	.Controller/button DEI .dpad/last LDZ
	DUP2 #0200 EQU2 ;dpad-input/start JCN2
	DUP2 #0002 EQU2 ;dpad-input/end JCN2
	DUP #0f AND #02 EQU ;dpad-input/add JCN2
	POP ( pop last )
	.dpad/last STZ

	( modifier handlers )
	.Controller/button DEI #f0 AND ;on-button-arrow JCN2

	( default )
	.Controller/key DEI 
		DUP ;ci-key JSR2 #00 EQU ,&no-input JCN
			DUP ;fill-sel JSR2
		&no-input
	POP

BRK

@on-button-insert ( -> )

	.Controller/key DEI
	[ #00 ] EQUk NIP ,&end JCN
	[ #1b ] NEQk NIP ,&no-esc JCN ;toggle-insert JSR2 POP BRK &no-esc
	[ #20 ] NEQk NIP ,&no-spc JCN #01 #0000 ;mod-sel JSR2 POP BRK &no-spc
	[ #08 ] NEQk NIP ,&no-bks JCN #ff #0000 ;mod-sel JSR2 LIT ". ;fill-sel JSR2 POP BRK &no-bks
	DUP ;ci-key JSR2 #00 EQU ,&no-key JCN 
		DUP ;fill-sel JSR2 #01 #0000 ;mod-sel JSR2 &no-key
	&end
	POP

BRK

@on-button-arrow ( -> )

	( capture )
	.Controller/button DEI
	DUP #0f AND ,&mod STR
	#04 SFT #00 OVR #03 AND ;&vec ADD2 LDA ,&y STR
	#02 SFT #00 SWP #03 AND ;&vec ADD2 LDA ,&x STR
	[ LIT &x $1 ] [ LIT &y $1 ] [ LIT &mod $1 ] ;mod-sel JSR2

BRK
	&vec 00 ff 01 00

@on-mouse ( -> )

	.Mouse/y DEI2 #0014 LTH2 ;trap-menu JCN2

	#43 .Mouse/state DEI #00 NEQ SUB ;cursor-icn ;update-cursor JSR2

	( restore auto after cursor drawing )
	#15 .Screen/auto DEO

	.Controller/button DEI #02 NEQ ,&no-scroll JCN
	.Mouse/scrolly-lb DEI #00 EQU ,&no-scroll JCN
		.Mouse/scrolly-lb DEI ;dpad-input/mod JMP2
		&no-scroll


	( route )
	.Mouse/x DEI2 .Mouse/y DEI2 .grid ;within-rect JSR2 ,on-mouse-grid JCN
	.Mouse/x DEI2 .Mouse/y DEI2 .toolbar ;within-rect JSR2 ,on-mouse-toolbar JCN

BRK

@on-mouse-grid ( -> )

	.Mouse/state DEI [ LIT &last $1 ]
		ORAk #00 EQU ,&end JCN
		( on down )
		DUP2 #0100 NEQ2 ,&no-down JCN
			,&get-pos JSR ;set-sel-from JSR2
			,&end JMP
			&no-down
		( on release )
		,&get-pos JSR ;set-sel-to JSR2
	&end
	POP ,&last STR

BRK
	&get-pos ( -- x y )
		.Mouse/x DEI2 .grid/x1 LDZ2 SUB2 #03 SFT2 NIP
		.Mouse/y DEI2 .grid/y1 LDZ2 SUB2 #04 SFT2 NIP
	JMP2r

@on-mouse-toolbar ( -> )

	( skip ) .Mouse/state DEI #01 JCN BRK

	( release )
	#00 .Mouse/state DEO

	( left-side )
	.Mouse/x DEI2 .grid/x1 LDZ2 SUB2 #03 SFT2 NIP
	[ #05 ] GTHk NIP ,&no-insert JCN ;toggle-insert JSR2 POP BRK &no-insert
	[ #09 ] GTHk NIP ,&no-pause JCN ;play-toggle JSR2 POP BRK &no-pause
	[ #0d ] GTHk NIP ,&no-speed JCN [ .Mouse/state DEI #01 EQU DUP ADD #01 SUB ] ;mod-speed JSR2 POP BRK &no-speed
	[ #0e ] GTHk NIP OVR .grid/width LDZ SWP SUB #06 GTH #0101 NEQ2 ,&no-rename JCN ;trap JSR2 &no-rename
	POP
	( right-side )
	.grid/x2 LDZ2 .Mouse/x DEI2 SUB2 #03 SFT2 NIP
	[ #00 ] NEQk NIP ,&no-save JCN ;file-save JSR2 &no-save
	[ #02 ] NEQk NIP ,&no-guide JCN ;toggle-grid JSR2 &no-guide
	POP

BRK

(
@|selection )

@play-decr ( -- ) #ff ;mod-speed JMP2
@play-incr ( -- ) #01 ;mod-speed JMP2

@mod-sel ( x y mod -- )

	DUP #04 NEQ ,&no-scale JCN
		POP
		.selection/to LDZ2 ,&add-pos JSR ;set-sel-to JMP2
		&no-scale
	DUP #01 NEQ ,&no-drag JCN
		POP
		;edit-cut JSR2
		STH2k .selection/from LDZ2 ,&add-pos JSR
		STH2r .selection/to LDZ2 ,&add-pos JSR
			;set-sel-range JSR2
		;edit-paste JMP2
		&no-drag
	POP
	( default )
	STH2k .selection/from LDZ2 ,&add-pos JSR
	STH2r .selection/to LDZ2 ,&add-pos JSR
		;set-sel-range ( .. )

JMP2
	&add-pos ROT ADD STH ADD STHr JMP2r

@set-sel-reset ( -- ) .selection/from LDZ2 ,set-sel-from JMP
@set-sel-all ( -- ) #0000 .grid/size LDZ2 ,set-sel-range JMP
@set-sel-from ( x y -- ) DUP2 ,set-sel-range JMP

@set-sel-to ( x y -- )

	.selection/from LDZ2 SWP2

@set-sel-range ( from* to* -- )

	( clamp top-left )
	OVR2 #ff NEQ SWP #ff NEQ AND ,&no-tl JCN
		POP2 POP2 JMP2r
		&no-tl
	( clamp bottom-right )
	OVR2 .grid/height LDZ LTH SWP .grid/width LDZ LTH AND ,&no-br JCN
		POP2 POP2 JMP2r
		&no-br
	( from )
	SWP2 DUP2 .selection/from LDZ2 NEQ2 STH .selection/from STZ2
	( to )
	.selection/y1 LDZ GTHk [ JMP SWP POP ] .grid/height LDZ #01 SUB LTHk [ JMP SWP POP ] STH
	.selection/x1 LDZ GTHk [ JMP SWP POP ] .grid/width LDZ #01 SUB LTHk [ JMP SWP POP ] STHr
	DUP2 .selection/to LDZ2 NEQ2 STH .selection/to STZ2
	( skip redraw when unchanged )
	ADDr STHr #01 JCN JMP2r
	( hide guide )
	#00 .guide STZ
	( redraw )
	;draw-grid JSR2
	;draw-position ( .. )

JMP2

@fill-sel ( char -- )

	DUP #20 GTH ,&valid JCN
		POP JMP2r
		&valid

	,&c STR
	.selection/y2 LDZ INC .selection/y1 LDZ
	&ver
		STHk
		.selection/x2 LDZ INC .selection/x1 LDZ
		&hor
			DUP STHkr [ LIT &c $1 ] ;set-cell JSR2
			INC GTHk ,&hor JCN
		POP2 POPr
		INC GTHk ,&ver JCN
	POP2
	#01 .state/changed STZ ;draw-state ( .. )

JMP2

@mod-speed ( mod -- )

	.timer/speed LDZ ADD

@set-speed ( speed -- )

	#1f AND #04 GTHk [ JMP SWP POP ] .timer/speed STZ
	#00 .timer/beat STZ
	;draw-speed ( .. )

JMP2

@toggle-insert ( -- )

	;on-button ;on-button-insert
		.Controller/vector DEI2 ;on-button-insert EQU2
			[ JMP SWP2 POP2 ]
			.Controller/vector DEO2
	;draw-position ( .. )

JMP2

@play-toggle ( -- )

	.timer/playing LDZk #00 EQU SWP STZ
	;draw-timer ( .. )

JMP2

@toggle-guide ( -- )

	.guide LDZk #00 EQU SWP STZ
	;draw-grid ( .. )

JMP2

@toggle-grid ( -- )

	.guide/grid LDZk #00 EQU SWP STZ
	;draw-grid JSR2
	( icon )
	.toolbar/y1 LDZ2 .Screen/y DEO2
	.grid/x2 LDZ2 #0018 SUB2 .Screen/x DEO2
	#00 .guide/grid LDZ #40 SFT2 ;help-icn ADD2 .Screen/addr DEO2
	#01 .Screen/sprite DEO

JMP2r

( special )

@dpad-input ( -> )

	&start ( button* -> )
		POP .dpad/last STZ
		#20 .dpad STZ
		;draw-dpad JSR2
		BRK
	&end ( button* -> )
		POP
		.dpad LDZ ;fill-sel JSR2
		.selection/from LDZ2 ;set-sel-from JSR2
		#00 .dpad STZ
		.dpad/last STZ
		;draw-speed JSR2
		BRK
	&add ( button* -> )
		POP #04 SFT
	&mod ( mod -> )
		.dpad LDZ ADD
			( min ) #20 OVR #20 GTH [ JMP SWP POP ]
			( max ) #7e OVR #7e LTH [ JMP SWP POP ]
				.dpad STZ
		;draw-dpad JSR2

BRK

@init ( -- )

	;data/cells .grid/length LDZ2 LIT ". DUP ;mfil JSR2
	&grid
	;data/locks .grid/length LDZ2 STH2k #0000 ;mfil JSR2
	;data/types STH2r #0000 ;mfil JSR2
	;variables #0024 LIT ". DUP ;mfil JSR2
	#00 .signal/midi STZ

JMP2r

@manage-voices ( -> )

	( iterate thru channels )

	#1000 &while EQUk ,&end JCN
		( note ) DUPk ADD .voices ADD LDZk
		( remaining length ) SWP INC LDZ
		( next channel if already 0 ) DUP #00 EQU ,&next-chan JCN
		( update remaining length ) #01 SUB ROTk DUP ADD .voices ADD INC STZ POP
		( send note-off when length reaches 0 )
		#00 NEQ ,&no-off JCN
			( channel ) OVR .Console/write DEO
			( note ) DUP .Console/write DEO
			( off ) #00 .Console/write DEO
		&no-off
		POP
		INC
	,&while JMP &end POP2 JMP2r

	&next-chan POP2 INC
	,&while JMP

JMP2r

@run ( -- )

	,init/grid JSR
	( reset head ) LIT2r 0000
	.grid/height LDZ #00
	&ver
		DUP .head/y STZ
		.grid/width LDZ #00
		&hor
			DUP .head/x STZ
			STH2kr ,run-char JSR
			INC2r
			INC GTHk ,&hor JCN
		POP2
		INC GTHk ,&ver JCN
	POP2
	POP2r
	( do not draw when menu )
	;draw-menu/sel LDA #ff NEQ ,&skip JCN
		;draw-grid JSR2
		;draw-timer JSR2
		&skip

JMP2r

@run-char ( id* -- )

	( cache )
	DUP2 .head/addr STZ2
	( skip locked )
	DUP2 ;data/locks ADD2 LDA ,&locked JCN
	( run unlocked )
	DUP2 ;data/cells ADD2 LDA
	#00 SWP #20 SUB DUP ADD ;op-ascii ADD2 LDA2 JMP2
	&locked
	POP2

JMP2r

( operations )

@get-bang ( -- bang )

	.head/addr LDZ2 ;data/cells ADD2 STH2k
	( left ) #0001 SUB2 LDA LIT "* EQU ,&bang JCN
	( top ) STH2kr #00 .grid/width LDZ SUB2 LDA LIT "* EQU ,&bang JCN
	( right ) STH2kr INC2 LDA LIT "* EQU ,&bang JCN
	( bottom ) STH2kr #00 .grid/width LDZ ADD2 LDA LIT "* EQU ,&bang JCN
	POP2r #00 JMP2r
	&bang POP2r #01

JMP2r

@lerp ( rate target val -- val )

	DUP2 GTHk [ JMP SWP SUB ] STH
	( if rate GTH target )
	ROT DUP STHr LTH ,&skip JCN
		POP2 JMP2r
		&skip
	( target val rate )
	STH
	GTHk ,&no-below JCN
		NIP STHr SUB JMP2r
		&no-below
	NIP STHr ADD

JMP2r

(
@|drawing )

@draw-dpad ( -- )

	[ LIT2 &x $2 ] .Screen/x DEO2
	[ LIT2 &y $2 ] .Screen/y DEO2
	( value )
	#04 ;draw-chr/color STA
	.dpad LDZ ;draw-byte JSR2
	( space )
	#00 .Screen/sprite DEO
	( icon )
	.dpad LDZ #01 ;draw-chr-color ( .. )

JMP2

@draw-position ( -- )

	[ LIT2 &x $2 ] .Screen/x DEO2
	[ LIT2 &y $2 ] .Screen/y DEO2
	( draw size )
	.selection/from LDZ2 .selection/to LDZ2 EQU2k ,&normal JCN
		SWP2 SUB2 DUP2
		&normal
	( value )
	#01 ;draw-chr/color STA
	POP2 ;draw-short JSR2
	( icon )
	;selector-icn #00 .Controller/vector DEI2 ;on-button-insert EQU2 #40 SFT2 ADD2 .Screen/addr DEO2
	#02 .selection/from LDZ2 .selection/to LDZ2 NEQ2 ADD .Screen/sprite DEO

JMP2r

@draw-timer ( -- )

	[ LIT2 &x $2 ] .Screen/x DEO2
	[ LIT2 &y $2 ] .Screen/y DEO2
	( value )
	.timer/frame-lb LDZ
		DUP #03 .timer/playing LDZ DUP ADD SUB ;draw-chr/color STA
		;draw-byte JSR2
	( icon )
	;beat-icn .Screen/addr DEO2
	#02 SWP #07 AND #00 EQU ADD .Screen/sprite DEO

JMP2r

@draw-speed ( -- )

	[ LIT2 &x $2 ] .Screen/x DEO2
	[ LIT2 &y $2 ] .Screen/y DEO2
	( value )
	#01 ;draw-chr/color STA
	.timer/speed LDZ ;draw-byte JSR2
	( th )
	;&th #03 ;draw-str-color ( .. )

JMP2
	&th "th $1

@draw-state ( -- )

	[ LIT2 &x $2 ] .Screen/x DEO2
	[ LIT2 &y $2 ] .Screen/y DEO2
	( icon )
	;save-icn .Screen/addr DEO2
	#01 .Screen/sprite DEO

JMP2r

@draw-filepath ( color -- )

	[ LIT2 &x $2 ] .Screen/x DEO2
	[ LIT2 &y $2 ] .Screen/y DEO2
	( icon )
	;filepath ROT ;draw-str-color ( .. )

JMP2

@draw-meter ( -- )

	[ LIT2 &x $2 ] .Screen/x DEO2
	[ LIT2 &y $2 ] .Screen/y DEO2
	.signal/midi LDZ #07 LTHk [ JMP SWP POP ] STH
	;meter-icn #00 STHkr #40 SFT2 ADD2 .Screen/addr DEO2
	STHr #07 EQU INC .Screen/sprite DEO

JMP2r

@redraw-all ( -- )

@draw-grid ( -- )

	( reset head ) LIT2r 0000
	.grid/height LDZ #00
	&ver
		DUP .head/y STZ
		( x ) .grid/x1 LDZ2 .Screen/x DEO2
		( y ) #00 OVR #40 SFT2 .grid/y1 LDZ2 ADD2 .Screen/y DEO2
		.grid/width LDZ #00
		&hor
			DUP .head/x STZ
			STH2kr .head/addr STZ2
			STH2kr ,get-char-at-addr JSR ,get-color JSR ;draw-chr-color JSR2
			( underline )
			STH2kr ;data/locks ADD2 LDA #02 NEQ ,&no-lock JCN
				.Screen/x DEI2k #0008 SUB2 ROT DEO2
				;underline-icn .Screen/addr DEO2
				#0f .Screen/sprite DEO
				&no-lock
			INC2r
			INC GTHk ,&hor JCN
		POP2
		INC GTHk ,&ver JCN
	POP2
	POP2r
	( draw meter )
	;draw-meter JSR2
	( draw guide )
	.guide LDZ ;draw-guide JCN2

JMP2r

@get-color ( -- char type )

	.head LDZ2 ;is-selected JSR2 ,&selected JCN
		#00 .head/addr LDZ2 ;data/types ADD2 LDA ;cell-styles ADD2 LDA JMP2r
	&selected
		#0c

JMP2r

@get-char-at-addr ( addr* -- char )

	;data/cells ADD2 LDA
	DUP LIT ". NEQ ,&no-bar JCN
		POP 
		.guide/grid LDZ ,&do-grid JCN
			#20 JMP2r
			&do-grid
		.head LDZ2
		DUP2 #07 AND SWP #0f AND ORA ,&no-cross JCN
			POP2 #7f JMP2r
			&no-cross
		DUP2 #01 AND SWP #03 AND ORA ,&no-dot JCN
			&dot POP2 LIT ". JMP2r
			&no-dot
		DUP2 ,is-selected JSR ,&dot JCN
		.head/addr LDZ2 ;data/types ADD2 LDA ,&dot JCN
		POP2 #20
	&no-bar

JMP2r

@get-word ( addr* -- word* )

	;&word #0020 ;mclr JSR2
	&while
		INC2 DUP2 ;data/cells ADD2 LDA
			DUP LIT ". EQU ,&skip JCN
				DUP ;&word ;sput JSR2
				&skip
			LIT ". NEQ ,&while JCN
	POP2
	;&word

JMP2r
	&word $20

@is-selected ( x y -- bool )

	DUP .selection/y1 LDZ LTH ,&end JCN
	DUP .selection/y2 LDZ GTH ,&end JCN
	OVR .selection/x1 LDZ LTH ,&end JCN
	OVR .selection/x2 LDZ GTH ,&end JCN
		POP2 #01 JMP2r
	&end
	POP2 #00

JMP2r

@draw-guide ( -- )

	.Screen/width DEI2 #0200 GTH2 ,&continue JCN
		JMP2r
		&continue

	#0020 #0000
	&loop
		( x ) DUP2 #84 SFT2 .grid/x1 LDZ2 ADD2 #0020 ADD2 .Screen/x DEO2
		( y ) DUP2 #000f AND2 #40 SFT2 .grid/y1 LDZ2 ADD2 #0020 ADD2 .Screen/y DEO2
		.Screen/y DEI2 .grid/y2 LDZ2 #0030 SUB2 GTH2 ,&skip JCN
		DUP2k ADD2 ;op-table/docs ADD2 LDA2
		( glyph )
			LDAk #0c ;draw-chr-color JSR2
		( space )
			#00 .Screen/sprite DEO
		( text )
			INC2 #01 ;draw-str-color JSR2
		&skip
		INC2 GTH2k ,&loop JCN
	POP2 POP2

JMP2r

@draw-short ( short* -- )

	SWP ,draw-byte JSR

@draw-byte ( byte -- )

	DUP #04 SFT ,draw-hex JSR

@draw-hex ( byte -- )

	 #0f AND DUP #09 GTH #07 MUL ADD #30 ADD ,draw-chr ( .. )

JMP

@draw-chr-color ( char color -- )

	,draw-chr/color STR

@draw-chr ( char -- )

	#20 SUB #00 SWP #40 SFT2 ;font ADD2 .Screen/addr DEO2
	[ LIT &color 01 ] .Screen/sprite DEO

JMP2r

@draw-str-right ( text* -- )

	DUP2 ,get-strw JSR STH2
	.Screen/x DEI2k STH2r SUB2 ROT DEO2

@draw-str ( str* -- str* )

	LDAk #00 EQU ,&skip JCN
	&while
		LDAk ,draw-chr JSR
		INC2 LDAk ,&while JCN
	&skip
	INC2

JMP2r

@draw-str-color ( str* color -- )

	,draw-chr/color STR
	;draw-str JSR2 POP2

JMP2r

@get-strw ( str* -- width* )

	;slen JSR2 #30 SFT2

JMP2r

(
@|document )

@file-new ( -- )

	;init JSR2

	( rename to untitled.txt )
	#00 ;draw-filepath JSR2
	;filepath #0040 ;mclr JSR2
	;untitled-txt ;filepath #000d ;mcpy JSR2
	#01 ;draw-filepath JSR2

	( default speed )
	#0b ;set-speed JSR2

	;run JSR2
	#00 .state/changed STZ ;draw-state ( .. )

JMP2

@file-open ( -- )

	#0000 ;filepath ,inject-file JSR
	;draw-grid JSR2
	#00 .state/changed STZ ;draw-state ( .. )

JMP2

@inject-file ( x y path* -- )

	.File/name DEO2
	#0001 .File/length DEO2
	OVR ,&anchor-x STR
	&stream
		;&b .File/read DEO2
		( write )
		;&b LDA ;ci-key JSR2 #00 EQU ,&invalid JCN
			DUP2 ;&b LDA ;set-cell JSR2
			&invalid
		( inc x ) SWP INC SWP
		;&b LDA #0a NEQ ,&no-lb JCN
			( inc y ) INC
			( reset x ) [ LIT &anchor-x $1 ] ROT POP SWP
			&no-lb
		.File/success DEI2 ORA ,&stream JCN
	POP2

JMP2r
	&b $1

@file-save ( -- )

	;filepath .File/name DEO2
	#0001 .File/length DEO2
	.grid/height LDZ #00
	&ver
		.grid/width LDZ #00
		&hor
			OVR2 NIP OVR SWP ;get-cell JSR2 ;data/cells ADD2 .File/write DEO2
			INC GTHk ,&hor JCN
		POP2
		( linebreak ) ;&lb .File/write DEO2
		INC GTHk ,&ver JCN
	POP2
	#00 .state/changed STZ ;draw-state ( .. )

JMP2
	&lb 0a

( random )

@init-prng ( -- )

	( seed )
	#00 .DateTime/second DEI
	#00 .DateTime/minute DEI #60 SFT2 EOR2
	#00 .DateTime/hour DEI #c0 SFT2 EOR2 ,prng/x STR2
	#00 .DateTime/hour DEI #04 SFT2
	#00 .DateTime/day DEI DUP2 ADD2 EOR2
	#00 .DateTime/month DEI #60 SFT2 EOR2
	.DateTime/year DEI2 #a0 SFT2 EOR2 ,prng/y STR2

JMP2r

@prng ( -- number* )

	LIT2 &x $2
	DUP2 #50 SFT2 EOR2
	DUP2 #03 SFT2 EOR2
	LIT2 &y $2 DUP2 ,&x STR2
	DUP2 #01 SFT2 EOR2 EOR2
	,&y STR2k POP

JMP2r

( snarf )

@snarf-txt ".snarf $1

@edit-cut ( -- ) ,edit-copy JSR LIT ". ;fill-sel JMP2

@edit-copy ( -- )

	;snarf-txt .File/name DEO2
	#0001 .File/length DEO2
	.selection/y2 LDZ INC .selection/y1 LDZ
	&ver
		STHk
		.selection/x2 LDZ INC .selection/x1 LDZ
		&hor
			DUP STHkr ;get-cell JSR2 ;data/cells ADD2 .File/write DEO2
			INC GTHk ,&hor JCN
		POP2 POPr
		( linebreak ) ;&lb .File/write DEO2
		INC GTHk ,&ver JCN
	POP2

JMP2r
	&lb 0a

@edit-paste ( -- )

	.selection LDZ2 ;snarf-txt ;inject-file JSR2
	;draw-grid ( .. )

JMP2

@edit-erase ( -- ) LIT ". ;fill-sel JMP2

@edit-comment ( -- )

	.selection/x1 LDZ .selection/x2 LDZ EQU ,&skip JCN
	.selection/y2 LDZ INC .selection/y1 LDZ
	&loop
		( l ) .selection/x1 LDZ ,&row JSR ;set-cell JSR2
		( r ) .selection/x2 LDZ ,&row JSR ;set-cell JSR2
		INC GTHk ,&loop JCN
	POP2
	&skip

JMP2r

&row

	OVRk ;get-cell JSR2 ;data/cells ADD2 LDA
	LIT "# LIT ". ROT OVR EQU [ JMP SWP POP ]

JMP2r

(
@|helpers )

@base128 ( char - b128 ) ,chrb36 JSR #00 SWP #007f MUL2 #0023 DIV2 NIP JMP2r
@b36chr ( b36 -- char ) #24 ( MOD ) [ DIVk MUL SUB ] #00 SWP ;b36clc ADD2 LDA JMP2r
@chrb36 ( char -- b36 ) #20 SUB #00 SWP ;values ADD2 LDA JMP2r
@chrmid ( char -- midi ) DUP ,chrb36 JSR SWP ,ciuc JSR #24 MUL ADD #00 SWP ;notes ADD2 LDA JMP2r
@ciuc ( char -- bool ) DUP #40 GTH SWP #5b LTH AND JMP2r
@ci-key ( char -- bool ) DUP #20 GTH SWP #7b LTH AND JMP2r

@set-case ( value case -- raw ) SWP ,b36chr JSR DUP #60 GTH ROT AND #50 SFT SUB JMP2r

@set-cell ( x y c -- ) ROT ROT ,get-cell JSR ;data/cells ADD2 STA JMP2r
@get-cell ( x y -- addr* ) #00 SWP #00 .grid/width LDZ MUL2 ROT #00 SWP ADD2 JMP2r

@get-port-right-value ( addr* -- value ) ,get-port-right-raw JSR ,chrb36 JMP
@get-port-left-value ( addr* -- value ) ,get-port-left-raw JSR ,chrb36 JMP

@get-port-left-raw ( addr* -- value )

	( set type ) STH2k .types/pl STH2r ;data/types ADD2 STA
	( get data ) ;data/cells ADD2 LDA

JMP2r

@get-port-right-raw ( addr* -- value )

	( set lock ) STH2k #02 STH2kr ;data/locks ADD2 STA
	( set type ) .types/pr STH2r ;data/types ADD2 STA
	( get data ) ;data/cells ADD2 LDA

JMP2r

@set-port-output-below ( value addr* -- )

	#00 .grid/width LDZ ADD2

@set-port-output ( value addr* -- )

	( set lock ) STH2k #01 STH2kr ;data/locks ADD2 STA
	( set type ) .types/output STH2r ;data/types ADD2 STA
	( set data ) ;data/cells ADD2 STA

JMP2r

@set-port-raw ( value addr* -- )

	( set lock ) STH2k #01 STH2kr ;data/locks ADD2 STA
	( set type ) #00 STH2r ;data/types ADD2 STA
	( set data ) ;data/cells ADD2 STA

JMP2r

( generics )

@mcpy ( src* dst* len* -- ) SWP2 STH2 OVR2 ADD2 SWP2 &loop LDAk STH2kr STA INC2r INC2 GTH2k ,&loop JCN POP2 POP2 POP2r JMP2r

@mfil ( src* len* data* -- )

	,&data STR2
	ADD2k NIP2 SWP2
	&l
		[ LIT2 &data $2 ] OVR2 STA2
		INC2 INC2 GTH2k ,&l JCN
	POP2 POP2

JMP2r

@within-rect ( x* y* rect -- flag )

	STH
	( y LTH rect.y1 ) DUP2 STHkr INC INC LDZ2 LTH2 ,&skip JCN
	( y GTH rect.y2 ) DUP2 STHkr #06 ADD LDZ2 GTH2 ,&skip JCN
	SWP2
	( x LTH rect.x1 ) DUP2 STHkr LDZ2 LTH2 ,&skip JCN
	( x GTH rect.x2 ) DUP2 STHkr #04 ADD LDZ2 GTH2 ,&skip JCN
	POP2 POP2 POPr
	#01
JMP2r
	&skip
	POP2 POP2 POPr
	#00

JMP2r

@untitled-txt "untitled.orca $1

~src/library.tal

